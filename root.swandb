SourceFiles:
  - Path: battle/btl_result.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
      - Definition:
          CPPName: "battle::Result"
          Content: "enum BattleResult\n{\n  BTL_RESULT_DEFEAT = 0x0,\n  BTL_RESULT_VICTORY = 0x1,\n  BTL_RESULT_DRAW = 0x2,\n  BTL_RESULT_FLEE = 0x3,\n  BTL_RESULT_FLEE_FOE = 0x4,\n  BTL_RESULT_CAPTURE = 0x5,\n  BTL_RESULT_6 = 0x6,\n};"
        DefineFlagOps: false
    Structures:
  - Path: data/arcid_def.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
    Macros: "#define ARCID_SYSTEM_MESSAGE 2\n#define ARCID_SCRIPT_MESSAGE 3\n#define ARCID_POKEGRA 4\n#define ARCID_MAP_TERRAIN 8\n#define ARCID_MAP_MATRIX 9\n#define ARCID_ZONEDATA 12\n#define ARCID_AREADATA 13\n#define ARCID_AREA_MAP_TEX 14\n#define ARCID_AREA_EDGE_COLOR_TABLES 15\n#define ARCID_PERSONAL 16\n#define ARCID_GROWTBL 17\n#define ARCID_LEARNSETS 18\n#define ARCID_EVOLUTIONS 19\n#define ARCID_BABYMONS 20\n#define ARCID_WAZAINFO 21\n#define ARCID_FONT 23\n#define ARCID_ITEMINFO 24\n#define ARCID_ITEMGRA 25\n#define ARCID_MMODEL_TBL 47\n#define ARCID_MMODEL_GRA 48\n#define ARCID_EVENT_SCRIPT 56\n#define ARCID_FIELD_CAMERA_DEFAULT 59\n#define ARCID_LIGHTS_FIELD 60\n#define ARCID_LIGHTS_BATTLE 61\n#define ARCID_AREA_ANIME_SRT 68\n#define ARCID_AREA_ANIME_PAT 69\n#define ARCID_TRSPRITE_FRONT 71\n#define ARCID_TRSPRITE_BACK 72\n#define ARCID_RAIL_HEADERS 78\n#define ARCID_TRDATA 91\n#define ARCID_TRPOKE 92\n#define ARCID_CALENDAR 96\n#define ARCID_GIMMICK_TBL 102\n#define ARCID_FIELD_CAMERA_MAP_BOUNDARY 109\n#define ARCID_RAIL_DATA 110\n#define ARCID_ZONE_ENTITIES 126\n#define ARCID_ENCOUNTDATA 127\n#define ARCID_MAPEFF_SKILL_TBL 149\n#define ARCID_FIELD_CAMERA_MAP_PARAM 156\n#define ARCID_DEMO3D_RESOURCE 158\n#define ARCID_FIELD_CAMERA_SCRIPT_PARAM 162\n#define ARCID_FIELD_BBD_COLOR 173\n#define ARCID_AREA_BMTEX_EXT 174\n#define ARCID_AREA_BMTEX_INT 175\n#define ARCID_CDEMO_GFLOGO 220\n#define ARCID_CDEMO_OPENINGWB 221\n#define ARCID_CDEMO_OPENINGSW 222\n#define ARCID_AREA_BMDATA_EXT 225\n#define ARCID_AREA_BMDATA_INT 226\n#define ARCID_GIMMICK_EXPOBJ_MARINETUBE 295"
  - Path: data/heapid_def.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
      - Definition:
          Content: "enum _HeapID\n{\n  HEAPID_SYSTEM = 0x0,\n  HEAPID_USER = 0x1,\n  HEAPID_GAMESYSTEM = 0x3,\n  HEAPID_GAMEEVENT = 0x4,\n  HEAPID_TRIAL_HOUSE = 0x5,\n  HEAPID_SAVEDATA = 0x7,\n  HEAPID_NET = 0x8,\n  HEAPID_DEVICE_ALLOC = 0x9,\n  HEAPID_STARTMENU = 0xB,\n  HEAPID_DLP = 0xC,\n  HEAPID_FIELDMAP = 0x15,\n  HEAPID_TITLE = 0x16,\n  HEAPID_POKELIST = 0x17,\n  HEAPID_NAMEIN = 0x1E,\n  HEAPID_IRC_BATTLE_MENU = 0x1F,\n  HEAPID_TRAINER_CARD = 0x26,\n  HEAPID_MUSICAL_EVENT = 0x2C,\n  HEAPID_MUSICAL_DRESSUP = 0x2D,\n  HEAPID_MUSICAL = 0x2E,\n  HEAPID_DEBUG_GENDER_SELECT = 0x39,\n  HEAPID_MICTEST = 0x49,\n  HEAPID_FIELD_PARTICLE = 0x50,\n  HEAPID_BATTLE_RETURN = 0x52,\n  HEAPID_GAMESYNC = 0x67,\n  HEAPID_DEMO3D = 0x6C,\n  HEAPID_INTRO = 0x6F,\n  HEAPID_FIELD_MENU = 0x70,\n  HEAPID_BATTLE_LOAD = 0x76,\n  HEAPID_CDEMO = 0x7F,\n  HEAPID_SAVEDATA_DELETE = 0x81,\n  HEAPID_FIELD_CLACT = 0x89,\n  HEAPID_FIELD_WEATHER = 0x92,\n  HEAPID_FIELD_PLACE_NAME = 0x93,\n  HEAPID_FIELD_SCENEAREA = 0x96,\n  HEAPID_HEAD_MASK = 0x7FFF,\n  HEAPID_TAIL_BIT = 0x8000,\n} SWAN_PACKED;"
        DefineFlagOps: true
    Structures:
  - Path: field/event/event_field_effect.h
    Includes:
      - nds/gx.h
    Typedefs:
    GVars:
    Functions:
    Enums:
      - Definition:
          Content: "enum FieldClashEffectCutInType\n{\n  FIELD_CLASH_CUTIN_NONE = 0x0,\n  FIELD_CLASH_CUTIN_FACE = 0x1,\n  FIELD_CLASH_CUTIN_FIGURE = 0x2,\n};\n"
        DefineFlagOps: false
    Structures:
      - Definition:
          Content: "struct EventFieldEffectSubNormal\n{\n  u32 ActorIDToHide;\n};"
        Methods:
      - Definition:
          Content: "struct EventFieldEffectSubPokeSprite\n{\n  u32 Species;\n  u32 Forme;\n  u32 Sex;\n  b32 IsShiny;\n  b32 IsEgg;\n  b32 HasInitialDelay;\n  u16 InitialDelayCountdown;\n  u16 PlaybackCountdown;\n  u32 VoiceHandle;\n};\n"
        Methods:
      - Definition:
          Content: "struct EventFieldEffectSubCutin\n{\n  u32 OpponentNameMsgID;\n  GXColor NameTexPltColor1;\n  GXColor NameTexPltColor2;\n  u8 PlayerDisplayType;\n  u8 _padding1;\n  u16 _padding2;\n};\n"
        Methods:
      - Definition:
          Content: "union EventFieldEffectSub\n{\n  EventFieldEffectSubNormal Normal;\n  EventFieldEffectSubCutin Cutin;\n  EventFieldEffectSubPokeSprite PokeSprite;\n};\n"
        Methods:
  - Path: field/field_3dci.h
    Includes:
      - gfl/g3d/gfl_g3d_camera.h
      - gfl/g3d/gfl_g3d_scenemgr.h
      - gfl/core/gfl_heap.h
      - gfl/g3d/gfl_transform.h
      - system/game_event.h
      - gfl/g2d/gfl_fade.h
      - ns/g2d/res/G2DResData.h
      - ns/g2d/res/ResCharacter.h
      - ns/g2d/res/ResPalette.h
      - nds/gx.h
      - gfl/core/gfl_tcb.h
      - field/event/event_field_effect.h
      - math/fixed.h
      - gfl/g2d/gfl_bitmap.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct Fld3DCi\n{\n  void *m_ParticleSystem;\n  G3DCamera *m_CameraPersp;\n  G3DCamera *m_CameraOrtho;\n  G3DCameraProjectionMode CameraType;\n  HeapID m_HeapID;\n  u16 _padHeapID;\n  G3DManager *m_G3DScene;\n  u32 SceneNodeIdx;\n  SRTMatrix Transform;\n  u32 field_58;\n  u16 ParticleAnimStartFrame;\n  u16 ParticleAnim2StartFrame;\n  u16 Actor1AnmStartFrame;\n  u16 Actor2AnmStartFrame;\n  u16 IsParticleReqEnd;\n  u16 FldEffID;\n  G2DScreenBGBit BackupScreenDisp;\n  u8 BackupBGPriorities[4];\n  b32 IsScreenCaptureDone;\n  b32 IsParticleBegun;\n  b32 field_78;\n  b32 Actor1HasAnim;\n  b32 Actor2HasAnim;\n  NNSG2DResCharHeader *G2DCharHeader;\n  NNSG2DResPaletteHeader *G2DPaletteHeader;\n  GFLBitmap *G2DBitmap;\n  NNSG2DResData *G2DNCGR;\n  NNSG2DResData *G2DNCLR;\n  EventFieldEffectSub SubData;\n  int field_B8[24];\n  Fld3DCiG2DMaterial *G2DMaterials;\n  u8 G2DMaterialDatID;\n  u8 G2DMaterialCount;\n  u8 MaterialIndex;\n  u8 _padMaterialIndex;\n  b32 PtclIsFinished;\n  b32 Actor1IsFinished;\n  b32 Actor2IsFinished;\n  void *SubEventCallback;\n  b32 (__fastcall *UpdateCallback)(GameEvent *, Fld3DCi *);\n  u32 UpdateCallbackState;\n  u16 FrameCounter;\n  u16 NextSoundKeyFrameIdx;\n  u16 NextFadeKeyFrameIdx;\n  u16 _padNextFadeKeyFrameIdx;\n  b32 LCDConfigTCBResult;\n  Fld3DCiFadeState *m_FadeState;\n};\n"
        Methods:
      - Definition:
          Content: "struct Fld3DCiFadeState\n{\n  FadeMode Mode;\n  fx32 Value;\n  s32 TargetValue;\n  u32 MaxFrame;\n  u32 NowFrame;\n  s32 IncPerFrame;\n  TCB *m_TCB;\n};\n"
        Methods:
      - Definition:
          Content: "struct Fld3DCiG2DMaterial\n{\n  char TextureName[20];\n  char PaletteName[20];\n  u8 G3DSceneRscIdx;\n  u8 CharDatID;\n  u8 PltDatID;\n  u8 PltInOffset;\n  u8 TileWidth;\n  u8 TileHeight;\n  u8 SrcTileWidth;\n  u8 SrcTileOffsX;\n};\n"
        Methods:
  - Path: field/field_areadata.h
    Includes:
    Typedefs:
    GVars:
    Functions:
      - Content: AreaData *__fastcall AreaData_Create(HeapID heapId, u16 areaId, u16 areaSeasonShift)
      - Content: void __fastcall AreaData_Free(AreaData *ad)
      - Content: int __fastcall AreaData_GetPropBundleID(AreaData *ad)
      - Content: int __fastcall AreaData_GetTexSetID(AreaData *ad)
      - Content: int __fastcall AreaData_GetSRTAnmID(AreaData *ad)
      - Content: int __fastcall AreaData_GetPatAnmID(AreaData *ad)
      - Content: int __fastcall AreaData_IsExterior(AreaData *ad)
      - Content: int __fastcall AreaData_GetLightsID(AreaData *ad)
      - Content: u8 __fastcall AreaData_GetEdgeColorTableID(AreaData *ad)
      - Content: int __fastcall AreaData_GetActorMatColorID(AreaData *ad)
      - Content: b32 __fastcall AreaData_HasSeasons(u16 areaID)
    Enums:
    Structures:
      - Definition:
          CPPName: "field::AreaData"
          Content: "struct AreaData\n{\n  u16 Buildings;\n  u16 Textures;\n  u8 SrtAnime;\n  u8 PatAnime;\n  u8 IsExterior;\n  u8 Lights;\n  u8 EdgeColorTableId;\n  u8 BbdMdlColors;\n};\n"
        Methods:
          - CPPName: Create
            CName: AreaData_Create
            IsStatic: true
          - CPPName: Free
            CName: AreaData_Free
            IsStatic: false
          - CPPName: GetPropBundleID
            CName: AreaData_GetPropBundleID
            IsStatic: false
          - CPPName: GetTexSetID
            CName: AreaData_GetTexSetID
            IsStatic: false
          - CPPName: GetSRTAnmID
            CName: AreaData_GetSRTAnmID
            IsStatic: false
          - CPPName: GetPatAnmID
            CName: AreaData_GetPatAnmID
            IsStatic: false
          - CPPName: GetIsExterior
            CName: AreaData_IsExterior
            IsStatic: false
          - CPPName: GetLightsID
            CName: AreaData_GetLightsID
            IsStatic: false
          - CPPName: GetEdgeColorTableID
            CName: AreaData_GetEdgeColorTableID
            IsStatic: false
          - CPPName: GetActorMatColorID
            CName: AreaData_GetActorMatColorID
            IsStatic: false
          - CPPName: HasSeasons
            CName: AreaData_HasSeasons
            IsStatic: true
  - Path: field/field_async_proc.h
    Includes:
      - gfl/core/gfl_tcb.h
      - field/fieldmap.h
    Typedefs:
      - Content: "typedef void (__fastcall *FieldAsyncProcFunc)(FieldAsyncProc *proc, Field *field, void *data);\n"
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct FieldAsyncProcManager\n{\n  Field *m_Field;\n  u32 m_HeapID;\n  s32 ProcessLimit;\n  FieldAsyncProc *Processes;\n  TCBManager *UpdateTCBMgr;\n  TCBManager *DrawTCBMgr;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldAsyncProc\n{\n  FieldAsyncProcManager *m_AsyncProcMgr;\n  TCB *UpdateTCB;\n  TCB *DrawTCB;\n  FieldAsyncProcTemplate *Template;\n  void *DataHeap;\n  u32 OvlID;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldAsyncProcTemplate\n{\n  u32 TCBPriority;\n  u16 DataHeapSize;\n  u16 _padDataHeapSize;\n  FieldAsyncProcFunc InitFunc;\n  void *EndCallback;\n  FieldAsyncProcFunc UpdateFunc;\n  FieldAsyncProcFunc DrawFunc;\n};\n"
        Methods:
  - Path: field/field_bgm_info.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct BGMInfo\n{\n  u8 EntryCount;\n  u8 _padEntryCount1;\n  u16 _padEntryCount2;\n  u16 *BGMIds;\n  u8 *ISSTypes;\n};\n"
        Methods:
  - Path: field/field_blact.h
    Includes:
      - field/field_mmodel.h
      - gfl/g3d/gfl_blact.h
      - math/vector.h
      - gfl/g3d/gfl_g3d_system.h
    Typedefs:
      - Content: "typedef void (__fastcall *FldBlActLoadCallback)(u16 blActIndex, void *data);\n"
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct FldBlActObjMatCacheEntry\n{\n  u16 ObjCode;\n  u16 MatIdx;\n  u16 Flags;\n  u16 _Padding;\n};\n"
        Methods:
      - Definition:
          Content: "struct FldBlActObjMatCache\n{\n  u32 EntryCount;\n  FldBlActObjMatCacheEntry *Entries;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldBlAct\n{\n  u8 field_0;\n  u8 field_1;\n  u16 MaxSpriteCount;\n  BlActSystem *m_BlActSys;\n  int field_8;\n  int field_C;\n  FieldActorSystem *m_ActSys;\n  FldBlActObjMatCache m_ObjMatCache;\n  FldBlActLoader *m_Loader;\n  FldBlActLiveActor *AsyncDeleteActors;\n};\n"
        Methods:
      - Definition:
          Content: "struct FldBlActLoader\n{\n  b32 IsMatLoadingEnabled;\n  u16 SpriteLimit;\n  u16 ConcurrentAsyncLoadCount;\n  u16 FieldActorLimit;\n  u16 _padFieldActorLimit;\n  FldBlActMatLoadReq *MatLoadRequests;\n  FldBlActMatLoadResult *MatLoadResults;\n  FldBlActActorLoadReq *ActorSetupRequests;\n};\n"
        Methods:
      - Definition:
          Content: "struct FldBlActActorLoadReq\n{\n  u16 *ResultBlActIdxPtr;\n  FieldActor *Actor;\n  u16 ActorUID;\n  u8 BillboardSize;\n  u8 SpriteAtlasSize;\n  u8 SpriteControllerType;\n  u8 InitDone;\n  u16 _padInitDone;\n  G3DResource *Resource;\n  FldBlActLoadCallback LoadCallback;\n  void *LoadCallbackData;\n  VecFx32 Pos;\n};\n"
        Methods:
      - Definition:
          Content: "struct FldBlActMatLoadReq\n{\n  u16 ActorUID;\n  u16 ResID;\n  u8 BillboardSize;\n  u8 SpriteAtlasSize;\n  u16 _padSpriteAtlasSize;\n  u32 Flags;\n};\n"
        Methods:
      - Definition:
          Content: "struct FldBlActMatLoadResult\n{\n  u8 ReadingDone;\n  u8 _padReadingDone1;\n  u16 _padReadingDone2;\n  u32 Flags;\n  u16 ActorUID;\n  u8 BillboardSize;\n  u8 SpriteAtlasSize;\n  u32 field_C;\n  G3DResource *Resource;\n};\n"
        Methods:
      - Definition:
          Content: "struct FldBlActLiveActor\n{\n  FieldActor *m_FieldActor;\n  u16 BlActIdx;\n  u16 BaseObjCode;\n  u16 ObjCode;\n  u16 _padObjCode;\n};\n"
        Methods:
  - Path: field/field_camera.h
    Includes:
      - field/field_camera_boundary.h
      - math/vector.h
      - math/fixed.h
      - field/field_camera.h
      - gfl/fs/gfl_archive.h
      - gfl/g3d/gfl_g3d_camera.h
      - math/angle.h
    Typedefs:
      - Content: "typedef void (*FieldCameraAnimatorFunc)(FieldCamera *fldCam);\n"
    GVars:
    Functions:
    Enums:
      - Definition:
          Content: "enum FieldCameraTransformType\n{\n  FLDCAM_TARGET_REL = 0x0,\n  FLDCAM_CAMERA_REL = 0x1,\n  FLDCAM_FULL_ABS = 0x2,\n};"
        DefineFlagOps: false
    Structures:
      - Definition:
          Content: "struct FieldEvCameraAnimationCoords\n{\n  VecFx32 CameraPos;\n  VecFx32 TargetPos;\n  VecFx32 ExtraTranslation;\n  fxangle Pitch;\n  fxangle Yaw;\n  fx32 Distance;\n  fxangle FOV;\n  u16 _padFOV;\n};"
        Methods:
      - Definition:
          Content: "struct FieldEvCameraAnimationFlags\n{\n  b32 AnimateExtraTranslation;\n  b32 AnimatePitch;\n  b32 AnimateYaw;\n  b32 AnimateTargetDistance;\n  b32 AnimateFOV;\n  b32 AnimateTargetPos;\n};"
        Methods:
      - Definition:
          Content: "struct FieldEvCameraAnimationState\n{\n  u16 FrameCount;\n  u16 NowFrame;\n  b32 IsEvCameraUsed;\n  b32 IsRunning;\n  FieldEvCameraAnimationFlags Flags;\n};"
        Methods:
      - Definition:
          Content: "struct FieldEvCameraAnimationSetup\n{\n  FieldEvCameraAnimationCoords TargetCoords;\n  FieldEvCameraAnimationFlags Flags;\n};"
        Methods:
      - Definition:
          Content: "struct FieldEvCameraAnimation\n{\n  FieldEvCameraAnimationCoords TargetCoords;\n  FieldEvCameraAnimationState State;\n};"
        Methods:
      - Definition:
          Content: "struct FieldEvCameraAnimationHandler\n{\n  u32 BackupTransformFuncIdx;\n  FieldEvCameraAnimationCoords BackupCoords;\n  FieldEvCameraAnimationCoords InitCoords;\n  FieldEvCameraAnimation Animation;\n};"
        Methods:
      - Definition:
          Content: "struct CameraDelayManager\n{\n  u32 DelayMax;\n  u32 ReadIdx;\n  u32 WriteIdx;\n  u32 ReadWriteDelay;\n  b32 DelayReadIsReady;\n  b32 NoDelayX;\n  b32 NoDelayY;\n  b32 NoDelayZ;\n  VecFx32 *TargetVectors;\n  VecFx32 *CamPosVectors;\n  b32 IsRunningDelay;\n  b32 WriteDisabled;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldCamera\n{\n  HeapID m_HeapID;\n  u16 _PaddingHeapID;\n  ArcTool *DefaultCamArc;\n  ArcTool *CameraBoundaryArc;\n  G3DCamera *m_G3DCamera;\n  u32 DefaultCameraIdx;\n  FieldCameraTransformType TransformType;\n  VecFx32 *PlayerBaseTranslation;\n  VecFx32 *BaseTranslation;\n  VecFx32 *AbsCamPosPtr;\n  VecFx32 FixedCameraTranslation;\n  VecFx32 CamPosOffset;\n  VecFx32 CalcEyePos;\n  VecFx32 FixedTargetTranslation;\n  VecFx32 CalcTargetPos;\n  VecFx32 TargetPosOffset;\n  VecFx32 TargetPosBase;\n  fxangle Pitch;\n  fxangle Yaw;\n  s32 TZDist;\n  fxangle FOV;\n  u16 AngleTgtEye;\n  u16 field_84;\n  u16 field_86;\n  CameraBoundary CameraBoundaryBuffer[4];\n  u8 CameraBoundaryCount;\n  u8 UseCameraBoundaries;\n  u16 CamBoundIdx;\n  CameraDelayManager *CamDelayManager;\n  FieldEvCameraAnimationHandler Animator;\n  u32 field_1A8;\n  FieldCameraAnimatorFunc AnimatorFunction;\n};"
        Methods:
  - Path: field/field_camera_boundary.h
    Includes:
      - math/fixed.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct CameraBoundaryCoordsRect\n{\n  s32 West;\n  s32 East;\n  s32 North;\n  s32 South;\n};"
        Methods:
      - Definition:
          Content: "struct CameraBoundaryCoordsCircle\n{\n  fx32 X;\n  fx32 Z;\n  fx32 DistMax;\n  u16 AngleMin;\n  u16 AngleMax;\n};\n"
        Methods:
      - Definition:
          Content: "struct CameraBoundary\n{\n  u32 Func;\n  b32 IsCamPosNotTgt;\n  union\n  {\n    CameraBoundaryCoordsRect Rect;\n    CameraBoundaryCoordsCircle Circle;\n  };\n};"
        Methods:
  - Path: field/field_color_postfx.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
      - Definition:
          CPPName: "field::g3d::ColorPostFXMode"
          Content: "enum FieldColorPostFXMode\n{\n  FIELD_POSTFX_MODE_LUT = 0x0,\n  FIELD_POSTFX_MODE_VINTAGE = 0x1,\n};\n"
        DefineFlagOps: false
    Structures:
      - Definition:
          CPPName: "field::g3d::ColorPostFX"
          Content: "struct FieldColorPostFX\n{\n  u8 *LuminanceTable;\n  FieldColorPostFXMode Mode;\n};\n"
        Methods:
  - Path: field/field_daycare.h
    Includes:
      - gfl/core/gfl_heap.h
      - field/fieldmap.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct DayCare\n{\n  HeapID m_HeapID;\n  u16 _padHeapID;\n  Field *m_Field;\n  void *m_DayCareSave;\n  u16 EggSpawnCycleCounter;\n  u16 _padEggSpawnCycleCounter;\n};\n"
        Methods:
  - Path: field/field_disp_control.h
    Includes:
      - nds/gx.h
    Typedefs:
    GVars:
    Functions:
    Enums:
      - Definition:
          Content: "enum FieldDispControlScreen\n{\n  FLD_DISPCTL_SCREEN_LOWER = 0x0,\n  FLD_DISPCTL_SCREEN_UPPER = 0x1,\n};\n"
        DefineFlagOps: false
    Structures:
      - Definition:
          Content: "struct FieldDispControlParamSetAlpha\n{\n  G2DTargetPixel TargetPx1;\n  G2DTargetPixel TargetPx2;\n  s32 EvA;\n  s32 EvB;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldDispControlParamSetBrightness\n{\n  G2DTargetPixel TargetPx;\n  s32 EvY;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldDispControlParamSetAll\n{\n  G2DTargetPixel TargetPx1;\n  G2DTargetPixel TargetPx2;\n  s32 EvA;\n  s32 EvB;\n  s32 EvY;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldDispControlParamAdjustAlpha\n{\n  s32 EvA;\n  s32 EvB;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldDispControlParamAdjustBrightness\n{\n  s32 EvY;\n};\n"
        Methods:
      - Definition:
          Content: "union FieldDispControlParam\n{\n  FieldDispControlParamSetAlpha SetAlpha;\n  FieldDispControlParamSetBrightness SetBrightness;\n  FieldDispControlParamSetAll SetAll;\n  FieldDispControlParamAdjustAlpha AdjustAlpha;\n  FieldDispControlParamAdjustBrightness AdjustBrightness;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldDispControl\n{\n  u16 TopScreenFunc;\n  u16 BottomScreenFunc;\n  FieldDispControlParam TopScreenParam;\n  FieldDispControlParam BottomScreenParam;\n  u8 BGsEnabled[8];\n  u8 ReqSetMasterBrightA;\n  u8 ReqSetMasterBrightB;\n  u8 MasterBrightA;\n  u8 MasterBrightB;\n};\n"
        Methods:
  - Path: field/field_effect.h
    Includes:
      - gfl/core/gfl_tcb.h
      - gfl/fs/gfl_archive.h
      - field/fieldmap.h
      - gfl/core/gfl_heap.h
      - math/vector.h
    Typedefs:
      - Content: "typedef void (__fastcall *FieldTerrainEffectTCBFunc)(FieldTerrainEffectTCB *tcb, void *data);\n"
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct FieldEffects\n{\n  u32 EffectCapacity;\n  HeapID m_HeapID;\n  u16 _padHeapID;\n  Field *m_Field;\n  ArcTool *EffectArc;\n  FieldEffectHandle *m_EffectHandles;\n  u16 TCBLimit;\n  u8 Season;\n  u8 AreaIsExterior;\n  void *TCBManagerAlloc;\n  TCBManager *m_TCBManager;\n  FieldEffectTCBStore *m_TCBStore;\n  u8 *m_LuminanceTable;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldEffectHandle\n{\n  u32 EffectID;\n  void *Data;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldEffectTCBStore\n{\n  u32 Capacity;\n  HeapID m_HeapID;\n  u16 _padHeapID;\n  FieldTerrainEffectTCB *m_TCBHeap;\n  TCBManager *m_TCBManager;\n  FieldEffects *m_FieldFX;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldTerrainEffectTCB\n{\n  u32 IsUsed;\n  u32 field_4;\n  void *InitParam;\n  VecFx32 Pos;\n  u8 Data[160];\n  u32 field_B8;\n  FieldTerrainEffectTCBFunc InitFunc;\n  FieldTerrainEffectTCBFunc EndFunc;\n  FieldTerrainEffectTCBFunc UpdateFunc;\n  FieldTerrainEffectTCBFunc DrawFunc;\n  FieldEffectTCBStore *m_TCBStore;\n  TCB *BaseTCB;\n};\n"
        Methods:
  - Path: field/field_encount.h
    Includes:
      - field/field_mmodel.h
      - field/field_map_terrain.h
      - system/gamesystem.h
      - field/fieldmap.h
      - system/game_data.h
      - field/field_encount_data.h
      - field/field_position.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct EncountState\n{\n  GPosXYZ GPos;\n  u8 EncountRateBlockCounter;\n  u8 EncountRateStepIncrement;\n  u32 EncountRateStepCounter;\n  TileType TileTypeUnder;\n  u16 EncountRate;\n  u16 field_12;\n  u32 field_14;\n  u16 field_18;\n  GPosXYZ RareEncountPos;\n  u32 field_20;\n  u32 field_24;\n};\n"
        Methods:
      - Definition:
          Content: "struct EncountSystem\n{\n  Field *m_Field;\n  GameSystem *m_GameSystem;\n  GameData *m_GameData;\n  EncData *m_EncData;\n  void *m_EffectEncountState;\n};\n"
        Methods:
  - Path: field/field_encount_data.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
      - Definition:
          CPPName: "field::EncountType"
          Content: "enum EncountType {\n  ENCTYPE_GRASS,\n  ENCTYPE_GRASS_RARE,\n  ENCTYPE_GRASS_SHAKING,\n  ENCTYPE_SURF,\n  ENCTYPE_SURF_RARE,\n  ENCTYPE_FISHING,\n  ENCTYPE_FISHING_RARE,\n  ENCTYPE_MAX\n};"
        DefineFlagOps: false
    Structures:
      - Definition:
          CPPName: "field::WildEncSlot"
          Content: "struct WildEncSlot\n{\n  u16 species:11;\n  u8 forme:5;\n  char LvMin;\n  char LvMax;\n};"
        Methods:
      - Definition:
          CPPName: "field::EncountData"
          Content: "struct EncData\n{\n  u8 UserData[ENCTYPE_MAX];\n  u8 Flags:7;\n  b32 FishingEnable:1;\n  WildEncSlot Slots[56];\n};"
        Methods:
  - Path: field/field_encount_effect.h
    Includes:
      - field/fieldmap.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct EncEff\n{\n  void *EventData;\n  void (__fastcall *RenderFunc)(EncEff *);\n  Field *m_Field;\n  u32 SubOverlayIDs[3];\n  u32 SubOverlayCount;\n  void *WorkArea;\n};\n"
        Methods:
  - Path: field/field_event.h
    Includes:
      - system/gamesystem.h
      - field/fieldmap.h
      - system/game_event.h
      - field/field_player.h
    Typedefs:
    GVars:
    Functions:
      - Content: void __fastcall FieldEventProvider_InitCheckData(FieldEventCheckData *dest, GameSystem *gsys, Field *field)
      - Content: GameEvent *__fastcall FieldEventProvider_Grid(GameSystem *gsys, Field *field)
      - Content: GameEvent *__fastcall FieldEventProvider_UnionRoom(GameSystem *gsys, Field *field)
      - Content: GameEvent *__fastcall FieldEventProvider_NoGrid(GameSystem *gsys, Field *field)
      - Content: GameEvent *__fastcall FieldEventProvider_Hybrid(GameSystem *gsys, Field *field)
      - Content: GameEvent *__fastcall FieldEventProvider_Grid_CheckForEvent(GameSystem *gsys, Field *field, b32 *pCancelPhenomenon, b32 *pKeepCatwalkState)
      - Content: GameEvent *__fastcall FieldEventProvider_NoGrid_CheckForEvent(GameSystem *gsys, Field *field)
    Enums:
      - Definition:
          CPPName: "field::EventCheckFlag"
          Content: "enum FieldInteractFlag\n{\n  FLD_INTERACT_KEY_A_DOWN = 0x1,\n  FLD_INTERACT_KEY_X_DOWN = 0x2,\n  FLD_INTERACT_PLAYER_STEP_MARK = 0x4,\n  FLD_INTERACT_PLAYER_STEP_BEGIN = 0x8,\n  FLD_INTERACT_PLAYER_ACT_FINISHED = 0x10,\n  FLD_INTERACT_PLAYER_MOVE_TURNING = 0x20,\n  FLD_INTERACT_KEY_IN_MOVE_DIR = 0x40,\n  FLD_INTERACT_KEY_Y_DOWN = 0x80,\n  FLD_INTERACT_KEY_AXY_DOWN = 0x100,\n  FLD_INTERACT_PLAYER_MOVE_VERTICAL_ONLY = 0x400,\n  FLD_INTERACT_PLAYER_MOVE_NONE = 0x800,\n};\n"
        DefineFlagOps: true
    Structures:
      - Definition:
          CPPName: "field::EventCheckData"
          Content: "struct FieldEventCheckData\n{\n  u32 FieldmapHeapID;\n  GameSystem *m_GameSys;\n  GameData *m_GameData;\n  EventDataSystem *Entities;\n  u16 ZoneID;\n  Field *Fieldmap;\n  FieldPlayer *Player;\n  PlayerActionStatus m_PlayerActionStatus;\n  PlayerMoveStatus m_PlayerMoveStatus;\n  u16 PlayerDirection;\n  u16 ReserveSCRID;\n  u32 NewPressedKeys;\n  u32 HeldKeys;\n  u16 InputPlayerMoveDir;\n  VecFx32 *PlayerPos;\n  TileType TileUnderPlayer;\n  FieldInteractFlag Flags;\n};\n"
        Methods:
  - Path: field/field_eventdata.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          CPPName: "field::EntityObj"
          Content: "struct ZoneFurniture\n{\n  u16 SCRID;\n  u16 Condition;\n  u16 Interactibility;\n  u16 IsRail;\n  int X;\n  int Z;\n  int Y;\n};"
        Methods:
      - Definition:
          CPPName: "field::EntityNPCPositionGrid"
          Content: "struct ZoneNPCPositionGrid\n{\n  u16 GPosX;\n  u16 GPosZ;\n  int Y;\n};\n"
        Methods:
      - Definition:
          CPPName: "field::EntityNPCPositionRail"
          Content: "struct ZoneNPCPositionRail\n{\n  __int16 LineID;\n  __int16 PosFront;\n  __int16 PosSide;\n  __int16 Padding;\n};"
        Methods:
      - Definition:
          CPPName: "field::EntityNPCPosition"
          Content: "union ZoneNPCPosition\n{\n  ZoneNPCPositionGrid Grid;\n  ZoneNPCPositionRail Rail;\n};"
        Methods:
      - Definition:
          CPPName: "field::EntityNPC"
          Content: "struct ZoneNPC\n{\n  u16 UID;\n  u16 ModelID;\n  u16 MoveCode;\n  u16 EvType;\n  u16 SpawnFlag;\n  u16 SCRID;\n  u16 Direction;\n  u16 Param0;\n  u16 Param1;\n  u16 Param2;\n  u16 AreaW;\n  u16 AreaH;\n  b32 IsPositionRail;\n  ZoneNPCPosition Pos;\n};"
        Methods:
      - Definition:
          CPPName: "field::EntityWarp"
          Content: "struct ZoneWarp\n{\n  u16 DestZone;\n  u16 DestWarp;\n  u8 Direction;\n  char TransitionType;\n  u16 IsRail;\n  u16 X;\n  s16 Y;\n  u16 Z;\n  u16 W;\n  u16 H;\n  u16 field_12;\n};"
        Methods:
      - Definition:
          CPPName: "field::EntityTrigger"
          Content: "struct ZoneTrigger\n{\n  u16 SCRID;\n  u16 WkRefVal;\n  u16 WKID;\n  u16 Unk6;\n  u16 Unk8;\n  u16 X;\n  u16 Z;\n  u16 W;\n  u16 H;\n  s16 Y;\n  u16 field_14;\n};"
        Methods:
      - Definition:
          CPPName: "field::EntityData"
          Content: "struct ZoneEntities\n{\n  int InitScrOffset;\n  char nFurniture;\n  char nActor;\n  char nWarp;\n  char nTrigger;\n  char Content[2428];\n};"
        Methods:
  - Path: field/field_eventdata_system.h
    Includes:
      - gfl/fs/gfl_archive.h
      - field/field_encount_data.h
      - field/field_eventdata.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          CPPName: "field::EntityDataSystem"
          Content: "struct EventDataSystem\n{\n  u32 field_0;\n  ArcTool *EntityNARC;\n  ArcTool *EncdataNARC;\n  ArcTool *ScriptFileNARC;\n  u16 ZoneID;\n  u16 nFurniture;\n  u16 nActors;\n  u16 nWarps;\n  u16 nTriggers;\n  ZoneFurniture *pFurniture;\n  ZoneNPC *pActors;\n  ZoneWarp *pWarps;\n  ZoneTrigger *pTriggers;\n  u16 nFurniture2;\n  u16 nActors2;\n  u16 nWarps2;\n  u16 nTriggers2;\n  b32 IsEncountDataLoaded;\n  EncData EncountData;\n  u8 *pInitScr;\n  ZoneEntities Entities;\n};"
        Methods:
  - Path: field/field_exp_obj.h
    Includes:
      - gfl/g3d/gfl_g3d_system.h
      - gfl/g3d/gfl_g3d_scenemgr.h
      - gfl/g3d/gfl_transform.h
      - math/fixed.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct FieldExpObjScene\n{\n  b32 Exists;\n  FieldExpObjActor *Actors;\n  FieldExpObjAnmSet *AnimSets;\n  u16 G3DMgrSceneIdx;\n  u16 ActorCount;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldExpObjActor\n{\n  b32 IsBBoxCullingEnabled;\n  b32 Hidden;\n  SRTMatrix Transform;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldExpObjAnm\n{\n  u8 Paused;\n  u8 IsLooped;\n  u8 IsActive;\n  u8 _padIsPlaying;\n  fx32 FrameStep;\n  b32 IsPlaying;\n  G3DAnim *Animation;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldExpObjAnmSet\n{\n  u32 Count;\n  FieldExpObjAnm *Animations;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldExpObj\n{\n  u32 m_HeapID;\n  G3DManager *m_G3DMgr;\n  FieldExpObjScene Scenes[4];\n};\n"
        Methods:
  - Path: field/field_flash.h
    Includes:
      - gfl/g3d/gfl_g3d_system.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct FieldFlashAnimation\n{\n  fx32 Scale;\n  u8 Alpha;\n  u16 NowFrame;\n  u16 EndFrame;\n  u16 _padEndFrame;\n  fx32 ScaleSrc;\n  fx32 ScaleAddend;\n  u16 AlphaSrc;\n  s16 AlphaAddend;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldFlash\n{\n  FieldFlashG3D *m_G3D;\n  FieldFlashAnimation m_Animation;\n  u16 AnimationState;\n  u16 State;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldFlashG3D\n{\n  G3DResource *ModelResource;\n  G3DActor *Actor;\n};\n"
        Methods:
  - Path: field/field_fog.h
    Includes:
      - nds/gx.h
      - gfl/fs/gfl_archive.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct FieldFogAnimation\n{\n  u16 NowFrame;\n  u16 EndFrame;\n  s32 FogOffsetStart;\n  s32 FogOffsetAddend;\n  s32 FogDepthShiftStart;\n  s32 FogDepthShiftAddend;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldFog\n{\n  u8 FogIsEnabled;\n  u8 FogAlphaMode;\n  u8 FogDepthShift;\n  u8 FogAlpha;\n  u32 FogOffset;\n  GXColor FogColor;\n  u16 _padFogColor;\n  u8 FogTable[32];\n  FieldFogAnimation Animation;\n  b32 IsDirty;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldFogCtrl\n{\n  u8 NeedsReloadData;\n  u8 ReloadInterval;\n  u16 CurrentFog;\n  void *FogArcData;\n  u32 StaticLightIndex;\n  ArcTool *FogArcHandle;\n};\n"
        Methods:
  - Path: field/field_g3d_mapper.h
    Includes:
      - math/vector.h
      - field/field_terrain_animator.h
      - gfl/g3d/gfl_g3d_system.h
      - field/field_static_prop.h
      - gfl/core/gfl_heap.h
      - math/fixed.h
      - field/field_map_chunk.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct FieldG3DMapperConfig\n{\n  fx32 ChunkSpan;\n  u32 field_4;\n  u16 ChunkLoadDiameterX;\n  u16 ChunkLoadDiameterZ;\n  u32 LocatorGenType;\n  u32 ChunkArcID;\n  s16 MatrixWidth;\n  s16 MatrixHeight;\n  u32 ChunkIDCount;\n  u32 *ChunkDatIDs;\n  b32 IsSharedTexResource;\n  u32 TexturesArcID;\n  u32 TexturesID;\n  FieldTerrainAnmInfo m_TerrainAnmInfo;\n  u32 ChunkBufferSize;\n  u32 RenderPhase1MaxChunkCount;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldG3DMapper\n{\n  HeapID m_HeapID;\n  u16 _padHeapID;\n  int ChunkSpan;\n  int field_8;\n  int LocatorGenType;\n  int ChunkArcID;\n  u16 MatrixWidth;\n  u16 MatrixHeight;\n  int ChunkIDCount;\n  u32 *ChunkDatIDs;\n  int IsSharedTexResource;\n  FieldChunkHandle *ChunkHandles;\n  FieldChunkLocator *ChunkLocators;\n  u8 ChunkLoadDiameterX;\n  u8 ChunkLoadDiameterZ;\n  u16 ChunkCapacity;\n  int ChunkIDOfPlayer;\n  VecFx32 PlayerPos;\n  u8 Phase1MaxChunkCount;\n  u8 DrawnChunkCount;\n  u8 LastDrawnCount;\n  u8 NowDrawnCount;\n  u8 *DrawnChunkIndices;\n  int MaxConcurrentDrawChunkByteSize;\n  u8 ChunkSizeCapPassingChunkEndIdx;\n  u8 NowDrawScanline;\n  u16 field_4E;\n  int field_50;\n  VecFx32 ChunkBasePos;\n  G3DResource *MapTextures;\n  FieldPropSystem *m_PropSystem;\n  FieldTerrainAnimator *m_TerrainAnimator;\n  void *WFBC;\n  void *ResortMap;\n  void *HeightEx;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldChunkLocator\n{\n  u32 ChunkID;\n  VecFx32 Position;\n};"
        Methods:
      - Definition:
          Content: "struct FieldChunkHandle\n{\n  FieldChunk *Chunk;\n  FieldChunkContext Context;\n  FieldChunkLocator Locator;\n};"
        Methods:
  - Path: field/field_g3dobj.h
    Includes:
      - gfl/g3d/gfl_g3d_system.h
      - gfl/core/gfl_heap.h
      - gfl/g3d/gfl_transform.h
      - gfl/fs/gfl_archive.h
      - field/field_color_postfx.h
    Typedefs:
    GVars:
    Functions:
      - Content: FieldG3DObjSystem * FieldG3DObjSystem_Create(HeapID heapId, u32 resLimit, u32 objLimit)
      - Content: void FieldG3DObjSystem_Free(FieldG3DObjSystem *objSys)
      - Content: void FieldG3DObjSystem_SetupResources(FieldG3DObjSystem *sys)
      - Content: void FieldG3DObjSystem_Draw(FieldG3DObjSystem *sys)
      - Content: u16 FieldG3DObjSystem_AddResGroup(FieldG3DObjSystem *sys, FieldG3DObjResRequest *req, b32 preloadTextures)
      - Content: void FieldG3DObjSystem_FreeResGroup(FieldG3DObjSystem *g3dObjSys, u16 resGroupIdx)
      - Content: u16 FieldG3DObjSystem_AddObj(FieldG3DObjSystem *sys, u32 resGroupIdx, u16 modelIdxInRes, VecFx32 *pos)
      - Content: void FieldG3DObjSystem_FreeObj(FieldG3DObjSystem *g3dObjSys, u16 objIdx)
      - Content: void FieldG3DObjSystem_DrawObj(FieldG3DObjSystem *g3dObjSys, u16 objIdx)
      - Content: SRTMatrix * FieldG3DObjSystem_GetObjTransform(FieldG3DObjSystem *g3dObjSys, u16 objIdx)
      - Content: void FieldG3DObjSystem_SetObjPosition(FieldG3DObjSystem *g3dObjSys, u16 objIdx, VecFx32 *position)
      - Content: b32 FieldG3DObjSystem_StepObjAnm(FieldG3DObjSystem *g3dObjSys, u16 objIdx, fx16 addend)
      - Content: int FieldG3DObjSystem_StepObjAnmLoop(FieldG3DObjSystem *g3dObjSys, u16 objIdx, fx16 addend)
      - Content: fx32 FieldG3DObjSystem_GetAnmFrame(FieldG3DObjSystem *g3dObjSys, u16 objIdx, u8 anmIdx)
      - Content: void FieldG3DObjSystem_SetAnmFrame(FieldG3DObjSystem *g3dObjSys, u16 objIdx, u8 anmIdx, fx32 frame)
      - Content: void FieldG3DObj_Free(FieldG3DObj *obj, FieldG3DObjResGroup *resGroup)
      - Content: void FieldG3DObj_Setup(FieldG3DObj *obj, FieldG3DObjResGroup *resGroup, u16 resGroupId, u16 modelIdxInRes, HeapID heapId, VecFx32 *position, b32 identityRS)
      - Content: void FieldG3DObjResRequest_Clear(FieldG3DObjResRequest *req)
      - Content: void FieldG3DObjResRequest_SetModel(FieldG3DObjResRequest *req, ArcTool *arc, u16 datId)
      - Content: void FieldG3DObjResRequest_SetAnmArc(FieldG3DObjResRequest *req, ArcTool *arc)
      - Content: void FieldG3DObjResRequest_AddAnm(FieldG3DObjResRequest *req, u16 datId)
      - Content: void FieldG3DObjResGroup_Free(FieldG3DObjResGroup *resGroup)
      - Content: void FieldG3DObjResGroup_SetupTextures(FieldG3DObjResGroup *resGroup)
    Enums:
    Structures:
      - Definition:
          CPPName: "field::g3d::ObjManager"
          Content: "struct FieldG3DObjSystem\n{\n  HeapID m_HeapID;\n  u16 _padHeapID;\n  u16 ResGroupCount;\n  u16 ObjectsCount;\n  FieldG3DObjResGroup *ResGroups;\n  FieldG3DObj *Objects;\n  FieldColorPostFX *m_ColorPostFX;\n};\n"
        Methods:
          - CPPName: Create
            CName: FieldG3DObjSystem_Create
            IsStatic: true
          - CPPName: Free
            CName: FieldG3DObjSystem_Free
            IsStatic: false
          - CPPName: SetupResources
            CName: FieldG3DObjSystem_SetupResources
            IsStatic: false
          - CPPName: Draw
            CName: FieldG3DObjSystem_Draw
            IsStatic: false
          - CPPName: AddResGroup
            CName: FieldG3DObjSystem_AddResGroup
            IsStatic: false
          - CPPName: FreeResGroup
            CName: FieldG3DObjSystem_FreeResGroup
            IsStatic: false
          - CPPName: AddObj
            CName: FieldG3DObjSystem_AddObj
            IsStatic: false
          - CPPName: FreeObj
            CName: FieldG3DObjSystem_FreeObj
            IsStatic: false
          - CPPName: DrawObj
            CName: FieldG3DObjSystem_DrawObj
            IsStatic: false
          - CPPName: GetObjTransform
            CName: FieldG3DObjSystem_GetObjTransform
            IsStatic: false
          - CPPName: SetObjPosition
            CName: FieldG3DObjSystem_SetObjPosition
            IsStatic: false
      - Definition:
          CPPName: "field::g3d::Obj"
          Content: "struct FieldG3DObj\n{\n  u32 Flags;\n  u16 ResGroupID;\n  u16 ModelIdxInRes;\n  SRTMatrix Transform;\n  G3DActor *Actor;\n  G3DAnim *Animations[8];\n};"
        Methods:
          - CPPName: Free
            CName: FieldG3DObj_Free
            IsStatic: false
          - CPPName: Setup
            CName: FieldG3DObj_Setup
            IsStatic: false
      - Definition:
          CPPName: "field::g3d::ObjResGroup"
          Content: "struct FieldG3DObjResGroup\n{\n  G3DResource *MdlRes;\n  G3DResource *TexRes;\n  G3DResource *AnmResources[8];\n  u8 AnmCount;\n  u8 Status;\n  u16 field_2A;\n};"
        Methods:
          - CPPName: Free
            CName: FieldG3DObjResGroup_Free
            IsStatic: false
          - CPPName: SetupTextures
            CName: FieldG3DObjResGroup_SetupTextures
            IsStatic: false
      - Definition:
          CPPName: "field::g3d::ObjResRequest"
          Content: "struct FieldG3DObjResRequest\n{\n  ArcTool *MdlArc;\n  ArcTool *TexArc;\n  ArcTool *AnmArc;\n  u16 MdlDatID;\n  u16 TexDatID;\n  u16 AnmDatIDs[8];\n  u8 AnmCount;\n};"
        Methods:
          - CPPName: Clear
            CName: FieldG3DObjResRequest_Clear
            IsStatic: false
          - CPPName: SetModel
            CName: FieldG3DObjResRequest_SetModel
            IsStatic: false
          - CPPName: SetAnmArc
            CName: FieldG3DObjResRequest_SetAnmArc
            IsStatic: false
          - CPPName: AddAnm
            CName: FieldG3DObjResRequest_AddAnm
            IsStatic: false
  - Path: field/field_gimmick.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          CPPName: "field::GimmickWork"
          Content: "struct FieldGimmickWorkBlock\n{\n  u32 Password;\n  void *Data;\n};"
        Methods:
      - Definition:
          Content: "struct GimmickState\n{\n  u32 GimmickID;\n  u32 UserData[32];\n  u8 field_84[5];\n  u8 field_89[5];\n  u16 field_8E;\n  u32 field_90;\n};\n"
        Methods:
  - Path: field/field_lens_flare.h
    Includes:
      - field/field_exp_obj.h
      - system/gamesystem.h
      - system/game_data.h
    Typedefs:
    GVars:
    Functions:
    Enums:
      - Definition:
          Content: "enum FieldLensFlareState\n{\n  FIELD_LENSFLARE_PREPARE = 0x0,\n  FIELD_LENSFLARE_WAIT_START = 0x1,\n  FIELD_LENSFLARE_START = 0x2,\n  FIELD_LENSFLARE_WAIT_END = 0x3,\n  FIELD_LENSFLARE_END = 0x4,\n};\n"
        DefineFlagOps: false
    Structures:
      - Definition:
          Content: "struct FieldLensFlare\n{\n  FieldExpObj *m_ExpObjSys;\n  b32 IsEnabled;\n  b32 CanStart;\n  b32 IsReady;\n  FieldLensFlareState State;\n  FieldLensFlareData *m_Data;\n  GameSystem *m_GameSystem;\n  u16 m_LensFlareID;\n  u16 _padLensFlareID;\n  GameData *m_GameData;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldLensFlareData\n{\n  u32 RawDataLength;\n  FieldLensFlareDataEntry *RawData;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldLensFlareDataEntry\n{\n  u16 OutZoneID;\n  u16 InZoneID;\n  u16 EffectSetIDs[4][3];\n};\n"
        Methods:
  - Path: field/field_light.h
    Includes:
      - nds/gx.h
      - math/fixed.h
      - math/vector.h
      - gfl/g3d/gfl_g3d_light.h
      - field/field_fog.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          CPPName: "field::g3d::LightColorInterpState"
          Content: "struct LightColorInterpState\n{\n  GXColor Red1;\n  s16 RedDiff;\n  GXColor Green1;\n  s16 GreenDiff;\n  GXColor Blue1;\n  s16 BlueDiff;\n};\n"
        Methods:
      - Definition:
          CPPName: "field::g3d::LightVectorInterpState"
          Content: "struct LightVectorInterpState\n{\n  VecFx32 SrcDir;\n  VecFx32 Axis;\n  fxangle AngleAtoB;\n  s16 _padAngleAtoB;\n};\n"
        Methods:
      - Definition:
          CPPName: "field::g3d::LightConfig"
          Content: "struct FieldLightInfo\n{\n  u16 DayPart;\n  s16 MinutesOffs;\n  u8 LightIsEnabled[4];\n  GXColor LightColors[4];\n  VecFx16 LightPositions[4];\n  GXColor GXDiffuse;\n  GXColor GXAmbient;\n  GXColor GXSpecular;\n  GXColor GXEmission;\n  GXColor GXFogColor;\n  GXColor ClearColor;\n};\n"
        Methods:
      - Definition:
          CPPName: "field::g3d::LightInterpolator"
          Content: "struct FieldLightInterpolator\n{\n  u16 DayPart;\n  u16 MinutesOffs;\n  u8 IsLightsEnabled[4];\n  LightColorInterpState LightColorStates[4];\n  LightVectorInterpState LightVectorStates[4];\n  LightColorInterpState DiffuseState;\n  LightColorInterpState AmbientState;\n  LightColorInterpState SpecularState;\n  LightColorInterpState EmissionState;\n  LightColorInterpState FogColorState;\n  LightColorInterpState ClearColorState;\n  u16 TransitionFrame;\n  u16 TransitionFrameCount;\n};\n"
        Methods:
      - Definition:
          CPPName: "field::g3d::LightData"
          Content: "struct FieldLightData\n{\n  FieldLightInfo Entries[16];\n};\n"
        Methods:
      - Definition:
          CPPName: "field::g3d::LightFlashInfo"
          Content: "struct FieldLightFlashInfo\n{\n  u16 State;\n  u16 IntervalIn;\n  u16 IntervalOut;\n  GXColor FlashColor;\n};\n"
        Methods:
      - Definition:
          CPPName: "field::g3d::LightSystem"
          Content: "struct FieldLightSystem\n{\n  u16 ReqFlash;\n  u16 Season;\n  G3DLight *m_G3DLight;\n  FieldFog *m_Fog;\n  u32 LightsCount;\n  FieldLightData LightData;\n  u32 CurrentLightIndex;\n  u16 CurrentLightFileNo;\n  FieldLightInfo CurrentLightInfo;\n  s16 IsEnabled;\n  int LightsNeedsUpdate;\n  FieldLightInterpolator LightInterpolator;\n  FieldLightFlashInfo m_FlashInfo;\n  int SecondsOfDay;\n};\n"
        Methods:
  - Path: field/field_map_chunk.h
    Includes:
      - gfl/core/gfl_heap.h
      - field/field_static_prop.h
      - field/field_terrain_animator.h
      - gfl/g3d/gfl_g3d_system.h
      - ns/g3d/Model.h
      - gfl/fs/gfl_container.h
      - math/vector.h
      - field/field_rail_tile.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct FieldChunkVTable\n{\n  u32 Magic;\n  void (__fastcall *LoaderUpdateFunc)(FieldChunk *chunk, FieldChunkContext *context);\n  void (__fastcall *GetTerrainFunc)(MapTerrainSamplerOutput *, GFContainer *, VecFx32 *, fx32, fx32);\n  void (__fastcall *GetTerrainBaseLayerFunc)(MapTerrainSamplerOutput *, GFContainer *, VecFx32 *, fx32, fx32);\n};"
        Methods:
      - Definition:
          Content: "struct FieldChunkLoader\n{\n  u16 State;\n  u16 _padState;\n  u32 NowLoadedDataLength;\n  u32 BufferLoadedDataLength;\n  u32 TotalRawDataLength;\n  b32 field_10;\n  b32 field_14;\n  b32 field_18;\n  b32 field_1C;\n  b32 IsTerrainLoadDone;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldChunkContext\n{\n  FieldTerrainSRTAnimatorChunkState *m_SRTAnimatorState;\n  FieldPropSystem *m_PropSystem;\n  void *WFBC;\n  void *ResortMap;\n  u32 ChunkIdx;\n  HeapID m_HeapID;\n  u16 _padHeapID;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldChunk\n{\n  u16 Active;\n  u16 DisableStreamer;\n  VecFx32 ChunkWorldPos;\n  ArcTool *MapChunkArc;\n  u32 ReqLoadDatID;\n  u32 VTableIndex;\n  u32 ChunkBufferSize;\n  u32 TextureVRAMSize;\n  u32 ChunkStreamerBufSize;\n  FieldChunkVTable *ChunkVTableSet;\n  NNSG3DModel *m_NNSModelPtr;\n  NNSG3DModel m_NNSModel;\n  G3DResource *ModelRsc;\n  G3DResource *TexRsc1;\n  u32 TextureVRAM;\n  u32 PaletteVRAM;\n  G3DResource *MapTextures;\n  FieldPropResBank *PropResBank;\n  FieldPropInstance *PropInstances;\n  FieldPropInstance *PropInstances2;\n  u16 PropCapacity1;\n  u16 PropCapacity2;\n  u32 field_A8;\n  u32 field_AC;\n  FieldChunkLoader Loader;\n  GFContainer *ChunkContainer;\n  FieldChunkContext *Context;\n};\n"
        Methods:
  - Path: field/field_map_matrix.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          CPPName: "field::MapMatrixSystem"
          Content: "struct MapMtxSys\n{\n  s16 HeapID;\n  u16 ZoneID;\n  u32 MatrixID;\n  u16 MatrixWidth;\n  u16 MatrixHeight;\n  u16 HasZones;\n  u16 _padHasZones;\n  u32 ChunkIDCount;\n  u16 ZoneIDs[900];\n  u32 ChunkIDs[900];\n};"
        Methods:
  - Path: field/field_map_terrain.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct TileType\n{\n  u16 Class;\n  u16 Flags;\n};\n"
        Methods:
      - Definition:
          Content: "struct MapTerrainBuf\n{\n  s16 SlopeX;\n  s16 HeightDiv;\n  s16 SlopeZ;\n  u16 _padSlopeZ;\n  TileType m_TileType;\n  fx32 HeightY;\n};\n"
        Methods:
      - Definition:
          Content: "struct MapTerrainSamplerOutput\n{\n  MapTerrainBuf TerrainBuffers[16];\n  u32 LayerCount;\n};\n"
        Methods:
  - Path: field/field_mmodel.h
    Includes:
      - field/field_rail_system.h
      - gfl/core/gfl_heap.h
      - field/fieldmap.h
      - field/field_map_terrain.h
      - gfl/core/gfl_tcb.h
      - field/field_rail_system.h
      - gfl/fs/gfl_archive.h
      - system/game_data.h
      - field/field_g3d_mapper.h
      - field/field_nogrid_mapper.h
      - field/field_color_postfx.h
      - field/field_position.h
      - field/field_blact.h
      - field/field_mmodel_g3dobj.h
    Typedefs:
    GVars:
    Functions:
    Enums:
      - Definition:
          Content: "enum Direction\n{\n  DIR_UP = 0x0,\n  DIR_DOWN = 0x1,\n  DIR_LEFT = 0x2,\n  DIR_RIGHT = 0x3,\n  DIR_ANY = 0x8,\n  DIR_NONE = 0x9,\n};"
        DefineFlagOps: false
    Structures:
      - Definition:
          Content: "struct FieldActorResGroup\n{\n  u16 Res1;\n  u16 Res2;\n  u16 Animations[3];\n};\n"
        Methods:
      - Definition:
          CPPName: "field::mmodel::ResInfo"
          Content: "struct FieldActorConfig\n{\n  u16 UID;\n  u8 EntityType;\n  u8 SceneNodeType;\n  u8 EnableShadow;\n  u8 FootprintType;\n  u8 EnableReflections;\n  u8 BillboardSize;\n  u8 SpriteAtlasSize;\n  u8 SpriteControllerType;\n  u8 Gender;\n  u8 CollWidth;\n  u8 CollHeight;\n  s8 WPosOffsetX;\n  s8 WPosOffsetY;\n  s8 WPosOffsetZ;\n  FieldActorResGroup RscIndices;\n  u16 Padding;\n};\n"
        Methods:
      - Definition:
          CPPName: "field::mmodel::ResInfoTable"
          Content: "struct FieldActorConfigTable\n{\n  u32 EntryCount;\n  FieldActorConfig Entries;\n};\n"
        Methods:
      - Definition:
          CPPName: "field::mmodel::ResInfoCache"
          Content: "struct FieldActorConfigCache\n{\n  u16 EntryCount;\n  u16 EntryUIDs[26];\n  u16 _Padding;\n  FieldActorConfig Cache[26];\n};\n"
        Methods:
      - Definition:
          CPPName: "field::mmodel::PositionRail"
          Content: "struct ActorPositionRail\n{\n  RailUnit *m_RailUnit;\n  RailPosition m_RailPosition;\n  int field_C;\n};\n"
        Methods:
      - Definition:
          CPPName: "field::mmodel::Manager"
          Content: "struct FieldActorSystem\n{\n  u32 field_0;\n  u16 ActorCapacity;\n  u16 ActorCount;\n  HeapID m_HeapID;\n  HeapID FieldHeapID;\n  u16 field_C;\n  u16 field_E;\n  u32 field_10;\n  ArcTool *DataArc;\n  ArcTool *ActorConfigArc;\n  FieldActor *ActorHeap;\n  void *TCBMgrHeap;\n  TCBManager *m_TCBMgr;\n  FieldBlAct *m_FieldBlAct;\n  FieldActorG3DSystem *m_ActorG3DSystem;\n  void *m_MModelSave;\n  GameData *m_GameData;\n  FieldG3DMapper *m_G3DMapper;\n  FieldNoGridMapper *m_NoGridMapper;\n  Field *m_Field;\n  void *field_44;\n  FieldColorPostFX *m_ColorPostFX;\n  FieldActorConfigCache *m_ActorConfigCache;\n};\n"
        Methods:
      - Definition:
          CPPName: "field::mmodel::Actor"
          Content: "struct FieldActor\n{\n  u32 Flags;\n  u32 MovementFlags;\n  u16 ActorUID;\n  u16 ZoneID;\n  u16 ModelID;\n  u16 MoveCode;\n  u16 EvType;\n  u16 SpawnFlag;\n  u16 SCRID;\n  u16 DefaultDir;\n  u16 FaceDir;\n  u16 MotionDir;\n  u16 LastFaceDir;\n  u16 LastMotionDir;\n  u16 Param0;\n  u16 Param1;\n  u16 Param2;\n  u16 NextAcmd;\n  s16 field_28;\n  u16 field_2A;\n  s16 AreaW;\n  s16 AreaH;\n  GPosXYZ DefaultGPos;\n  GPosXYZ InitGPos;\n  GPosXYZ GPos;\n  s16 field_42;\n  VecFx32 WPos;\n  VecFx32 WPosOffset;\n  int field_5C;\n  int field_60;\n  int field_64;\n  int field_68;\n  int field_6C;\n  int field_70;\n  TileType CurrentTileUnder;\n  TileType CurrentTileUnderOrigY;\n  u8 CollisionWidth;\n  u8 CollisionHeight;\n  s8 ModelPosOffsetX;\n  s8 ModelPosOffsetY;\n  s8 ModelPosOffsetZ;\n  u8 ShadowGroup;\n  u16 _padShadowGroup;\n  TCB *m_TCB;\n  FieldActorSystem *m_ActorSystem;\n  void *MoveCodeVTable;\n  FieldActorVTable *SceneNodeVTable;\n  ActorPositionRail DefaultRailPos;\n  ActorPositionRail RailPos;\n  int field_B4;\n  int field_B8;\n  int field_BC;\n  int field_C0;\n  int field_C4;\n  int field_C8;\n  char field_CC[24];\n  FieldActorConfig m_Config;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldActorVTable\n{\n  void (__fastcall *OnCreateFunc)(FieldActor *);\n  void (__fastcall *OnUpdateFunc)(FieldActor *);\n  void (__fastcall *OnDeleteFunc)(FieldActor *);\n  void (__fastcall *OnSuspendFunc)(FieldActor *);\n  void (__fastcall *OnWakeUpFunc)(FieldActor *);\n  u16 (__fastcall *GetBlActIdxFunc)(FieldActor *);\n};\n"
        Methods:
  - Path: field/field_mmodel_g3dobj.h
    Includes:
      - field/field_g3dobj.h
      - field/field_mmodel.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct FieldActorG3DSystem\n{\n  FieldActorSystem *m_ActorSystem;\n  FieldG3DObjSystem *m_G3DObjSystem;\n  u16 ActorCapacity;\n  u16 _padActorCapacity;\n  FieldActorG3DObjEntry *ObjEntries;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldActorG3DObjEntry\n{\n  u16 ResGroupIndex;\n  u16 ObjCode;\n};\n"
        Methods:
  - Path: field/field_mmodel_pair.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          CPPName: "field::mmodel::PairWork"
          Content: "struct FieldActorPairState\n{\n  s16 HeapID;\n  u8 FollowerID;\n  u8 OldActorUID;\n  u16 ObjCode;\n  u16 SCRID;\n  u16 AllyTrainerID;\n};\n"
        Methods:
  - Path: field/field_nogrid_mapper.h
    Includes:
      - field/field_scenearea.h
      - field/field_scenearea_loader.h
      - field/field_rail_loader.h
      - field/field_rail_system.h
      - field/field_rail_tile.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct FieldNoGridMapper\n{\n  FieldRailSystem *m_RailSystem;\n  RailLoader *m_RailLoader;\n  FieldRailTilemap *m_Tilemap;\n  FieldSceneArea *m_SceneArea;\n  FieldSceneAreaLoader *m_SceneAreaLoader;\n  b32 CameraAreaDisabled;\n};\n"
        Methods:
  - Path: field/field_palace_sys.h
    Includes:
      - system/gamesystem.h
      - field/fieldmap.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct FieldPalaceSys\n{\n  GameSystem *m_GameSystem;\n  Field *m_Field;\n  u8 *LuminanceTable;\n};"
        Methods:
  - Path: field/field_player.h
    Includes:
      - math/fixed.h
      - math/angle.h
      - math/vector.h
      - field/field_mmodel.h
      - system/gamesystem.h
      - field/fieldmap.h
      - field/field_rail_system.h
      - field/field_effect.h
    Typedefs:
    GVars:
    Functions:
    Enums:
      - Definition:
          Content: "enum PlayerExState\n{\n  FLD_PLAYER_EXSTATE_NONE = 0x0,\n  FLD_PLAYER_EXSTATE_CYCLING = 0x1,\n  FLD_PLAYER_EXSTATE_SURF = 0x2,\n  FLD_PLAYER_EXSTATE_DIVE = 0x3,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum PlayerMoveStatus\n{\n  FLD_PLAYER_MVSTATUS_STAND = 0x0,\n  FLD_PLAYER_MVSTATUS_MOVE = 0x1,\n  FLD_PLAYER_MVSTATUS_TURN = 0x2,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum PlayerActionStatus\n{\n  FLD_PLAYER_ACTSTATUS_IDLE = 0x0,\n  FLD_PLAYER_ACTSTATUS_BEGIN = 0x1,\n  FLD_PLAYER_ACTSTATUS_PERFORMING = 0x2,\n  FLD_PLAYER_ACTSTATUS_FINISHED = 0x3,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum FieldPlayerGridStatus\n{\n  FLD_PLR_GRID_STAT_IDLE = 0x0,\n  FLD_PLR_GRID_STAT_MOVE = 0x1,\n  FLD_PLR_GRID_STAT_TURN = 0x2,\n  FLD_PLR_GRID_STAT_BRAKE = 0x3,\n  FLD_PLR_GRID_STAT_CATWALK = 0x4,\n  FLD_PLR_GRID_STAT_CATWALK_EXIT = 0x5,\n  FLD_PLR_GRID_STAT_CATWALK_EXIT_WAIT = 0x6,\n  FLD_PLR_GRID_STAT_FALL = 0x7,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum FieldPlayerGridCommand\n{\n  FLD_PLR_GRID_CMD_BUSY = 0x0,\n  FLD_PLR_GRID_CMD_IDLE = 0x1,\n  FLD_PLR_GRID_CMD_MOVE = 0x2,\n  FLD_PLR_GRID_CMD_TURN = 0x3,\n  FLD_PLR_GRID_CMD_BRAKE = 0x4,\n  FLD_PLR_GRID_CMD_JUMP = 0x5,\n  FLD_PLR_GRID_CMD_CATWALK_BALANCE = 0x6,\n  FLD_PLR_GRID_CMD_CATWALK_EXIT = 0x7,\n  FLD_PLR_GRID_CMD_CATWALK_EXIT_WAIT = 0x8,\n  FLD_PLR_GRID_CMD_FALL = 0x9,\n};\n"
        DefineFlagOps: false
    Structures:
      - Definition:
          Content: "struct PlayerState\n{\n  u16 ZoneID;\n  VecFx32 VecPos;\n  RailPosition RailPos;\n  fxangle RotationAngle;\n  u8 field_1A;\n  u8 IsPosRail;\n  u16 NowOBJCODE;\n  __int16 field_1E;\n  int field_20;\n  int field_24;\n  int field_28;\n  int field_2C;\n  int field_30;\n  int field_34;\n  int field_38;\n  int field_3C;\n  PlayerExState ExState;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldPlayer\n{\n  Field *m_Field;\n  FieldPlayerCore *m_Core;\n  FieldPlayerGrid *m_GridCtl;\n  FieldPlayerRail *m_RailCtl;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldPlayerCore\n{\n  u32 field_0;\n  GameSystem *m_GameSystem;\n  Field *m_Field;\n  PlayerState *State;\n  PlayerActionStatus ActionStatus;\n  PlayerMoveStatus MoveStatus;\n  u32 Sex;\n  FieldActor *Actor;\n  u16 KeyMoveDirH;\n  u16 KeyMoveDirV;\n  u32 SpecialSequence;\n  FieldTerrainEffectTCB *m_TerrainFXTCB;\n  u16 field_2C;\n  u16 field_2E;\n  u16 StateChangeFuncIdx;\n  u16 IsStateChangeDone;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldPlayerGrid\n{\n  FieldPlayerGridStatus Status;\n  FieldPlayerGridCommand LastCommand;\n  u32 Flags;\n  FieldPlayerCore *m_PlayerCore;\n  Field *m_Field;\n  u16 CatwalkFocusBreakCounter;\n  u8 IsCatwalkBalanceInterruptedByMenu;\n  u8 _padCatwalk;\n  u16 NowSFX;\n  u16 SFXCounter;\n  b32 IsVerticalMoveOnly;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldPlayerRail\n{\n  u32 field_0;\n  int field_4;\n  int field_8;\n  int field_C;\n  int field_10;\n  FieldPlayerCore *m_PlayerCore;\n  Field *m_Field;\n  FieldActor *m_Actor;\n  RailUnit *m_PlayerRailUnit;\n};\n"
        Methods:
  - Path: field/field_position.h
    Includes:
      - math/vector.h
      - field/field_rail_system.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "union FieldPosition\n{\n  VecFx32 Vector;\n  RailPosition Rail;\n};\n"
        Methods:
      - Definition:
          Content: "struct GPosXYZ\n{\n  u16 X;\n  s16 Y;\n  u16 Z;\n};\n"
        Methods:
  - Path: field/field_rail.h
    Includes:
      - math/vector.h
      - math/fixed.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct RailPoint\n{\n  u32 ConnectedLines[4];\n  u32 LineDirections[4];\n  u32 LineWidths[4];\n  VecFx32 Position;\n  u32 Camera;\n  char Name[48];\n};\n"
        Methods:
      - Definition:
          Content: "struct RailLine\n{\n  u32 Point1;\n  u32 Point2;\n  u32 Angle;\n  u32 Curve;\n  u32 Camera;\n  u32 TileLength;\n  char Name[48];\n};\n"
        Methods:
      - Definition:
          Content: "struct RailCurve\n{\n  u32 Type;\n  VecFx32 Position;\n  char Padding[20];\n};\n"
        Methods:
      - Definition:
          Content: "struct RailCameraCoordsAbs\n{\n  VecFx32 Eye;\n  VecFx32 Target;\n};\n"
        Methods:
      - Definition:
          Content: "struct RailCameraCoordsPlayer\n{\n  u32 Pitch;\n  u32 Yaw;\n  fx32 Zoom;\n  VecFx32 TargetOffset;\n};\n"
        Methods:
      - Definition:
          Content: "struct RailCameraCoordsViewpoint\n{\n  fx32 Pitch;\n  fx32 Distance;\n  VecFx32 Target;\n};\n"
        Methods:
      - Definition:
          Content: "struct RailCameraCoordsViewpointLerp\n{\n  u32 Pitch;\n  fx32 Distance;\n  VecFx32 TargetStart;\n  VecFx32 TargetEnd;\n};\n"
        Methods:
      - Definition:
          Content: "union RailCameraCoords\n{\n  RailCameraCoordsAbs Abs;\n  RailCameraCoordsPlayer Player;\n  RailCameraCoordsViewpoint Viewpoint;\n  RailCameraCoordsViewpointLerp ViewpointLerp;\n};\n"
        Methods:
      - Definition:
          Content: "struct RailCamera\n{\n  u32 Type;\n  RailCameraCoords Coords;\n};\n"
        Methods:
      - Definition:
          Content: "union RailComponent\n{\n  RailPoint *Point;\n  RailLine *Line;\n};\n"
        Methods:
  - Path: field/field_rail_loader.h
    Includes:
      - gfl/fs/gfl_container.h
      - field/field_rail.h
      - field/field_rail_system.h
      - math/fixed.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct RailDataHandle\n{\n  u16 PointCount;\n  u16 LineCount;\n  u16 CameraCount;\n  u16 CurveCount;\n  u16 FuncSet1Count;\n  u16 FuncSet2Count;\n  u16 FuncSet3Count;\n  u16 _padFuncSet2Count;\n  RailPoint *Points;\n  RailLine *Lines;\n  void *Cameras;\n  RailCurve *Curves;\n  RailCameraFunc *CameraFuncs;\n  RailConvRailToWorldFunc *RailToWorldFuncs;\n  RailConvWorldToRailFunc *WorldToRailFuncs;\n  fx32 TileWidth;\n};\n"
        Methods:
      - Definition:
          Content: "struct RailLoader\n{\n  GFContainer *m_Container;\n  u32 ContainerLength;\n  RailDataHandle DataHandle;\n};\n"
        Methods:
  - Path: field/field_rail_system.h
    Includes:
      - field/field_camera.h
      - gfl/core/gfl_heap.h
      - field/field_rail.h
      - field/field_rail_loader.h
    Typedefs:
      - Content: typedef void (*RailCameraFunc)(FieldRailSystem*);
      - Content: "typedef void (*RailConvRailToWorldFunc)(RailUnit *unit, VecFx32 *dest);\n"
      - Content: "typedef b32 (*RailConvWorldToRailFunc)(u32 lineId, FieldRailSystem *railSystem, VecFx32 *worldPos, RailPosition *dest, VecFx32 *alignedWorldPos);\n"
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct RailPosition\n{\n  u16 ComponentID;\n  u8 ComponentIsLine;\n  u8 RailDirection;\n  s16 PosSide;\n  u16 PosFront;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldRailSystem\n{\n  HeapID m_HeapID;\n  u16 IsDataLoaded;\n  u16 field_4;\n  u16 field_6;\n  RailUnit *Units;\n  u32 UnitCount;\n  FieldCamera *m_FieldCamera;\n  RailUnit *CameraParentUnit;\n  b32 CameraIsDirty;\n  RailUnit *PlayerUnit;\n  RailDataHandle RailData;\n  u16 field_50[18];\n};\n"
        Methods:
      - Definition:
          Content: "struct RailUnit\n{\n  u16 ComponentIsLine;\n  u16 State;\n  RailComponent CurrentComponent;\n  u16 field_8;\n  u16 field_A;\n  u32 PosVWS;\n  u32 LineLengthWorldSpace;\n  s32 PosHWS;\n  u32 LerpedLineWidth;\n  fx32 TileWidth;\n  u32 CurrentLineDirection;\n  RailDataHandle *RailData;\n  u16 *field_28;\n  u8 field_2C;\n  u8 field_2D;\n  u16 field_2E;\n  u8 field_30;\n  u8 field_31;\n  u8 Direction;\n  u8 field_33;\n  u32 field_34;\n  VecFx32 CalcPos;\n  VecFx32 field_44;\n  VecFx32 field_50;\n  RailPosition field_5C;\n  RailPosition field_64;\n  RailPosition field_6C;\n  u32 field_74;\n  FieldRailSystem *m_RailSystem;\n};\n"
        Methods:
  - Path: field/field_rail_tile.h
    Includes:
      - field/field_map_terrain.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct FieldRailTilemapBlock\n{\n  u16 Width;\n  u16 Height;\n  TileType Tiles[];\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldRailTilemap\n{\n  void *RawData;\n  u32 DataLength;\n  u32 BlockCount;\n  FieldRailTilemapBlock **Blocks;\n};\n"
        Methods:
  - Path: field/field_scenearea.h
    Includes:
      - field/field_camera.h
      - field/fieldmap.h
      - math/vector.h
      - math/fixed.h
    Typedefs:
      - Content: "typedef b32 (*CameraAreaCollCheck)(FieldSceneArea *, CameraArea *, VecFx32 *);\n"
      - Content: "typedef void (*CameraAreaCalcFunc)(FieldSceneArea *, CameraArea *, VecFx32 *);\n"
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct CameraAreaRect\n{\n  u16 GridX;\n  u16 GridZ;\n  u16 GridW;\n  u16 Unk1;\n  u16 GridH;\n  u16 Unk2;\n  u16 Pitch1;\n  u16 Yaw1;\n  fx32 TZ1;\n  u16 Pitch2;\n  u16 Yaw2;\n  fx32 TZ2;\n  int ForbidDelayManager;\n  VecFx32 TargetOffset1;\n  VecFx32 TargetOffset2;\n  fxangle FOV1;\n  fxangle FOV2;\n};"
        Methods:
      - Definition:
          Content: "struct CameraAreaCircle\n{\n  u32 AngleStart;\n  u32 AngleEnd;\n  fx32 RadiusStart;\n  fx32 RadiusEnd;\n  fx32 X;\n  fx32 Y;\n  fx32 Z;\n  s32 Pitch;\n  int TZDist;\n  VecFx32 CamTgt;\n  VecFx32 CamPos;\n};"
        Methods:
      - Definition:
          Content: "struct CameraArea\n{\n  union\n  {\n    CameraAreaRect Rect;\n    CameraAreaCircle Circle;\n  };\n  int Unk4;\n  u16 CollCheckFunc;\n  u16 StayFunc;\n  u16 EnterFunc;\n  u16 ExitFunc;\n};"
        Methods:
      - Definition:
          Content: "struct FieldDynCameraFunctions\n{\n  CameraAreaCollCheck *CollCheckFuncs;\n  CameraAreaCalcFunc *CalcFuncs;\n  u16 CollCheckFuncCount;\n  u16 CalcFuncCount;\n};"
        Methods:
      - Definition:
          Content: "struct FieldSceneArea\n{\n  FieldCamera *m_FieldCamera;\n  Field *m_Field;\n  CameraArea *m_CameraData;\n  FieldDynCameraFunctions *CameraFunctions;\n  int CameraCount;\n  int LastCamIdx;\n  int IsCameraAreaEnable;\n  int CurrentCamDataFlags;\n};"
        Methods:
  - Path: field/field_scenearea_loader.h
    Includes:
      - gfl/fs/gfl_archive.h
      - field/field_scenearea.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct FieldSceneAreaLoader\n{\n  CameraArea *CameraData;\n  int CameraCount;\n  ArcTool *CamArcTools[2];\n};"
        Methods:
  - Path: field/field_skill_map_eff.h
    Includes:
      - field/field_flash.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct FieldSkillMapEff\n{\n  FieldFlash *m_Flash;\n};"
        Methods:
  - Path: field/field_sound_system.h
    Includes:
      - system/game_data.h
      - gfl/snd/gfl_player_volume_fader.h
    Typedefs:
    GVars:
    Functions:
    Enums:
      - Definition:
          Content: "enum FieldSoundSystemState\n{\n  FIELD_SND_STATE_INIT = 0x0,\n  FIELD_SND_STATE_PLAYING = 0x1,\n  FIELD_SND_STATE_IDLE = 0x2,\n  FIELD_SND_STATE_FADING_OUT = 0x3,\n  FIELD_SND_STATE_FADING_IN = 0x4,\n  FIELD_SND_STATE_PUSHING = 0x5,\n  FIELD_SND_STATE_POPPING = 0x6,\n  FIELD_SND_STATE_POPPED = 0x7,\n  FIELD_SND_STATE_CHANGING_OUT = 0x8,\n  FIELD_SND_STATE_CHANGING_IN = 0x9,\n  FIELD_SND_STATE_CHANGED = 0xA,\n  FIELD_SND_STATE_PUSHING_POSTPONED = 0xB,\n  FIELD_SND_STATE_PUSHED_POSTPONED = 0xC,\n  FIELD_SND_STATE_PREPARING = 0xD,\n  FIELD_SND_STATE_PREPARED = 0xE,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum FieldSoundCommand\n{\n  FIELD_SND_CMD_NULL = 0x0,\n  FIELD_SND_FADE_IN = 0x1,\n  FIELD_SND_FADE_OUT = 0x2,\n  FIELD_SND_BGM_PUSH = 0x3,\n  FIELD_SND_BGM_POP = 0x4,\n  FIELD_SND_BGM_CHANGE = 0x5,\n  FIELD_SND_BGM_PREPARE = 0x6,\n  FIELD_SND_BGM_PLAY = 0x7,\n};\n"
        DefineFlagOps: false
    Structures:
      - Definition:
          Content: "struct FieldSoundSystemRequest\n{\n  FieldSoundCommand Command;\n  u32 SoundID;\n  u16 FadeOutTime;\n  u16 FadeInTime;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldSoundSystem\n{\n  GameData *m_GameData;\n  FieldSoundSystemState State;\n  u32 NowBGM;\n  u32 CommandBGMID;\n  u32 ChangeTargetBGM;\n  u32 field_14;\n  u16 CommandFadeInTime;\n  u16 CommandFadeOutTime;\n  FieldSoundCommand NowCommandID;\n  u32 BGMStackIndex;\n  u32 LastBGMStack[1];\n  FieldSoundSystemRequest CommandBuffer[10];\n  u8 CommandReadIndex;\n  u8 CommandWriteIndex;\n  u16 _padCommandWriteIndex;\n  PlayerVolumeFader *m_PlayerVolumeFader;\n  void *m_RingtoneSys;\n  u16 AmbienceIDs[2];\n  u16 AmbienceVolumes[2];\n  u32 AvailableBGMSlotBits;\n};\n"
        Methods:
  - Path: field/field_spawn.h
    Includes:
      - field/field_position.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct ZoneSpawnInfo\n{\n  u32 ChangeType;\n  u16 ZoneID;\n  u16 WarpID;\n  u16 WarpDir;\n  u16 PosWeightBits;\n  b32 IsRail;\n  FieldPosition Pos;\n};\n"
        Methods:
  - Path: field/field_static_prop.h
    Includes:
      - field/field_map_chunk.h
      - gfl/g3d/gfl_g3d_system.h
      - gfl/g3d/gfl_transform.h
      - field/field_g3d_mapper.h
      - gfl/core/gfl_heap.h
    Typedefs:
    GVars:
    Functions:
    Enums:
      - Definition:
          Content: "enum FieldPropAnmStatus\n{\n  FIELD_PROP_ANMSTATUS_NONE = 0x0,\n  FIELD_PROP_ANMSTATUS_PLAY_LOOP = 0x1,\n  FIELD_PROP_ANMSTATUS_PAUSED = 0x2,\n  FIELD_PROP_ANMSTATUS_PLAY = 0x3,\n  FIELD_PROP_ANMSTATUS_PLAY_INV = 0x4,\n};\n"
        DefineFlagOps: false
    Structures:
      - Definition:
          Content: "struct FieldPropRTCState\n{\n  u32 NowDayPart;\n  u32 PreviousDayPart;\n  b32 HasDayPartChanged;\n  u8 ReqPlayAnimeID;\n  u8 Season;\n  u16 _padding;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldPropResBank\n{\n  FieldPropResInstanceHandle *m_ResInstanceHandles;\n  u32 Count;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldPropResInstanceHandle\n{\n  G3DActor *m_G3DActor;\n  int field_4;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldChunkPropHolder\n{\n  FieldChunk *m_Chunk;\n  u32 LastResIndex;\n  u16 InstanceIndex;\n  u16 IsVisible;\n  FieldPropInstance *m_PropInstance;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldPropSystem\n{\n  HeapID m_HeapID;\n  u16 _padHeapID;\n  FieldG3DMapper *m_G3DMapper;\n  FieldPropRTCState m_RTCState;\n  FieldPropResBundle *ResBundle;\n  u8 ResIDToBundleIndexLUT[512];\n  u32 ResBundleEntryCount;\n  FieldPropResBank m_ResBank;\n  int field_228;\n  int field_22C;\n  int field_230;\n  int field_234;\n  u32 ResourceCount;\n  FieldPropResource *Resources;\n  G3DResource *TextureNSBTX;\n  u32 ResInstanceCount;\n  FieldPropResInstance *m_ResInstances;\n  FieldPropHandle *PropHandles[7];\n  FieldChunkPropHolder m_ChunkPropHolders[288];\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldPropResBundle\n{\n  u16 Signature;\n  u16 FileCount;\n  u32 Offsets[];\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldPropResAnmHeader\n{\n  u16 AnmCntType;\n  u8 OneAnmSetSize;\n  u8 ItemCount;\n  u32 AnimeOffsets[4];\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldPropResInfo\n{\n  u16 UID;\n  u16 Type;\n  u16 DoorUID;\n  s16 DoorX;\n  s16 DoorY;\n  s16 DoorZ;\n  u16 Unk1;\n  u16 Unk2;\n  FieldPropResAnmHeader AnimeHeader;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldPropResource\n{\n  FieldPropResInfo *m_Info;\n  G3DResource *ModelData;\n  G3DResource *AnimeData[4];\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldPropResInstance\n{\n  G3DActor *m_G3DActor;\n  FieldPropResource *m_PropResource;\n  FieldPropAnmStatus AnimationStatuses[4];\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldPropHandle\n{\n  FieldPropSystem *m_PropSystem;\n  u32 CurrentAnmIdx;\n  FieldChunkPropHolder *m_ChunkPropHolder;\n  FieldPropResInstance m_ResInstance;\n  SRTMatrix ModelMatrix;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldPropPosition\n{\n  VecFx32 Position;\n  u16 RotationY;\n  u16 _padding;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldPropInstance\n{\n  u32 ResIndex;\n  FieldPropPosition Pos;\n};\n"
        Methods:
  - Path: field/field_status.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
      - Definition:
          Content: "enum FieldStatusBusyFlag\n{\n  FLD_STATUS_BUSY_NONE = 0x0,\n  FLD_STATUS_BUSY_BATTLE = 0x1,\n  FLD_STATUS_BUSY_LOADING = 0x2,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum FlashPermsFlag\n{\n  FLD_FLASH_NONE = 0x0,\n  FLD_FLASH_ALLOW = 0x1,\n  FLD_FLASH_ACTIVE = 0x2,\n};\n"
        DefineFlagOps: false
    Structures:
      - Definition:
          Content: "struct FieldStatus\n{\n  int field_0;\n  u8 NewLoadFlag;\n  u8 ContinueFlag;\n  u8 IsFlashUsed;\n  char field_7;\n  u16 FlashPerms;\n  __int16 field_A;\n  int field_C;\n  char field_10;\n  u8 BusyFlag;\n  u16 ReserveSCRID;\n};\n"
        Methods:
  - Path: field/field_subscreen.h
    Includes:
      - gfl/core/gfl_heap.h
      - field/fieldmap.h
    Typedefs:
      - Content: "typedef void (*FieldSubscreenCallback)(void *data);\n"
    GVars:
    Functions:
    Enums:
      - Definition:
          Content: "enum FieldSubscreenID\n{\n  FLD_SUBSCREEN_ID_DEFAULT = 0x0,\n  FLD_SUBSCREEN_ID_FIELD_MENU = 0x1,\n  FLD_SUBSCREEN_ID_UNION_ROOM_STANDBY = 0x2,\n  FLD_SUBSCREEN_ID_BLANK_STANDBY = 0x3,\n  FLD_SUBSCREEN_ID_ENTRALINK = 0x4,\n  FLD_SUBSCREEN_ID_BLANK_STANDBY_2 = 0x5,\n  FLD_SUBSCREEN_ID_DOWSING = 0x6,\n  FLD_SUBSCREEN_ID_SAVE_REPORT = 0x7,\n  FLD_SUBSCREEN_ID_CGEAR_WELCOME = 0x8,\n  FLD_SUBSCREEN_ID_CGEAR_POWEROFF = 0x9,\n  FLD_SUBSCREEN_ID_FUNFEST = 0xA,\n  FLD_SUBSCREEN_ID_PWT = 0xB,\n  FLD_SUBSCREEN_ID_12 = 0xC,\n  FLD_SUBSCREEN_ID_MAX = 0xD,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum FieldSubscreenState\n{\n  FLD_SUBSCREEN_STATE_IDLE = 0x0,\n  FLD_SUBSCREEN_STATE_FADE_OUT_SET = 0x1,\n  FLD_SUBSCREEN_STATE_SWAP = 0x2,\n  FLD_SUBSCREEN_STATE_FADE_IN_SET = 0x3,\n  FLD_SUBSCREEN_STATE_NEW_ENTER_WAIT = 0x4,\n  FLD_SUBSCREEN_STATE_MAX = 0x5,\n};\n"
        DefineFlagOps: false
    Structures:
      - Definition:
          Content: "struct FieldSubscreen\n{\n  FieldSubscreenID ScreenID;\n  FieldSubscreenID NextScreenID;\n  FieldSubscreenState State;\n  HeapID m_HeapID;\n  u16 _padHeapID;\n  FieldSubscreenID ReturnSubscreenID;\n  Field *m_Field;\n  FieldSubscreenCallback *Callback;\n  void *CallbackData;\n  void *WorkData;\n};\n"
        Methods:
  - Path: field/field_task.h
    Includes:
    Typedefs:
      - Content: "typedef b32 (__fastcall *FieldTaskCallback)(void *data);\n"
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct FieldTask\n{\n  u32 State;\n  void *Data;\n  FieldTaskCallback Callback;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldTaskManager\n{\n  u8 TaskLimit;\n  u8 _padTaskLimit1;\n  u16 _padTaskLimit2;\n  FieldTask **Tasks;\n  FieldTask **ParentTasks;\n};\n"
        Methods:
  - Path: field/field_terrain_animator.h
    Includes:
      - ns/g3d/res/G3DResData.h
      - ns/g3d/res/ResAnimation.h
      - gfl/g3d/gfl_g3d_tpanm.h
      - gfl/g3d/gfl_g3d_system.h
      - math/fixed.h
      - ns/g3d/Animation.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct FieldTerrainAnmInfo\n{\n  u32 SRTAnimeID;\n  u32 PatAnimeID;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldTerrainAnimatorSetup\n{\n  u16 Flags;\n  u16 ChunkCapacity;\n  u16 ARCIDSRT;\n  u16 IdSRT;\n  u16 ARCIDPat;\n  u16 IdPat;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldTerrainSRTAnimatorChunkState\n{\n  u32 Flags;\n  NNSG3DAnimation *m_NNSAnimation;\n  NNSG3DResAnm *m_ResAnm;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldTerrainSRTAnimator\n{\n  FieldTerrainSRTAnimatorChunkState *ChunkStates;\n  u32 ChunkStateCount;\n  NNSG3DResData *NSBTAData;\n  fx32 NowFrame;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldTerrainTexPatAnimation\n{\n  b32 IsLoaded;\n  GFBTPValue *CurrentValues;\n  int *TextureDestVRAMAddresses;\n  int *TextureSizes;\n  u32 *FrameCounters;\n  u32 TargetCount;\n  G3DResource *WorldTextures;\n  void *GFBTPData;\n  GFBTPController m_GFBTPController;\n  G3DResource *PrivateTextures;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldTerrainTexPatAnimationEntry\n{\n  u32 GFBTPOffset;\n  u32 NSBTXOffset;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldTerrainTexPatAnimationPack\n{\n  u32 DataCount;\n  FieldTerrainTexPatAnimationEntry Offsets[2];\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldTerrainTexPatAnimator\n{\n  FieldTerrainTexPatAnimation Animations[16];\n  FieldTerrainTexPatAnimationPack *m_AnimationPack;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldTerrainAnimator\n{\n  b32 IsPlaying;\n  fx32 FrameStep;\n  FieldTerrainSRTAnimator m_SRTAnimator;\n  FieldTerrainTexPatAnimator m_TexPatAnimator;\n};\n"
        Methods:
  - Path: field/fieldmap.h
    Includes:
      - math/fixed.h
      - math/vector.h
      - gfl/core/gfl_heap.h
      - gfl/g3d/gfl_g3d_camera.h
      - gfl/g3d/gfl_g3d_light.h
      - gfl/core/gfl_tcb.h
      - system/gamesystem.h
      - field/field_areadata.h
      - field/field_camera.h
      - field/field_light.h
      - field/field_fog.h
      - field/field_scenearea.h
      - field/field_scenearea_loader.h
      - field/field_task.h
      - field/field_gimmick.h
      - field/field_g3dobj.h
      - field/field_terrain_animator.h
      - field/field_g3d_mapper.h
      - field/field_encount.h
      - field/field_skill_map_eff.h
      - field/field_async_proc.h
      - field/field_spawn.h
      - field/field_subscreen.h
      - field/field_exp_obj.h
      - field/field_nogrid_mapper.h
      - field/field_effect.h
      - field/field_palace_sys.h
      - field/field_color_postfx.h
      - gfl/g3d/gfl_blact.h
      - field/field_3dci.h
      - field/field_daycare.h
      - field/field_encount_effect.h
      - field/field_disp_control.h
      - field/field_lens_flare.h
    Typedefs:
    GVars:
    Functions:
    Enums:
      - Definition:
          CPPName: "field::RenderMode"
          Content: "enum FieldRenderMode\n{\n  FLD_RENDERMODE_FIELDMAP = 0x0,\n  FLD_RENDERMODE_FIELD_EFFECT = 0x1,\n  FLD_RENDERMODE_ENCOUNT_EFFECT = 0x2,\n};"
        DefineFlagOps: false
      - Definition:
          Content: "enum FieldmapStatus\n{\n  FIELDMAP_STATUS_OPEN = 0x0,\n  FIELDMAP_STATUS_LOAD = 0x1,\n  FIELDMAP_STATUS_SPAWN = 0x2,\n  FIELDMAP_STATUS_RUN = 0x3,\n  FIELDMAP_STATUS_UNLOAD = 0x4,\n  FIELDMAP_STATUS_CLOSE = 0x5,\n};\n"
        DefineFlagOps: false
    Structures:
      - Definition:
          CPPName: "field::Field"
          Content: "struct Field\n{\n  HeapID m_HeapID;\n  u16 _padHeapID;\n  GameSystem *m_GameSystem;\n  GameData *m_GameData;\n  AreaData *m_AreaData;\n  FieldCamera *m_FieldCamera;\n  FieldLightSystem *m_LightSystem;\n  FieldFog *m_Fog;\n  FieldFogCtrl *m_FogCtrl;\n  void *m_WeatherSystem;\n  FieldSubscreen *m_Subscreen;\n  void *m_MsgBGSys;\n  int dword2C;\n  void *m_PlaceName;\n  int dword34;\n  void *m_FesGimmick;\n  FieldExpObj *m_FieldExpObj;\n  FieldActorSystem *m_ActorSystem;\n  FieldNoGridMapper *m_NoGridMapper;\n  FieldSceneArea *m_SceneArea;\n  FieldSceneAreaLoader *m_SceneAreaLoader;\n  FieldG3DMapper *m_G3DMapper;\n  int gap54;\n  FieldG3DMapperConfig m_G3DMapperConfig;\n  FieldPlayer *m_Player;\n  EncountSystem *m_EncountSys;\n  FieldEffects *m_FieldEffects;\n  void *gapA0;\n  FieldPalaceSys *m_PalaceSys;\n  FieldColorPostFX m_ColorPostFX;\n  FieldSkillMapEff *m_SkillMapEff;\n  G3DCamera *m_G3DCamera;\n  G3DLight *m_Lights;\n  TCB *AsyncActorMatLoadTCB;\n  BlActSystem *m_ActorBlAct;\n  BlActSystem *EffectBlact;\n  BlActSystem *WildEffBlAct;\n  FieldAsyncProcManager *m_AsyncProcMgr;\n  b32 IsMapLoadFinished;\n  FieldmapStatus m_Status;\n  u8 SubroutinePhase;\n  u8 SubRoutineChoiceAlternator;\n  u16 _padSubroutine;\n  u32 FramesSinceStart;\n  u16 ZoneID;\n  u16 _padZoneID;\n  ZoneSpawnInfo PlayerZoneState;\n  VecFx32 *PlayerPositionPtr;\n  VecFx32 PlayerPosition;\n  fx32 gap110;\n  u32 ZoneEnvHighResult;\n  FieldmapCtrlVTable *ControllerVTable;\n  void *m_Controller;\n  TCBManager *m_TCBMgr;\n  void *TCBMgrHeap;\n  FieldGimmickWorkBlock GimmickWork;\n  void *m_ParticleSystem;\n  Fld3DCi *m_Fld3DCi;\n  DayCare *m_DayCare;\n  FieldRenderMode RenderMode;\n  FieldG3DObjSystem *m_G3DObjSys;\n  FieldTaskManager *m_TaskMgr;\n  b32 FadeFlag;\n  EncEff *m_EncEff;\n  b32 IsEffectRunning;\n  b32 IsSeasonBannerOverdraw;\n  void *NDemoData;\n  FieldDispControl *m_FieldDispControl;\n  void *m_CasteliaRush;\n  FieldLensFlare *m_LensFlare;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldMapConfig\n{\n  FieldG3DMapperConfig m_G3DMapperConfig;\n  FieldmapCtrlVTable *FieldmapCtrlVtable;\n  b32 UseMapMatrix;\n  u32 HeapSize;\n};\n"
        Methods:
      - Definition:
          Content: "struct FieldmapCtrlVTable\n{\n  u32 TypeID;\n  void (__fastcall *CreateFunc)(Field *field, VecFx32 *pos, Direction dir);\n  void (__fastcall *UpdateFunc)(Field *field, VecFx32 *outPos);\n  void (__fastcall *FreeFunc)(Field *field);\n  void (__fastcall *GetPosFunc)(Field *field);\n};\n"
        Methods:
  - Path: field/iss.h
    Includes:
      - gfl/core/gfl_heap.h
      - system/game_data.h
      - field/iss_city.sys.h
      - field/iss_3ds_sys.h
      - field/iss_dungeon_sys.h
      - field/iss_road_sys.h
      - field/iss_switch_sys.h
      - field/iss_zone_sys.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct ISS\n{\n  HeapID m_HeapID;\n  u16 _padHeapID;\n  GameData *m_GameData;\n  u32 NowBoundBGM;\n  u32 FrameCounter;\n  ISSCitySys *m_CitySys;\n  ISSRoadSystem *m_RoadSys;\n  ISSDungeonSys *m_DungeonSys;\n  ISSZoneSys *m_ZoneSys;\n  ISSSwitchSys *m_SwitchSys;\n  ISS3DSoundSys *m_3DSoundSys;\n};\n"
        Methods:
  - Path: field/iss_3ds_sys.h
    Includes:
      - gfl/core/gfl_heap.h
      - math/vector.h
      - math/fixed.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct ISS3DSoundUnit\n{\n  b32 Enabled;\n  VecFx32 Location;\n  fx32 Radius;\n  u32 BaseVolume;\n  u16 TrackBitMask;\n  u16 _padTrackBitMask;\n};\n"
        Methods:
      - Definition:
          Content: "struct ISS3DSoundSys\n{\n  HeapID m_HeapID;\n  u16 _padHeapID;\n  b32 IsEnabled;\n  u8 TargetMasterVolume;\n  u8 MasterVolume;\n  u8 MasterVolumeChangeSpeed;\n  u8 _padMasterVolume;\n  VecFx32 ListenerPos;\n  VecFx32 ListenerLookPos;\n  ISS3DSoundUnit Units[16];\n  u32 UnitVolumes[16];\n  u32 UnitPans[16];\n  ISS3DSoundConfig *Configs;\n  u8 ConfigCount;\n  u8 NowConfig;\n  u16 field_26A;\n  u32 field_26C;\n};\n"
        Methods:
      - Definition:
          Content: "struct ISS3DSoundConfig\n{\n  u32 BGMId;\n  u16 EnabledUnitsMask;\n  u16 _padding;\n};\n"
        Methods:
  - Path: field/iss_city.sys.h
    Includes:
      - field/field_player.h
    Typedefs:
    GVars:
    Functions:
    Enums:
      - Definition:
          Content: "enum ISSCitySysState\n{\n  ISS_CITY_SYS_KEEP = 0x0,\n  ISS_CITY_SYS_FADEIN = 0x1,\n  ISS_CITY_SYS_FADEOUT = 0x2,\n};\n"
        DefineFlagOps: false
    Structures:
      - Definition:
          Content: "struct ISSCitySys\n{\n  PlayerState *m_PlayerState;\n  b32 Enabled;\n  u32 State;\n  u32 EmitterVolume;\n  u32 MasterVolume;\n  ISSCityUnit **m_Units;\n  u8 UnitCount;\n  u8 NowUnitIndex;\n  u16 _padding;\n};\n"
        Methods:
      - Definition:
          Content: "struct ISSCityUnit\n{\n  u16 ZoneID;\n  u16 _padZoneID;\n  u32 OriginGX;\n  s32 OriginGY;\n  u32 OriginGZ;\n  u8 VolumeCurve[6];\n  u8 CurveKeysX[6];\n  u8 CurveKeysY[6];\n  u8 CurveKeysZ[6];\n};\n"
        Methods:
  - Path: field/iss_dungeon_sys.h
    Includes:
      - system/game_data.h
      - field/field_player.h
      - gfl/core/gfl_heap.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct ISSDungeonSys\n{\n  HeapID m_HeapID;\n  u16 _padHeapID;\n  PlayerState *m_PlayerState;\n  GameData *m_GameData;\n  int IsEnabled;\n  u16 NowZoneID;\n  u16 ReqZoneID;\n  ISSDungeonList *m_Dungeons;\n  ISSDungeonConfig *NowDungeon;\n  u16 field_1C;\n  u16 field_1E;\n  u16 field_20[4];\n  u16 field_28[4];\n  u16 field_30[4];\n};\n"
        Methods:
      - Definition:
          Content: "struct ISSDungeonList\n{\n  u8 Count;\n  u8 _padCount1;\n  u16 _padCount2;\n  ISSDungeonConfig *Entries;\n};\n"
        Methods:
      - Definition:
          Content: "struct ISSDungeonConfig\n{\n  u16 ZoneID;\n  u16 field_2;\n  s16 SeasonalPitch[4];\n  u16 SeasonalBitMask[4];\n  u32 field_14;\n  u32 field_18;\n};\n"
        Methods:
  - Path: field/iss_road_sys.h
    Includes:
      - math/vector.h
      - field/field_player.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct ISSRoadSystem\n{\n  b32 IsEnabled;\n  u32 Volume;\n  PlayerState *m_PlayerState;\n  VecFx32 LastPlayerPos;\n};\n"
        Methods:
  - Path: field/iss_switch_sys.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
      - Definition:
          Content: "enum ISSSwitchSetVolumeFadeState\n{\n  ISS_SWITCH_SET_VOLUME_KEEP = 0x0,\n  ISS_SWITCH_SET_VOLUME_LOWER = 0x1,\n  ISS_SWITCH_SET_VOLUME_RAISE = 0x2,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum ISSSwitchState\n{\n  ISS_SWITCH_ON = 0x0,\n  ISS_SWITCH_MUTED = 0x1,\n  ISS_SWITCH_FADE_IN = 0x2,\n  ISS_SWITCH_FADE_OUT = 0x3,\n};\n"
        DefineFlagOps: false
    Structures:
      - Definition:
          Content: "struct ISSSwitchMuteStateChangeRequest\n{\n  b32 Enabled;\n  b32 IsUnmute;\n  u32 BGMId;\n  u32 SwitchIndex;\n};\n"
        Methods:
      - Definition:
          Content: "struct ISSSwitchMasterVolumeChangeRequest\n{\n  b32 Enabled;\n  u32 BGMId;\n  u32 TargetVolume;\n  u16 Interval;\n  u16 _padInterval;\n};\n"
        Methods:
      - Definition:
          Content: "struct ISSSwitchSys\n{\n  b32 IsEnabled;\n  u8 SetCount;\n  u8 _padSetCount1;\n  u16 _padSetCount2;\n  ISSSwitchSet **SwitchSets;\n  ISSSwitchSet *NowSwitchSet;\n  ISSSwitchMuteStateChangeRequest m_SwitchMuteStateChangeRequests[4];\n  ISSSwitchMasterVolumeChangeRequest m_VolumeChangeReq;\n};\n"
        Methods:
      - Definition:
          Content: "struct ISSSwitchSet\n{\n  ISSSwitchSetVolumeFadeState FadeStatus;\n  u32 BGMId;\n  u16 ZoneIDs[9];\n  u8 ZoneIDCount;\n  u8 _padZoneIDCount;\n  ISSSwitch *Switches[9];\n  u32 MasterVolume;\n  s32 FadeVolumeAddend;\n  u32 BaseVolume;\n  u16 NowFrame;\n  u16 EndFrame;\n};\n"
        Methods:
      - Definition:
          Content: "struct ISSSwitch\n{\n  ISSSwitchState State;\n  u16 NowFrame;\n  u16 EndFrame;\n  u16 TrackMask;\n  u16 _padTrackMask;\n};\n"
        Methods:
  - Path: field/iss_zone_sys.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct ISSZoneSys\n{\n  b32 IsEnabled;\n  u8 ZoneCount;\n  u8 _padZoneCount1;\n  u16 _padZoneCount2;\n  ISSZoneConfig *Zones;\n  u8 LastZoneDesc;\n  u8 _padLastZoneDesc;\n  u16 TrackMaskIn;\n  u16 TrackMaskOut;\n  u16 FadeTime;\n  u16 Counter;\n};\n"
        Methods:
      - Definition:
          Content: "struct ISSZoneConfig\n{\n  u16 ZoneID;\n  u16 TrackMaskIn;\n  u16 TrackMaskOut;\n  u16 FadeTime;\n};\n"
        Methods:
  - Path: gfl/core/gfl_areaman.h
    Includes:
    Typedefs:
    GVars:
    Functions:
      - Content: AreaMan *__fastcall GFL_AreaManCreate(u32 size, HeapID heapId)
      - Content: void __fastcall GFL_AreaManFree(AreaMan *area)
      - Content: u32 __fastcall GFL_AreaManAllocDefault(AreaMan *area, u32 count)
      - Content: u32 __fastcall GFL_AreaManAllocHead(AreaMan *area, u32 minAddr, u32 addrRange, u32 count)
      - Content: u32 __fastcall GFL_AreaManAllocTail(AreaMan *area, u32 maxAddr, u32 addrRange, u32 count)
      - Content: b32 __fastcall GFL_AreaManSetBits(AreaMan *area, u32 bitAddr, u32 bitCount)
      - Content: void __fastcall GFL_AreaManDeAlloc(AreaMan *area, u32 bitAddr, u32 bitCount)
    Enums:
    Structures:
      - Definition:
          CPPName: "gfl::core::AreaMan"
          Content: "struct AreaMan\n{\n  u16 RawSize;\n  u16 BlockSize;\n  void *HeapEnd;\n  b32 Debug;\n  u8 Bytes[];\n};\n"
        Methods:
          - CPPName: Create
            CName: GFL_AreaManCreate
            IsStatic: true
          - CPPName: Free
            CName: GFL_AreaManFree
            IsStatic: false
          - CPPName: AllocDefault
            CName: GFL_AreaManAllocDefault
            IsStatic: false
          - CPPName: AllocHead
            CName: GFL_AreaManAllocHead
            IsStatic: false
          - CPPName: AllocTail
            CName: GFL_AreaManAllocTail
            IsStatic: false
          - CPPName: SetBits
            CName: GFL_AreaManSetBits
            IsStatic: false
          - CPPName: DeAlloc
            CName: GFL_AreaManDeAlloc
            IsStatic: false
  - Path: gfl/core/gfl_heap.h
    Includes:
    Typedefs:
      - Content: typedef u16 HeapID;
    GVars:
      - Content: GFLHeapManager* g_HeapMgr;
    Functions:
      - Content: b32 GFL_HeapMgrInit(HeapSetup *mainHeapInfo, u16 mainHeapCount, u16 subHeapCount, u32 alignment)
      - Content: void* GFL_HeapGetRawPtr(HeapID heapId)
      - Content: u16 GFL_HeapGetAllocationCount(HeapID heapId)
      - Content: void GFL_HeapCreateRoot(void *memAddress, u32 size, HeapID heapId)
      - Content: void GFL_HeapCreateChild(HeapID parentHeapId, HeapID heapId, u32 size)
      - Content: b32 GFL_HeapAddRoot(void *startAddress, u32 size, int heapId)
      - Content: b32 GFL_HeapAddChild(HeapID mainHeapID, HeapID subHeapID, u32 size)
      - Content: void GFL_HeapDelete(HeapID heapId)
      - Content: u32 GFL_HeapGetSize(HeapID heapId)
      - Content: u16 GFL_HeapGetAllocationCount(HeapID heapId)
      - Content: u32 GFL_HeapGetFreeSize(HeapID heapId)
      - Content: u32 GFL_HeapGetHighestAllocatableSize(HeapID heapId)
      - Content: b32 GFL_HeapDeleteCore(HeapID heapId)
      - Content: u16 GFL_HeapGetAllocationCountCore(HeapID heapId)
      - Content: u32 GFL_HeapGetFreeSizeCore(HeapID heapId)
      - Content: void* GFL_HeapAllocate(HeapID heapId, u32 size, b32 calloc, const char *sourceFile, u16 lineNo)
      - Content: void GFL_HeapFree(void *heap)
      - Content: void GFL_HeapResize(void *block, u32 newSize)
      - Content: void* GFL_HeapAllocateCore(HeapID heapId, u32 size)
      - Content: b32 GFL_HeapFreeCore(void *heap)
      - Content: b32 GFL_HeapResizeCore(void *block, u32 newSize)
      - Content: HeapID GFL_HeapGetBlockHeapID(void *block)
      - Content: void GFL_HeapSetBlockDebugInfo(void *block, const char *__file__, u16 __line__)
      - Content: HeapDebugInfo* GFL_HeapGetBlockDebugInfoPtr(void *block)
      - Content: b32 GFL_HeapStatusCheck(HeapID heapId)
      - Content: b32 GFL_HeapStatusValidate(HeapID heapId)
      - Content: AllocatorState GFL_HeapGetLastResult()
      - Content: void GFL_HeapHandleAllocResult(AllocatorState state)
      - Content: void GFL_HeapDebugTraceAlloc(HeapID heapId, void *block, u32 blockLength)
      - Content: void GFL_HeapDebugTraceFree(void *block)
      - Content: void GFL_HeapDebugNotifyTrackedAlloc(void *block)
      - Content: void GFL_HeapDebugNotifyTrackedFree(void *block)
      - Content: void GFL_HeapDeleteCleanCheck(HeapID heapId)
      - Content: void GFL_HeapDumpAllocFailure(HeapID heapId, u32 blockLength)
      - Content: void GFL_HeapDumpOnFailure(HeapID heapId)
      - Content: b32 GFL_HeapDebugCopyFileName(char *dest, char *src)
      - Content: SWAN_CPPONLY(INLINE void* operator new(size_t size, HeapID heapId, const char* file, unsigned int line) { return GFL_HeapAllocate(heapId, size, 0, file, line); })
      - Content: SWAN_CPPONLY(INLINE void* operator new[](size_t size, HeapID heapId, const char* file, unsigned int line) { return GFL_HeapAllocate(heapId, size, 0, file, line); })
    Enums:
      - Definition:
          Content: "enum AllocatorState\n{\n  HEAP_OK = 0x0,\n  HEAP_ID_OUT_OF_RANGE = 0x1,\n  HEAP_MISSING_HANDLE = 0x2,\n  HEAP_ALLOC_FAIL = 0x3,\n  HEAP_LIMIT_REACHED = 0x4,\n  HEAP_INIT_FAIL = 0x5,\n};"
        DefineFlagOps: false
    Structures:
      - Definition:
          Content: "struct HeapSetup\n{\n  int Size;\n  int field_4;\n};"
        Methods:
      - Definition:
          Content: "struct HeapDebugInfo\n{\n  char FileName[18];\n  u16 LineNo;\n};"
        Methods:
      - Definition:
          Content: "struct HeapHandle\n{\n  void *HeapBase;\n  void *ParentHeapBase;\n  void *StartAddress;\n  u16 AllocationBlockCount;\n  char IsMainHeap;\n  char field_F;\n};"
        Methods:
      - Definition:
          Content: "struct HeapBlockHandle\n{\n  u16 HeapID;\n  u16 Magic;\n  HeapDebugInfo DebugInfo;\n  int field_18;\n};"
        Methods:
      - Definition:
          Content: "struct GFLHeapManager\n{\n  HeapHandle *HeapHandles;\n  u8 *HeapHandleIndices;\n  u16 SubHeapCount;\n  u16 MainHeapCount;\n  u16 MaxConcurrentSubHandles;\n  u16 ResultCode;\n};"
        Methods:
    Macros: "#include <string.h>\n\n#if __GNUC__ >= 12\n#define GFL_HEAP__FILENAME__ __FILE_NAME__\n#else\n#define GFL_HEAP__FILENAME__ (strrchr(__FILE__, '/') ? strrchr(__FILE__, '/') + 1 : strrchr(__FILE__, '\\') ? strrchr(__FILE__, '\\') + 1 : __FILE__)\n#endif\n\n#ifdef __cplusplus\n#define GFL_NEW(heapId) new((heapId), GFL_HEAP__FILENAME__, __LINE__)\n#define GFL_DEL(p) GFL_HeapFree(p);\n#define GFL_DESTROY_AND_DEL(dtorType, p) p->~dtorType(); GFL_HeapFree(p);\n#else\n#define GFL_NEW(heapId, type) (type*) GFL_HeapAllocate((heapId), sizeof(type), 0, GFL_HEAP__FILENAME__, __LINE__)\n#define GFL_NEW_ARRAY(heapId, type, count) (type*) GFL_HeapAllocate((heapId), sizeof(type) * (count), 0, GFL_HEAP__FILENAME__, __LINE__)\n#endif\n\n#define GFL_MALLOC(heapId, size) GFL_HeapAllocate((heapId), (size), 0, GFL_HEAP__FILENAME__, __LINE__)\n#define GFL_CALLOC(heapId, size) GFL_HeapAllocate((heapId), (size), 1, GFL_HEAP__FILENAME__, __LINE__)\n#define GFL_FREE(ptr) GFL_HeapFree((ptr))"
  - Path: gfl/core/gfl_overlay.h
    Includes:
      - gfl/core/gfl_heap.h
    Typedefs:
    GVars:
      - Content: "OvlManager* g_OvlManager;\n"
    Functions:
      - Content: void GFL_OvlManagerInit(HeapID heapId, u32 wramOvlMax, u32 itcmOvlMax, u32 dtcmOvlMax)
      - Content: b32 GFL_OvlCheckMemoryCollision(u32 ovlId)
      - Content: b32 GFL_OvlLoad(u32 ovlId)
      - Content: void GFL_OvlUnload(u32 ovlId)
      - Content: void GFL_OvlEntryUnload(OvlListEntry *ovlEntry)
      - Content: OvlRegion GFL_OvlGetMemoryRegion(u32 ovlId)
      - Content: b32 GFL_OvlGetMemoryRange(u32 ovlId, u32 *overlayAddress, u32 *overlayEnd)
      - Content: OvlListEntry* GFL_OvlGetList(OvlRegion region)
      - Content: u8 GFL_OvlGetListCount(OvlRegion region)
    Enums:
      - Definition:
          CPPName: "gfl::ovl::Region"
          Content: "enum OvlRegion\n{\n  OVLRGN_EWRAM,\n  OVLRGN_ITCM,\n  OVLRGN_DTCM\n};"
        DefineFlagOps: false
    Structures:
      - Definition:
          CPPName: "gfl::ovl::Handle"
          Content: "struct OvlListEntry\n{\n  u32 OvlID;\n  b32 Exists;\n};"
        Methods:
          - CPPName: Unload
            CName: GFL_OvlEntryUnload
            IsStatic: false
      - Definition:
          CPPName: "gfl::ovl::Manager"
          Content: "struct OvlManager\n{\n  u8 OvlMaxWRAM;\n  u8 OvlMaxITCM;\n  u8 OvlMaxDTCM;\n  u8 _padOvlMax;\n  OvlListEntry *OverlaysWRAM;\n  OvlListEntry *OverlaysITCM;\n  OvlListEntry *OverlaysDTCM;\n  OvlListEntry OvlList[];\n};"
        Methods:
          - CPPName: Init
            CName: GFL_OvlManagerInit
            IsStatic: true
          - CPPName: GetMemoryRegion
            CName: GFL_OvlGetMemoryRegion
            IsStatic: true
          - CPPName: GetMemoryRange
            CName: GFL_OvlGetMemoryRange
            IsStatic: true
          - CPPName: GetOvlCount
            CName: GFL_OvlGetListCount
            IsStatic: true
          - CPPName: GetOvlList
            CName: GFL_OvlGetList
            IsStatic: true
          - CPPName: CheckMemoryCollision
            CName: GFL_OvlCheckMemoryCollision
            IsStatic: true
          - CPPName: Load
            CName: GFL_OvlLoad
            IsStatic: true
          - CPPName: Unload
            CName: GFL_OvlUnload
            IsStatic: true
  - Path: gfl/core/gfl_proc_helper.h
    Includes:
      - gfl/core/gfl_procsys.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
    Macros: "#define MAKE_PROC_VTBL(initFunc, updateFunc, endFunc) {\\n	(GameProcFunc) initFunc,\\n	(GameProcFunc) updateFunc,\\n	(GameProcFunc) endFunc\\n};"
  - Path: gfl/core/gfl_procsys.h
    Includes:
      - gfl/core/gfl_heap.h
    Typedefs:
      - CPPName: "gfl::core::ProcFunc"
        Content: "typedef b32 (__fastcall *GameProcFunc)(GameProc *, u32 *, void *, void *);\n"
    GVars:
    Functions:
      - Content: GameProcManager* GFL_ProcMgrCreate(HeapID heapId)
      - Content: void GFL_ProcMgrFree(GameProcManager *mgr)
      - Content: GameProcManagerStatus GFL_ProcMgrUpdate(GameProcManager *mgr)
      - Content: void GFL_ProcMgrSwitchQueued(GameProcManager *mgr)
      - Content: void GFL_ProcMgrReplaceProc(GameProcManager *mgr, int ovlId, const GameProcFunctions *vtbl, void* procData)
      - Content: void GFL_ProcMgrQueueProc(GameProcManager *mgr, int ovlId, const GameProcFunctions *vtbl, void *procData)
      - Content: GameProc* GFL_ProcCreate(int ovlId, const GameProcFunctions *vtbl, void *processData, HeapID heapId)
      - Content: void GFL_ProcFree(void *heap)
      - Content: b32 GFL_ProcUpdate(GameProc *proc)
      - Content: void* GFL_ProcInitSubsystem(GameProc *proc, u32 size, HeapID heapId)
      - Content: void GFL_ProcReleaseSubsystem(GameProc *proc)
    Enums:
      - Definition:
          CPPName: "gfl::core::ProcStatus"
          Content: "enum GameProcStatus\n{\n  LOAD = 0x0,\n  INIT = 0x1,\n  RUN = 0x2,\n  END = 0x3,\n};"
        DefineFlagOps: false
      - Definition:
          CPPName: "gfl::core::ProcManagerStatus"
          Content: "enum GameProcManagerStatus\n{\n  GAMEPROC_MGR_IDLE = 0x0,\n  GAMEPROC_MGR_RUNNING = 0x1,\n  GAMEPROC_MGR_SWITCHING = 0x2,\n};"
        DefineFlagOps: false
    Structures:
      - Definition:
          CPPName: "gfl::core::ProcVTable"
          Content: "struct GameProcFunctions\n{\n  GameProcFunc Init;\n  GameProcFunc MainLoop;\n  GameProcFunc End;\n};\n"
        Methods:
      - Definition:
          CPPName: "gfl::core::ProcRequest"
          Content: "struct GameProcRequest\n{\n  int OvlID;\n  const GameProcFunctions *Functions;\n  void* ProcessData;\n};\n"
        Methods:
      - Definition:
          CPPName: "gfl::core::Proc"
          Content: "struct GameProc\n{\n  const GameProcFunctions *Functions;\n  int OverlayID;\n  GameProcStatus ProcessStatus;\n  int EventState;\n  void *ProcessData;\n  void *ProcessSubsystem;\n  GameProc *ReturnProcess;\n  GameProc *NextProcess;\n};"
        Methods:
          - CPPName: Create
            CName: GFL_ProcCreate
            IsStatic: true
          - CPPName: Free
            CName: GFL_ProcFree
            IsStatic: false
          - CPPName: Update
            CName: GFL_ProcUpdate
            IsStatic: false
          - CPPName: InitSubsystem
            CName: GFL_ProcInitSubsystem
            IsStatic: false
          - CPPName: ReleaseSubsystem
            CName: GFL_ProcReleaseSubsystem
            IsStatic: false
      - Definition:
          CPPName: "gfl::core::ProcManager"
          Content: "struct GameProcManager\n{\n  HeapID m_HeapID;\n  s16 _padHeapID;\n  int field_4;\n  GameProc *CurrentProc;\n  b32 IsReqQueueProc;\n  b32 IsReqReplaceProc;\n  GameProcRequest ProcRequest;\n};"
        Methods:
          - CPPName: Create
            CName: GFL_ProcMgrCreate
            IsStatic: true
          - CPPName: Free
            CName: GFL_ProcMgrFree
            IsStatic: false
          - CPPName: Update
            CName: GFL_ProcMgrUpdate
            IsStatic: false
          - CPPName: ReplaceProc
            CName: GFL_ProcMgrReplaceProc
            IsStatic: false
          - CPPName: QueueProc
            CName: GFL_ProcMgrQueueProc
            IsStatic: false
  - Path: gfl/core/gfl_random.h
    Includes:
    Typedefs:
    GVars:
    Functions:
      - Content: void GFL_RandomInit()
      - Content: void GFL_RandomInitLC(RandSet *random)
      - Content: void GFL_RandomUpdateMT(u32 seed)
      - Content: u32 GFL_RandomLC(u32 max)
      - Content: u32 GFL_RandomLCAlt(u32 max)
      - Content: u32 GFL_RandomMT()
    Enums:
    Structures:
      - Definition:
          CPPName: "gfl::core::RandSet"
          Content: "struct RandSet\n{\n  u64 seed;\n  u64 mul;\n  u64 add;\n};"
        Methods:
      - Definition:
          Content: "struct gfl::core::Random {\n};"
        Methods:
          - CPPName: Init
            CName: GFL_RandomInit
            IsStatic: true
          - CPPName: InitLC
            CName: GFL_RandomInitLC
            IsStatic: true
          - CPPName: UpdateMT
            CName: GFL_RandomUpdateMT
            IsStatic: true
          - CPPName: GetLC
            CName: GFL_RandomLC
            IsStatic: true
          - CPPName: GetLCAlt
            CName: GFL_RandomLCAlt
            IsStatic: true
          - CPPName: GetMT
            CName: GFL_RandomMT
            IsStatic: true
  - Path: gfl/core/gfl_tcb.h
    Includes:
    Typedefs:
      - Content: "typedef void (*TCBFunc)(TCB *tcb, void *data);\n"
    GVars:
    Functions:
      - Content: u32 GFL_TCBMgrCalcAllocSize(u32 tcbLimit)
      - Content: TCBManager* GFL_TCBMgrCreate(u32 taskCount, void *alloc)
      - Content: void GFL_TCBMgrSetup(TCBManager *mgr)
      - Content: void GFL_TCBMgrUpdate(TCBManager *mgr)
      - Content: TCB* GFL_TCBMgrAddTask(TCBManager *mgr, TCBFunc callbackFunc, void *data, u32 priority)
      - Content: TCB* GFL_TCBMgrAddTaskCore(TCBManager *mgr, TCBFunc callbackFunc, void *data, u32 priority)
      - Content: b32 GFL_TCBRemove(TCB *tcb)
      - Content: void* GFL_TCBGetData(TCB *tcb)
      - Content: void GFL_TCBSetCallbackFunc(TCB *tcb, TCBFunc func)
    Enums:
    Structures:
      - Definition:
          CPPName: "gfl::core::TCB"
          Content: "struct TCB\n{\n  TCBManager *Manager;\n  TCB *PrevTCB;\n  TCB *NextTCB;\n  u32 Priority;\n  void *Data;\n  TCBFunc CallbackFunc;\n  b32 WaitPriorityResync;\n};"
        Methods:
          - CPPName: Remove
            CName: GFL_TCBRemove
            IsStatic: false
          - CPPName: GetData
            CName: GFL_TCBGetData
            IsStatic: false
          - CPPName: SetCallbackFunc
            CName: GFL_TCBSetCallbackFunc
            IsStatic: false
      - Definition:
          CPPName: "gfl::core::TCBManager"
          Content: "struct TCBManager\n{\n  u32 MaxTCBCount;\n  u32 NowTCBCount;\n  TCB TCBTail;\n  TCB **TCBPtrs;\n  TCB *TCBs;\n  b32 IsAddingTCB;\n  TCB *NowExecTCB;\n  TCB *NextExecTCB;\n};"
        Methods:
          - CPPName: CalcAllocSize
            CName: GFL_TCBMgrCalcAllocSize
            IsStatic: true
          - CPPName: Create
            CName: GFL_TCBMgrCreate
            IsStatic: true
          - CPPName: Setup
            CName: GFL_TCBMgrSetup
            IsStatic: false
          - CPPName: Update
            CName: GFL_TCBMgrUpdate
            IsStatic: false
          - CPPName: AddTask
            CName: GFL_TCBMgrAddTask
            IsStatic: false
  - Path: gfl/core/gfl_vrammgr.h
    Includes:
      - gfl/core/gfl_areaman.h
      - nds/gx.h
    Typedefs:
    GVars:
    Functions:
      - Content: VRAMManager *__fastcall GFL_VRAMManagerCreate(HeapID heapId, b32 blockSizeEx, VRAMBankMask banks, u32 offset, u32 mappingDispCntBits)
      - Content: void __fastcall GFL_VRAMManagerFree(VRAMManager *vman)
      - Content: u32 __fastcall GFL_VRAMManagerCalcBankSizeBytes(VRAMBankMask banks)
      - Content: u32 __fastcall GFL_VRAMManagerGetObjTileMappingBoundary(u32 dispcntBits)
      - Content: void __fastcall GFL_VRAMManagerAllocInit(VRAMManagerAllocation *allocation)
      - Content: b32 __fastcall GFL_VRAMManagerAllocIsInvalid(VRAMManagerAllocation *allocation)
      - Content: b32 __fastcall GFL_VRAMManagerAlloc(VRAMManager *vman, u32 size, VRAMManagerAllocation *alloc)
      - Content: void __fastcall GFL_VRAMManagerDeAlloc(VRAMManager *vman, VRAMManagerAllocation *alloc)
      - Content: void *__fastcall GFL_VRAMManagerGetAllocAddress(VRAMManager *vman, VRAMManagerAllocation *allocation)
    Enums:
    Structures:
      - Definition:
          CPPName: "gfl::core::VRAMManager"
          Content: "struct VRAMManager\n{\n  AreaMan *m_AreaMan;\n  u16 Boundary;\n  u16 RealAddrOffset;\n};\n"
        Methods:
          - CPPName: Create
            CName: GFL_VRAMManagerCreate
            IsStatic: true
          - CPPName: Free
            CName: GFL_VRAMManagerFree
            IsStatic: false
          - CPPName: Alloc
            CName: GFL_VRAMManagerAlloc
            IsStatic: false
          - CPPName: DeAlloc
            CName: GFL_VRAMManagerDeAlloc
            IsStatic: false
          - CPPName: GetAllocAddress
            CName: GFL_VRAMManagerGetAllocAddress
            IsStatic: false
          - CPPName: GetObjTileMappingBoundary
            CName: GFL_VRAMManagerGetObjTileMappingBoundary
            IsStatic: true
          - CPPName: CalcBankSizeBytes
            CName: GFL_VRAMManagerCalcBankSizeBytes
            IsStatic: true
      - Definition:
          CPPName: "gfl::core::VRAMAllocation"
          Content: "struct VRAMManagerAllocation\n{\n  u32 Addr;\n  u32 Size;\n};\n"
        Methods:
          - CPPName: Init
            CName: GFL_VRAMManagerAllocInit
            IsStatic: false
          - CPPName: IsInvalid
            CName: GFL_VRAMManagerAllocIsInvalid
            IsStatic: false
  - Path: gfl/fs/gfl_archive.h
    Includes:
      - nds/fs.h
      - gfl/core/gfl_heap.h
    Typedefs:
    GVars:
    Functions:
      - Content: void GFL_ArcSysInit(const char **pathList, int arcCount)
      - Content: const char* GFL_ArcSysGetResourcePath(int arcId)
      - Content: void GFL_ArcSysLoadFile(ArcTool *arctool, int arcId)
      - Content: void GFL_ArcSysCreateRawHandle(ArcTool *arc, int arcId)
      - Content: ArcTool* GFL_ArcSysCreateFileHandle(int arcId, HeapID heapId)
      - Content: ArcTool* GFL_ArcSysCreateMemoryHandle(u32 offset, u32 size, HeapID heapId)
      - Content: u16 GFL_ArcSysGetDataMax(int arcId)
      - Content: u32 GFL_ArcSysGetDataLength(int arcId, u16 datId)
      - Content: void* GFL_ArcSysReadRawResource(int arcId, HeapID heapId, int seekOffset, int readLength)
      - Content: void* GFL_ArcSysReadHeapNew(int arcId, u16 datId, HeapID heapId)
      - Content: void* GFL_ArcSysReadHeapNewDirect(const char *path, u16 datId, HeapID heapId)
      - Content: void* GFL_ArcSysReadHeapNewRange(int arcId, u16 datId, HeapID heapId, int offset, int length)
      - Content: void* GFL_ArcSysReadHeapNewLZ(int arcId, u16 datId, b32 compressed, HeapID heapId)
      - Content: void* GFL_ArcSysReadHeapNewLZGetLen(int arcId, u16 datId, b32 compressed, HeapID heapId, u32 *fileLength)
      - Content: void* GFL_ArcSysReadHeapNewImpl(int arcId, u16 datId, HeapID heapId, int offset, int length)
      - Content: void GFL_ArcSysRead(void *dest, int arcId, u16 datId)
      - Content: void GFL_ArcSysReadRange(void *dest, int arcId, u16 datId, int offset, int length)
      - Content: void GFL_ArcSysReadImpl(void *dest, int arcId, u16 datId, int offset, int length)
      - Content: void GFL_ArcToolInit(ArcTool *arc)
      - Content: b32 GFL_ArcToolSeek(ArcTool *arc, u32 offset)
      - Content: u32 GFL_ArcToolReadRaw(ArcTool *arc, s32 length, void *dest)
      - Content: u16 GFL_ArcToolGetDataMax(ArcTool *arc)
      - Content: u32 GFL_ArcToolGetDataLength(ArcTool *arcId, u16 datId)
      - Content: b32 GFL_ArcToolReadRange(ArcTool *arc, u16 datId, u32 offset, u32 length, void *dest)
      - Content: void GFL_ArcToolRead(ArcTool *arc, u16 datId, void *dest)
      - Content: void* GFL_ArcToolReadHeapNew(ArcTool *arc, u16 datId, HeapID heapId)
      - Content: void* GFL_ArcToolReadHeapNewLZ(ArcTool *arc, u16 datId, b32 compressed, HeapID heapId)
      - Content: void* GFL_ArcToolReadHeapNewLZGetLen(ArcTool *arc, u16 datId, b32 compressed, HeapID heapId, u32 *fileLength)
      - Content: void GFL_ArcToolFree(ArcTool *arc)
    Enums:
    Structures:
      - Definition:
          CPPName: "gfl::fs::Archive"
          Content: "struct ArcTool\n{\n  FSFile File;\n  u32 FIMGOffset;\n  u16 NARCHeaderSize;\n  u16 NARCFileCount;\n};"
        Methods:
          - CPPName: Open
            CName: GFL_ArcSysCreateFileHandle
            IsStatic: true
          - CPPName: OpenExt
            CName: GFL_ArcSysCreateMemoryHandle
            IsStatic: true
          - CPPName: OpenRaw
            CName: GFL_ArcSysCreateRawHandle
            IsStatic: false
          - CPPName: Seek
            CName: GFL_ArcToolSeek
            IsStatic: false
          - CPPName: ReadRaw
            CName: GFL_ArcToolReadRaw
            IsStatic: false
          - CPPName: GetDataMax
            CName: GFL_ArcToolGetDataMax
            IsStatic: false
          - CPPName: GetDataLength
            CName: GFL_ArcToolGetDataLength
            IsStatic: false
          - CPPName: Read
            CName: GFL_ArcToolRead
            IsStatic: false
          - CPPName: ReadRange
            CName: GFL_ArcToolReadRange
            IsStatic: false
          - CPPName: ReadHeapNew
            CName: GFL_ArcToolReadHeapNew
            IsStatic: false
          - CPPName: ReadHeapNewLZ
            CName: GFL_ArcToolReadHeapNewLZ
            IsStatic: false
          - CPPName: ReadHeapNewLZ
            CName: GFL_ArcToolReadHeapNewLZGetLen
            IsStatic: false
          - CPPName: Free
            CName: GFL_ArcToolFree
            IsStatic: false
      - Definition:
          Content: "struct gfl::fs::ArcSystem {\n};"
        Methods:
          - CPPName: Init
            CName: GFL_ArcSysInit
            IsStatic: true
          - CPPName: GetResourcePath
            CName: GFL_ArcSysGetResourcePath
            IsStatic: true
          - CPPName: LoadFile
            CName: GFL_ArcSysLoadFile
            IsStatic: true
          - CPPName: GetDataMax
            CName: GFL_ArcSysGetDataMax
            IsStatic: true
          - CPPName: GetDataLength
            CName: GFL_ArcSysGetDataLength
            IsStatic: true
          - CPPName: ReadRawResource
            CName: GFL_ArcSysReadRawResource
            IsStatic: true
          - CPPName: ReadHeapNew
            CName: GFL_ArcSysReadHeapNew
            IsStatic: true
          - CPPName: ReadHeapNewDirect
            CName: GFL_ArcSysReadHeapNewDirect
            IsStatic: true
          - CPPName: ReadHeapNewRange
            CName: GFL_ArcSysReadHeapNewRange
            IsStatic: true
          - CPPName: ReadHeapNewLZ
            CName: GFL_ArcSysReadHeapNewLZ
            IsStatic: true
          - CPPName: ReadHeapNewLZ
            CName: GFL_ArcSysReadHeapNewLZGetLen
            IsStatic: true
          - CPPName: Read
            CName: GFL_ArcSysRead
            IsStatic: true
          - CPPName: ReadRange
            CName: GFL_ArcSysReadRange
            IsStatic: true
  - Path: gfl/fs/gfl_container.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          CPPName: "gfl::fs::Container"
          Content: "struct GFContainer\n{\n  u16 Signature;\n  u16 FileCount;\n  u32 FileOffsets[];\n};\n"
        Methods:
  - Path: gfl/g2d/gfl_bg_sys.h
    Includes:
      - gfl/core/gfl_heap.h
      - gfl/core/gfl_areaman.h
      - math/fixed.h
      - math/angle.h
      - nds/gx.h
    Typedefs:
    GVars:
    Functions:
      - Content: void __fastcall GFL_BGSysCreate(HeapID heapId)
      - Content: void __fastcall GFL_BGSysFree()
      - Content: u32 __fastcall GFL_BGSysAllocChar(G2DBG bg, size_t size, b32 tail)
      - Content: b32 __fastcall GFL_BGSysAllocCharAt(G2DBG bg, u32 offset, size_t size)
      - Content: void __fastcall GFL_BGSysFreeCharMemory(G2DBG bg, u32 offset, size_t size)
      - Content: void __fastcall GFL_BGSysSetLCDConfig(const BGSysLCDConfig *cfg)
      - Content: void __fastcall GFL_BGSysSetLCDConfigForEngine(const BGSysLCDConfig *config, G2DEngine engine)
      - Content: u32 __fastcall GFL_BGSysCreateBG(G2DBG bg, BGSetup *setup, BGOperationMode mode)
      - Content: void __fastcall GFL_BGSysReleaseBG(G2DBG bg)
      - Content: void __fastcall GFL_BGSysSet3DBGPriority(u16 priority)
      - Content: void __fastcall GFL_BGSysSetBGPriority(G2DBG bg, u16 priority)
      - Content: void __fastcall GFL_BGSysSetBGEnabled(G2DBG bg, b32 enable)
      - Content: void __fastcall GFL_BGSysMoveBG(G2DBG bg, BGMoveType type, u32 value)
      - Content: int __fastcall GFL_BGSysGetBGOffsetX(G2DBG bg)
      - Content: u32 __fastcall GFL_BGSysGetBGOffsetY(G2DBG bg)
      - Content: void __fastcall GFL_BGSysSetBGTransformEx(G2DBG bg, BGMoveType type, u32 value, Mat2 *matrix, int originX, int originY)
      - Content: void __fastcall GFL_BGSysSetBGTransform(G2DBG bg, Mat2 *matrix, int originX, int originY)
      - Content: void __fastcall GFL_BGSysTransferUncomp(void *src, void *dest, u32 size)
      - Content: void __fastcall GFL_BGSysLoadScr(G2DBG bg)
      - Content: void __fastcall GFL_BGSysLoadScrCore(G2DBG bg, void *src, size_t size, u32 offset)
      - Content: void __fastcall GFL_BGSysBufferScrDefault(G2DBG bg, void *data, size_t size)
      - Content: void __fastcall GFL_BGSysBufferScr(G2DBG bg, void *data, size_t size, u32 destOffset)
      - Content: void __fastcall GFL_BGSysLoadChar(G2DBG bg, void *data, size_t size, u32 offset)
      - Content: u32 __fastcall GFL_BGSysLoadCharDynamic(G2DBG bg, void *data, size_t size)
      - Content: void __fastcall GFL_BGSysClearCharCore(G2DBG bg, size_t size, u32 offset, HeapID heapId)
      - Content: void __fastcall GFL_BGSysFillChar(G2DBG bg, u32 fillIndex, u32 tileCount, u32 offset)
      - Content: void __fastcall GFL_BGSysFreeFilledChar(G2DBG bg, u32 sizeTiles, u32 offset)
      - Content: void __fastcall GFL_BGSysUploadStdPalette(G2DBG bg, void *palette, size_t paletteSize, u32 destOffset)
      - Content: void __fastcall GFL_BGSysResetStdPalette(G2DBG bg)
      - Content: u32 __fastcall GFL_BGSysConvCoordsToTileIndex(u32 x, u32 y, BGResolution res)
      - Content: u32 __fastcall GFL_BGSysConvCoordsToTileIndexEx(u32 x, u32 y, u32 width, u32 height)
      - Content: void __fastcall GFL_BGSysLoadScrAreaAll(G2DBG bg, u16 *src, u8 dstX, u8 dstY, u8 width, u8 height)
      - Content: void __fastcall GFL_BGSysLoadScrArea(G2DBG bg, u8 dstX, u8 dstY, u8 width, u8 height, u16 *src, u8 srcX, u8 srcY, u8 srcWidth, u8 srcHeight)
      - Content: void __fastcall GFL_BGSysLoadScrAreaLarge(G2DBG bg, u8 dstX, u8 dstY, u8 width, u8 height, u16 *src, u8 srcX, u8 srcY, u8 srcWidth, u8 srcHeight)
      - Content: void __fastcall GFL_BGSysFillScrArea(G2DBG bg, u16 tile, u32 startX, u32 startY, u8 width, u8 height, u8 palette)
      - Content: void __fastcall GFL_BGSysSetScrPaletteNo(G2DBG bg, u32 startX, u32 startY, u32 width, u32 height, u8 paletteNumber)
      - Content: void __fastcall GFL_BGSysClearBG(G2DBG bg)
      - Content: void __fastcall GFL_BGSysClearChar(G2DBG bg)
      - Content: void __fastcall GFL_BGSysClearScr(G2DBG bg)
      - Content: void __fastcall GFL_BGSysFillScr(G2DBG bg, u16 map)
      - Content: void __fastcall GFL_BGSysFillScrAsync(G2DBG bg, u16 map)
      - Content: void *__fastcall GFL_BGSysGetBGCharAddress(G2DBG bg)
      - Content: void *__fastcall GFL_BGSysIsScrHeapExists(G2DBG bg)
      - Content: u32 __fastcall GFL_BGSysGetBGOffsetX2(G2DBG bg)
      - Content: u32 __fastcall GFL_BGSysGetBGOffsetY2(G2DBG bg)
      - Content: BGOperationMode __fastcall GFL_BGSysGetBGMode(G2DBG bg)
      - Content: G2DColorPaletteMode __fastcall GFL_BGSysGetBGColorPaletteMode(G2DBG bg)
      - Content: u32 __fastcall GFL_BGSysGetBGBytesPerTile(G2DBG bg)
      - Content: u32 __fastcall GFL_BGSysGetBGPriority(G2DBG bg)
      - Content: void __fastcall GFL_BGSysUpdate()
      - Content: void __fastcall GFL_BGSysLoadQueuedScreens()
      - Content: void __fastcall GFL_BGSysQueueScrLoad(G2DBG bg)
      - Content: void __fastcall GFL_BGSysFlushTransform()
      - Content: void __fastcall GFL_BGSysMoveBGReq(G2DBG bg, BGMoveType type, u32 value)
      - Content: void __fastcall GFL_BGSysRotateBGReq(G2DBG bgIndex, BGTransformCommand type, s16 value)
      - Content: void __fastcall GFL_BGSysScaleBGReq(G2DBG bg, BGTransformCommand type, s32 value)
      - Content: void __fastcall GFL_BGSysAdjustBGOriginReq(G2DBG bg, BGTransformCommand type, s32 value)
      - Content: G2DBGScreenSize __fastcall GFL_BGSysCalcScreenSizeMode(BGResolution res, BGOperationMode mode)
      - Content: void __fastcall GFL_BGSysGetTileDimensions(BGResolution res, u8 *pTileWidth, u8 *pTileHeight)
      - Content: void __fastcall GFL_BGSysAdjustBGMoveCoord(BGHandler *bg, BGMoveType type, u32 value)
      - Content: void __fastcall GFL_BGSysSetBGTransformIdentity(G2DBG bg)
      - Content: void __fastcall GFL_BGSysUploadScr(G2DBG bg, void *data, u32 offset, size_t size)
      - Content: void __fastcall GFL_BGSysLoadCharCore(G2DBG bg, void *data, size_t size, u32 offset)
      - Content: void __fastcall GFL_BGSysUploadChar(G2DBG bg, void *data, u32 offset, size_t size)
      - Content: u32 __fastcall GFL_BGSysAllocScreen(G2DBG bg, u32 offset, size_t size)
      - Content: void __fastcall GFL_BGSysFreeScreenMemory(G2DBG bg, u32 offset, size_t size)
      - Content: BGHandler *__fastcall GFL_BGSysAdjustBGRotateCoord(BGHandler *bg, BGTransformCommand type, s16 value)
      - Content: void __fastcall GFL_BGSysAdjustBGScaleCoord(BGHandler *bg, BGTransformCommand type, s32 value)
      - Content: void __fastcall GFL_BGSysAdjustBGOriginCoord(BGHandler *bg, BGTransformCommand type, s32 value)
      - Content: void __fastcall GFL_BGSysInitVRAM(VRAMBankMask banks)
      - Content: void __fastcall GFL_BGSysSetVRAMBanks(const BGSysVRAMConfig *banks)
      - Content: void __fastcall GFL_BGSysDisableOBJA()
      - Content: void __fastcall GFL_BGSysDisableBGsA()
      - Content: void __fastcall GFL_BGSysDisableAllA()
      - Content: void __fastcall GFL_BGSysSetBGEnabledA(G2DScreenBGBit mask, b32 enable)
      - Content: void __fastcall GFL_BGSysSetEnabledBGsA(G2DScreenBGBit display)
      - Content: void __fastcall GFL_BGSysDisableBGsB()
      - Content: void __fastcall GFL_BGSysDisableOBJB()
      - Content: void __fastcall GFL_BGSysDisableAllB()
      - Content: void __fastcall GFL_BGSysSetBGEnabledB(G2DScreenBGBit display, bool enable)
      - Content: void __fastcall GFL_BGSysSetEnabledBGsB(G2DScreenBGBit display)
      - Content: void __fastcall GFL_BGSysEnableEngines()
      - Content: void __fastcall GFL_BGSysSetDisplayLayout(G2DDisplayLayout layout)
      - Content: G2DScreenBGBit __fastcall GFL_BGSysGetEnabledBGsA()
      - Content: G2DScreenBGBit __fastcall GFL_BGSysGetEnabledBGsB()
    Enums:
      - Definition:
          Content: "enum BGResolution\n{\n  BGRES_128x128 = 0x0,\n  BGRES_256x256 = 0x1,\n  BGRES_256x512 = 0x2,\n  BGRES_512x256 = 0x3,\n  BGRES_512x512 = 0x4,\n  BGRES_1024x1024 = 0x5,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum BGOperationMode\n{\n  BGMODE_TEXT = 0x0,\n  BGMODE_AFFINE = 0x1,\n  BGMODE_EXTENDED = 0x2,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum BGMoveType\n{\n  BG_MOVE_SET_X = 0x0,\n  BG_MOVE_RIGHT = 0x1,\n  BG_MOVE_LEFT = 0x2,\n  BG_MOVE_SET_Y = 0x3,\n  BG_MOVE_DOWN = 0x4,\n  BG_MOVE_UP = 0x5,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum BGTransformCommand\n{\n  BG_ROTATE_SET = 0x0,\n  BG_ROTATE_RIGHT = 0x1,\n  BG_ROTATE_LEFT = 0x2,\n  BG_SCALE_SET_X = 0x3,\n  BG_SCALE_UP_X = 0x4,\n  BG_SCALE_DOWN_X = 0x5,\n  BG_SCALE_SET_Y = 0x6,\n  BG_SCALE_UP_Y = 0x7,\n  BG_SCALE_DOWN_Y = 0x8,\n  BG_ORIGIN_SET_X = 0x9,\n  BG_ORIGIN_INC_X = 0xA,\n  BG_ORIGIN_DEC_X = 0xB,\n  BG_ORIGIN_SET_Y = 0xC,\n  BG_ORIGIN_INC_Y = 0xD,\n  BG_ORIGIN_DEC_Y = 0xE,\n};\n"
        DefineFlagOps: false
    Structures:
      - Definition:
          Content: "struct BGHandler\n{\n  void *ScreenData;\n  u32 ScreenDataSize;\n  u32 ScreenOffset;\n  u32 OffsetX;\n  u32 OffsetY;\n  u8 BGMode;\n  u8 Resolution;\n  u8 ColorPaletteMode;\n  u8 BytesPerTile;\n  fxangle Rotation;\n  u16 _padRotation;\n  fx32 ScaleX;\n  fx32 ScaleY;\n  u32 OriginX;\n  u32 OriginY;\n};\n"
        Methods:
      - Definition:
          Content: "struct BGSys\n{\n  HeapID m_HeapID;\n  u16 _padHeapID;\n  u16 TransformDirtyFlags;\n  u16 ReqLoadScreens;\n  BGHandler BGs[8];\n  AreaMan *EngineAArea;\n  AreaMan *EngineBArea;\n  u32 CharBases[8];\n  u32 ScreenBases[8];\n  u32 CharSizes[8];\n};\n"
        Methods:
          - CPPName: Create
            CName: GFL_BGSysCreate
            IsStatic: true
          - CPPName: Free
            CName: GFL_BGSysFree
            IsStatic: true
          - CPPName: AllocChar
            CName: GFL_BGSysAllocChar
            IsStatic: true
          - CPPName: AllocCharAt
            CName: GFL_BGSysAllocCharAt
            IsStatic: true
          - CPPName: FreeCharMemory
            CName: GFL_BGSysFreeCharMemory
            IsStatic: true
          - CPPName: CreateBG
            CName: GFL_BGSysCreateBG
            IsStatic: true
          - CPPName: ReleaseBG
            CName: GFL_BGSysReleaseBG
            IsStatic: true
          - CPPName: MoveBG
            CName: GFL_BGSysMoveBG
            IsStatic: true
          - CPPName: GetBGOffsetX
            CName: GFL_BGSysGetBGOffsetX
            IsStatic: true
          - CPPName: GetBGOffsetY
            CName: GFL_BGSysGetBGOffsetY
            IsStatic: true
          - CPPName: SetBGTransform
            CName: GFL_BGSysSetBGTransform
            IsStatic: true
          - CPPName: SetBGTransformEx
            CName: GFL_BGSysSetBGTransformEx
            IsStatic: true
          - CPPName: TransferUncomp
            CName: GFL_BGSysTransferUncomp
            IsStatic: true
          - CPPName: LoadScr
            CName: GFL_BGSysLoadScr
            IsStatic: true
          - CPPName: LoadScrCore
            CName: GFL_BGSysLoadScrCore
            IsStatic: true
          - CPPName: BufferScrDefault
            CName: GFL_BGSysBufferScrDefault
            IsStatic: true
          - CPPName: BufferScr
            CName: GFL_BGSysBufferScr
            IsStatic: true
          - CPPName: LoadChar
            CName: GFL_BGSysLoadChar
            IsStatic: true
          - CPPName: LoadCharDynamic
            CName: GFL_BGSysLoadCharDynamic
            IsStatic: true
          - CPPName: ClearCharCore
            CName: GFL_BGSysClearCharCore
            IsStatic: true
          - CPPName: FillChar
            CName: GFL_BGSysFillChar
            IsStatic: true
          - CPPName: FreeFilledChar
            CName: GFL_BGSysFreeFilledChar
            IsStatic: true
          - CPPName: ConvCoordsToTileIndex
            CName: GFL_BGSysConvCoordsToTileIndex
            IsStatic: true
          - CPPName: ConvCoordsToTileIndexEx
            CName: GFL_BGSysConvCoordsToTileIndexEx
            IsStatic: true
          - CPPName: LoadScrAreaAll
            CName: GFL_BGSysLoadScrAreaAll
            IsStatic: true
          - CPPName: LoadScrArea
            CName: GFL_BGSysLoadScrArea
            IsStatic: true
          - CPPName: LoadScrAreaLarge
            CName: GFL_BGSysLoadScrAreaLarge
            IsStatic: true
          - CPPName: FillScrArea
            CName: GFL_BGSysFillScrArea
            IsStatic: true
          - CPPName: SetScrPaletteNo
            CName: GFL_BGSysSetScrPaletteNo
            IsStatic: true
          - CPPName: ClearBG
            CName: GFL_BGSysClearBG
            IsStatic: true
          - CPPName: ClearChar
            CName: GFL_BGSysClearChar
            IsStatic: true
          - CPPName: ClearScr
            CName: GFL_BGSysClearScr
            IsStatic: true
          - CPPName: FillScr
            CName: GFL_BGSysFillScr
            IsStatic: true
          - CPPName: FillScrAsync
            CName: GFL_BGSysFillScrAsync
            IsStatic: true
          - CPPName: IsScrHeapExists
            CName: GFL_BGSysIsScrHeapExists
            IsStatic: true
          - CPPName: GetBGMode
            CName: GFL_BGSysGetBGMode
            IsStatic: true
          - CPPName: GetBGColorPaletteMode
            CName: GFL_BGSysGetBGColorPaletteMode
            IsStatic: true
          - CPPName: GetBGBytesPerTile
            CName: GFL_BGSysGetBGBytesPerTile
            IsStatic: true
          - CPPName: GetBGPriority
            CName: GFL_BGSysGetBGPriority
            IsStatic: true
          - CPPName: Update
            CName: GFL_BGSysUpdate
            IsStatic: true
          - CPPName: LoadQueuedScreens
            CName: GFL_BGSysLoadQueuedScreens
            IsStatic: true
          - CPPName: QueueScrLoad
            CName: GFL_BGSysQueueScrLoad
            IsStatic: true
          - CPPName: FlushTransform
            CName: GFL_BGSysFlushTransform
            IsStatic: true
          - CPPName: MoveBGReq
            CName: GFL_BGSysMoveBGReq
            IsStatic: true
          - CPPName: RotateBGReq
            CName: GFL_BGSysRotateBGReq
            IsStatic: true
          - CPPName: ScaleBGReq
            CName: GFL_BGSysScaleBGReq
            IsStatic: true
          - CPPName: AdjustBGOriginReq
            CName: GFL_BGSysAdjustBGOriginReq
            IsStatic: true
          - CPPName: CalcScreenSizeMode
            CName: GFL_BGSysCalcScreenSizeMode
            IsStatic: true
          - CPPName: GetTileDimensions
            CName: GFL_BGSysGetTileDimensions
            IsStatic: true
          - CPPName: AdjustBGMoveCoord
            CName: GFL_BGSysAdjustBGMoveCoord
            IsStatic: true
          - CPPName: SetBGTransformIdentity
            CName: GFL_BGSysSetBGTransformIdentity
            IsStatic: true
          - CPPName: UploadScr
            CName: GFL_BGSysUploadScr
            IsStatic: true
          - CPPName: LoadCharCore
            CName: GFL_BGSysLoadCharCore
            IsStatic: true
          - CPPName: UploadChar
            CName: GFL_BGSysUploadChar
            IsStatic: true
          - CPPName: AllocScreen
            CName: GFL_BGSysAllocScreen
            IsStatic: true
          - CPPName: FreeScreenMemory
            CName: GFL_BGSysFreeScreenMemory
            IsStatic: true
          - CPPName: AdjustBGRotateCoord
            CName: GFL_BGSysAdjustBGRotateCoord
            IsStatic: true
          - CPPName: AdjustBGScaleCoord
            CName: GFL_BGSysAdjustBGScaleCoord
            IsStatic: true
          - CPPName: AdjustBGOriginCoord
            CName: GFL_BGSysAdjustBGOriginCoord
            IsStatic: true
      - Definition:
          Content: "struct BGSetup\n{\n  u32 PosX;\n  u32 PosY;\n  u32 ScreenSize;\n  u32 ScreenOffset;\n  u8 Resolution;\n  u8 ColorsPalettes;\n  u8 ScreenBaseBlock;\n  u8 CharBaseBlock;\n  u32 CharBlockSize;\n  u8 ExtPaletteSlot;\n  u8 Priority;\n  u8 DisplayAreaOverflow;\n  u8 _padDisplayAreaOverflow;\n  u32 Mosaic;\n};\n"
        Methods:
      - Definition:
          Content: "struct BGSysLCDConfig\n{\n  G2DDisplayMode DisplayModeA;\n  G2DBGMode BGModeA;\n  G2DBGMode BGModeB;\n  b32 IsBG03D;\n};\n"
        Methods:
      - Definition:
          Content: "struct BGSysVRAMConfig\n{\n  VRAMBankMask BGBanksA;\n  VRAMBankMask BGExtPltBanksA;\n  VRAMBankMask BGBanksB;\n  VRAMBankMask BGExtPltBanksB;\n  VRAMBankMask ObjBanksA;\n  VRAMBankMask ObjExtPltBanksA;\n  VRAMBankMask ObjBanksB;\n  VRAMBankMask ObjExtPltBanksB;\n  VRAMBankMask TexBanks;\n  VRAMBankMask PltBanks;\n  u32 TileOBJDISPCNTA;\n  u32 TileOBJDISPCNTB;\n};\n"
        Methods:
      - Definition:
          Content: "struct gfl::g2d::_NS {\n};"
        Methods:
          - CPPName: SetLCDConfig
            CName: GFL_BGSysSetLCDConfig
            IsStatic: false
          - CPPName: SetLCDConfigForEngine
            CName: GFL_BGSysSetLCDConfigForEngine
            IsStatic: false
          - CPPName: Set3DBGPriority
            CName: GFL_BGSysSet3DBGPriority
            IsStatic: false
          - CPPName: SetBGPriority
            CName: GFL_BGSysSetBGPriority
            IsStatic: false
          - CPPName: SetBGEnabled
            CName: GFL_BGSysSetBGEnabled
            IsStatic: false
          - CPPName: UploadStdPalette
            CName: GFL_BGSysUploadStdPalette
            IsStatic: false
          - CPPName: ResetStdPalette
            CName: GFL_BGSysResetStdPalette
            IsStatic: false
          - CPPName: InitVRAM
            CName: GFL_BGSysInitVRAM
            IsStatic: false
          - CPPName: SetVRAMBanks
            CName: GFL_BGSysSetVRAMBanks
            IsStatic: false
          - CPPName: DisableBGsA
            CName: GFL_BGSysDisableBGsA
            IsStatic: false
          - CPPName: DisableOBJA
            CName: GFL_BGSysDisableOBJA
            IsStatic: false
          - CPPName: DisableAllA
            CName: GFL_BGSysDisableAllA
            IsStatic: false
          - CPPName: DisableBGsB
            CName: GFL_BGSysDisableBGsB
            IsStatic: false
          - CPPName: DisableOBJB
            CName: GFL_BGSysDisableOBJB
            IsStatic: false
          - CPPName: DisableAllB
            CName: GFL_BGSysDisableAllB
            IsStatic: false
          - CPPName: SetBGEnabledA
            CName: GFL_BGSysSetBGEnabledA
            IsStatic: false
          - CPPName: SetEnabledBGsA
            CName: GFL_BGSysSetEnabledBGsA
            IsStatic: false
          - CPPName: SetBGEnabledB
            CName: GFL_BGSysSetBGEnabledB
            IsStatic: false
          - CPPName: SetEnabledBGsB
            CName: GFL_BGSysSetEnabledBGsB
            IsStatic: false
          - CPPName: EnableEngines
            CName: GFL_BGSysEnableEngines
            IsStatic: false
          - CPPName: SetDisplayLayout
            CName: GFL_BGSysSetDisplayLayout
            IsStatic: false
          - CPPName: GetEnabledBGsA
            CName: GFL_BGSysGetEnabledBGsA
            IsStatic: false
          - CPPName: GetEnabledBGsB
            CName: GFL_BGSysGetEnabledBGsB
            IsStatic: false
          - CPPName: GetBGCharAddress
            CName: GFL_BGSysGetBGCharAddress
            IsStatic: false
  - Path: gfl/g2d/gfl_bitmap.h
    Includes:
      - ns/g2d/res/ResCharacter.h
      - gfl/core/gfl_heap.h
    Typedefs:
    GVars:
    Functions:
      - Content: GFLBitmap *__fastcall GFL_BitmapCreate(u32 tileWidth, u32 tileHeight, u32 bytesPerTile, HeapID heapId)
      - Content: GFLBitmap *__fastcall GFL_BitmapWrap(void *pixelData, u16 tileWidth, u16 tileHeight, u32 bytesPerTile, HeapID heapId)
      - Content: GFLBitmap *__fastcall GFL_BitmapWrapVRAM(void *pixelData, u16 tileWidth, u16 tileHeight, u32 bytesPerTile, HeapID heapId)
      - Content: void __fastcall GFL_BitmapFree(GFLBitmap *bmp)
      - Content: u8 *__fastcall GFL_BitmapGetPixelData(GFLBitmap *bmp)
      - Content: u32 __fastcall GFL_BitmapGetWidth(GFLBitmap *bmp)
      - Content: u32 __fastcall GFL_BitmapGetHeight(GFLBitmap *bmp)
      - Content: u32 __fastcall GFL_BitmapCalcPixelDataSize(GFLBitmap *bmp)
      - Content: void __fastcall GFL_BitmapCopy(GFLBitmap *src, GFLBitmap *dst)
      - Content: u8 __fastcall GFL_BitmapGetBytesPerTile(GFLBitmap *bmp)
      - Content: void __fastcall GFL_BitmapCopyArea(GFLBitmap *src, GFLBitmap *dst, u16 startInX, u16 startInY, s32 startOutX, s32 startOutY, u32 copyWidth, u32 copyHeight, u16 transparentIndex)
      - Content: void __fastcall GFL_BitmapCopyAreaRebased(GFLBitmap *src, GFLBitmap *dst, s32 startInX, s32 startInY, s32 startOutX, s32 startOutY, u32 copyWidth, u32 copyHeight, u16 transparentIndex, u8 base)
      - Content: void __fastcall GFL_BitmapFillArea(GFLBitmap *bmp, u16 startX, u16 startY, u16 fillWidth, u16 fillHeight, u8 fillIndex)
      - Content: void __fastcall GFL_BitmapFill(GFLBitmap *bitmap, u8 fillIndex)
      - Content: GFLBitmap *__fastcall GFL_BitmapMakeLinear(GFLBitmap *bmp, b32 keepAsNew, HeapID heapId)
      - Content: void __fastcall GFL_BitmapConvFromCHAR(GFLBitmap *bmp, NNSG2DResCharHeader *ncgr, HeapID heapId)
    Enums:
      - Definition:
          Content: "enum GFLBitmapType\n{\n  GFL_BMP_DYNAMIC = 0x0,\n  GFL_BMP_STATIC_RAM = 0x1,\n  GFL_BMP_STATIC_VRAM = 0x2,\n};\n"
        DefineFlagOps: false
    Structures:
      - Definition:
          CPPName: "gfl::g2d::Bitmap"
          Content: "struct GFLBitmap\n{\n  u8 *PixelData;\n  u16 PixelWidth;\n  u16 PixelHeight;\n  u16 BytesPerTile;\n  u16 Type;\n};\n"
        Methods:
          - CPPName: Create
            CName: GFL_BitmapCreate
            IsStatic: true
          - CPPName: Wrap
            CName: GFL_BitmapWrap
            IsStatic: true
          - CPPName: WrapVRAM
            CName: GFL_BitmapWrapVRAM
            IsStatic: true
          - CPPName: Free
            CName: GFL_BitmapFree
            IsStatic: false
          - CPPName: GetWidth
            CName: GFL_BitmapGetWidth
            IsStatic: false
          - CPPName: GetHeight
            CName: GFL_BitmapGetHeight
            IsStatic: false
          - CPPName: GetPixelData
            CName: GFL_BitmapGetPixelData
            IsStatic: false
          - CPPName: GetBytesPerTile
            CName: GFL_BitmapGetBytesPerTile
            IsStatic: false
          - CPPName: Copy
            CName: GFL_BitmapCopy
            IsStatic: false
          - CPPName: CopyArea
            CName: GFL_BitmapCopyArea
            IsStatic: false
          - CPPName: CopyAreaRebased
            CName: GFL_BitmapCopyAreaRebased
            IsStatic: false
          - CPPName: Fill
            CName: GFL_BitmapFill
            IsStatic: false
          - CPPName: FillArea
            CName: GFL_BitmapFillArea
            IsStatic: false
          - CPPName: MakeLinear
            CName: GFL_BitmapMakeLinear
            IsStatic: false
          - CPPName: CalcPixelDataSize
            CName: GFL_BitmapCalcPixelDataSize
            IsStatic: false
          - CPPName: ConvFromCHAR
            CName: GFL_BitmapConvFromCHAR
            IsStatic: false
  - Path: gfl/g2d/gfl_fade.h
    Includes:
    Typedefs:
    GVars:
    Functions:
      - Content: void __fastcall GFL_FadeCreate(HeapID heapId)
      - Content: void __fastcall GFL_FadeUpdate()
      - Content: u32 __fastcall GFL_FadeGetUpdateFreq()
      - Content: void __fastcall GFL_FadeSetUpdateFreq(u32 framesPerUpdate)
      - Content: void __fastcall GFL_FadeSetUpdateFreqOne()
      - Content: void __fastcall GFL_FadeSet(FadeMode mode, s32 brightnessStart, s32 brightnessEnd, s32 slowness)
      - Content: b32 __fastcall GFL_FadeIsRunning()
      - Content: void __fastcall GFL_FadeFlush()
    Enums:
      - Definition:
          Content: "enum FadeMode\n{\n  FADE_ENGINE_A_BLACK = 0x1,\n  FADE_ENGINE_B_BLACK = 0x2,\n  FADE_ENGINE_A_WHITE = 0x4,\n  FADE_ENGINE_B_WHITE = 0x8,\n};\n"
        DefineFlagOps: false
    Structures:
      - Definition:
          CPPName: "gfl::g2d::Fade"
          Content: "struct FadeManager\n{\n  FadeMode Mode;\n  s32 BrightnessStart;\n  s32 NowBrightness;\n  s32 BrightnessEnd;\n  u32 WaitFramesRemaining;\n  u32 WaitFramesCount;\n  s32 BrightnessAddPerUpdate;\n  u32 UpdateFreq;\n};\n"
        Methods:
          - CPPName: Create
            CName: GFL_FadeCreate
            IsStatic: true
          - CPPName: Update
            CName: GFL_FadeUpdate
            IsStatic: true
          - CPPName: Set
            CName: GFL_FadeSet
            IsStatic: true
          - CPPName: IsRunning
            CName: GFL_FadeIsRunning
            IsStatic: true
          - CPPName: Flush
            CName: GFL_FadeFlush
            IsStatic: true
          - CPPName: GetUpdateFreq
            CName: GFL_FadeGetUpdateFreq
            IsStatic: true
          - CPPName: SetUpdateFreq
            CName: GFL_FadeSetUpdateFreq
            IsStatic: true
          - CPPName: SetUpdateFreqOne
            CName: GFL_FadeSetUpdateFreqOne
            IsStatic: true
  - Path: gfl/g2d/gfl_vhblank.h
    Includes:
      - gfl/core/gfl_tcb.h
    Typedefs:
      - Content: "typedef void (__fastcall *VBlankCallback)(void *);\n"
    GVars:
    Functions:
      - Content: void __fastcall GFL_HBlankTCBUpdate()
      - Content: TCB *__fastcall GFL_HBlankTCBAdd(TCBFunc callback, void *data, u32 priority)
      - Content: void __fastcall GFL_VBlankExecCallback()
      - Content: b32 __fastcall GFL_VBlankSetCallback(VBlankCallback callback, void *data)
      - Content: void __fastcall GFL_VBlankResetCallback()
      - Content: u32 __fastcall GFL_VBlankUpdate()
      - Content: TCB *__fastcall GFL_VBlankTCBAdd(TCBFunc callback, void *data, u32 priority)
      - Content: TCBManager *__fastcall GFL_VBlankGetTCBMgr()
    Enums:
    Structures:
  - Path: gfl/g3d/gfl_blact.h
    Includes:
      - nds/gx.h
      - math/fixed.h
      - math/vector.h
      - gfl/core/gfl_heap.h
      - gfl/core/gfl_areaman.h
      - gfl/g3d/gfl_g3d_system.h
    Typedefs:
      - Content: "typedef b32 (__fastcall *BlActVRAMUploadFunc)(b32, u32, void *, size_t);\n"
    GVars:
    Functions:
    Enums:
      - Definition:
          Content: "enum BlActOrigin\n{\n  BL_ORIGIN_CENTER = 0x0,\n  BL_ORIGIN_CX_TOP = 0x1,\n  BL_ORIGIN_CX_BOTTOM = 0x2,\n  BL_ORIGIN_CY_LEFT = 0x3,\n  BL_ORIGIN_CY_RIGHT = 0x4,\n  BL_ORIGIN_TOP_LEFT = 0x5,\n  BL_ORIGIN_TOP_RIGHT = 0x6,\n  BL_ORIGIN_BOTTOM_LEFT = 0x7,\n  BL_ORIGIN_BOTTOM_RIGHT = 0x8,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum BlActMaterialFlag\n{\n  BL_MATFLAG_ALPHA_MASK = 0x1F,\n  BL_MATFLAG_NODRAW = 0x200,\n  BL_MATFLAG_POLYID_MASK = 0x3E0,\n  BL_MATFLAG_TEX_RIGHT_TO_LEFT = 0x400,\n  BL_MATFLAG_TEX_TOP_TO_BOTTOM = 0x800,\n  BL_MATFLAG_LIGHT_MASK = 0xF000,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum BlActPixelFormat\n{\n  BL_PIXFMT_IDX4 = 0x0,\n  BL_PIXFMT_IDX8 = 0x1,\n  BL_PIXFMT_IDX2 = 0x2,\n  BL_PIXFMT_A3I5 = 0x3,\n  BL_PIXFMT_A5I3 = 0x4,\n  BL_PIXFMT_MAX = 0x5,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum BlActFaceSize\n{\n  BL_FACESIZE_32x32 = 0x0,\n  BL_FACESIZE_16x16 = 0x1,\n  BL_FACESIZE_64x64 = 0x2,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum BlActTexLoadMode\n{\n  BL_LOAD_DISCARD = 0x0,\n  BL_LOAD_TRIM = 0x1,\n  BL_LOAD_KEEP = 0x2,\n  BL_LOAD_SINGLE_USE = 0xFFFFFFFF,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum BlActBillboardType\n{\n  BL_TYPE_CAM_XYZ = 0x0,\n  BL_TYPE_CAM_XZ = 0x1,\n  BL_TYPE_CAM_IDENTITY = 0x2,\n  BL_TYPE_CAM_XZ_GEOM_XZ = 0x3,\n};\n"
        DefineFlagOps: false
    Structures:
      - Definition:
          Content: "struct BlActSystem\n{\n  HeapID m_HeapID;\n  u16 _padHeapID;\n  BlActScene *Scene;\n  BlActVRAMUploadFunc VRAMUploadFunc;\n  BlActTexMatMapEntry *TexMatMap;\n  u16 MaterialCount;\n  u16 _padMaterialCount;\n  AreaMan *MaterialAllocMgr;\n  BlActHandle *ActorHandles;\n  u16 ActorCount;\n  u16 _padActorCount;\n  AreaMan *ActorAllocMgr;\n};\n"
        Methods:
      - Definition:
          Content: "struct BlActTexMatMapEntry\n{\n  u16 MatIdx;\n  u16 _padMatIdx;\n  G3DResource *TexResource;\n};\n"
        Methods:
      - Definition:
          Content: "struct BlActSceneConfig\n{\n  u16 MaterialCount;\n  u16 ActorCount;\n  VecFx32 AllScale;\n  GXColor ColDiffuse;\n  GXColor ColAmbient;\n  GXColor ColSpecular;\n  GXColor ColEmissive;\n  u8 BasePolygonID;\n  u8 Origin;\n  u16 _padOrigin;\n};\n"
        Methods:
      - Definition:
          Content: "struct BlActScene\n{\n  HeapID m_HeapID;\n  u16 _padHeapID;\n  BlActMaterial *Materials;\n  BlAct *Actors;\n  BlActSceneConfig Config;\n  b32 IsViewMtxNoLoad;\n  b32 IsCustomNormal;\n  VecFx16 CustomNormal;\n  s16 TexcoordXOffset;\n  s16 TexcoordYOffset;\n  u16 _padding;\n};\n"
        Methods:
      - Definition:
          Content: "struct BlActMaterial\n{\n  G3DResource *TexResource;\n  u16 TexAtlasDimX;\n  u16 TexAtlasDimY;\n  u8 TexFaceDimX;\n  u8 TexFaceDimY;\n  u8 FacesPerRow;\n  u8 FacesPerColumn;\n  u32 TexAddr;\n  u32 PltAddr;\n  GEPixelFormat TexFormat;\n  u32 TexDimXBits;\n  u32 TexDimYBits;\n  u32 TexVRAMHandle;\n  u32 PltVRAMHandle;\n};\n"
        Methods:
      - Definition:
          Content: "struct BlAct\n{\n  u16 GeomFlags;\n  u16 _padGeomFlags;\n  VecFx32 Position;\n  u16 FaceIdx;\n  s16 ScaleX;\n  s16 Scale2;\n  u16 RotationY;\n  u16 MatFlags;\n  u16 _padMatFlags;\n};\n"
        Methods:
      - Definition:
          Content: "struct BlActHandle\n{\n  u32 BlActIdx;\n  u16 MatEntryIdx;\n  u16 field_6;\n  u32 field_8;\n  u16 field_C;\n  u16 field_E;\n  u32 field_10;\n  u16 field_14;\n  u16 field_16;\n  u32 field_18;\n  u16 field_1C;\n  u16 field_1E;\n  void *Callback;\n  void *CallbackData;\n};\n"
        Methods:
  - Path: gfl/g3d/gfl_g3d_camera.h
    Includes:
      - math/fixed.h
      - math/vector.h
      - math/lookat.h
      - gfl/core/gfl_heap.h
    Typedefs:
    GVars:
    Functions:
      - Content: G3DCamera* GFL_G3DCameraCreate(G3DCameraProjectionMode proj, fx32 param1, fx32 param2, fx32 param3, fx32 param4, fx32 near, fx32 far, fx32 ndcRangeOverride, VecFx32 *position, VecFx32 *upVector, VecFx32 *target, HeapID heapId)
      - Content: void GFL_G3DCameraFree(G3DCamera *cam)
      - Content: void GFL_G3DCameraFlush(G3DCamera *cam)
      - Content: void GFL_G3DCameraGetLookatPos(G3DCamera *cam, VecFx32 *dest)
      - Content: void GFL_G3DCameraSetLookatPos(G3DCamera *cam, VecFx32 *vec)
      - Content: void GFL_G3DCameraGetLookatUpVector(G3DCamera *cam, VecFx32 *dest)
      - Content: void GFL_G3DCameraSetLookatUpVector(G3DCamera *cam, VecFx32 *upVector)
      - Content: void GFL_G3DCameraGetLookatTarget(G3DCamera *cam, VecFx32 *dest)
      - Content: void GFL_G3DCameraSetLookatTarget(G3DCamera *cam, VecFx32 *target)
      - Content: G3DCameraProjectionMode GFL_G3DCameraGetProjectionType(G3DCamera *cam)
      - Content: void GFL_G3DCameraGetProjectionZNear(G3DCamera *cam, fx32 *dest)
      - Content: void GFL_G3DCameraSetProjectionZNear(G3DCamera *cam, fx32 *pZNear)
      - Content: void GFL_G3DCameraSetProjectionZFar(G3DCamera *cam, fx32 *pZFar)
      - Content: void GFL_G3DCameraPerspectiveSetFOVSin(G3DCamera *cam, fx32 fovSin)
      - Content: void GFL_G3DCameraPerspectiveGetFOVCos(G3DCamera *cam, fx32 *dest)
      - Content: void GFL_G3DCameraPerspectiveSetFOVCos(G3DCamera *cam, fx32 fovCos)
      - Content: void GFL_G3DCameraOrthoGetTop(G3DCamera *cam, fx32 *pTop)
      - Content: void GFL_G3DCameraOrthoSetTop(G3DCamera *cam, fx32 top)
      - Content: void GFL_G3DCameraOrthoGetBottom(G3DCamera *cam, fx32 *pBottom)
      - Content: void GFL_G3DCameraOrthoSetBottom(G3DCamera *cam, fx32 bottom)
    Enums:
      - Definition:
          CPPName: "gfl::g3d::ProjectionMode"
          Content: "enum G3DCameraProjectionMode\n{\n  G3DCAM_PROJECTION_PERSPECTIVE = 0x0,\n  G3DCAM_PROJECTION_FRUSTUM = 0x1,\n  G3DCAM_PROJECTION_ORTHO = 0x2,\n};"
        DefineFlagOps: false
    Structures:
      - Definition:
          CPPName: "gfl::g3d::Projection"
          Content: "struct G3DCameraProjection\n{\n  G3DCameraProjectionMode Type;\n  fx32 Param1;\n  fx32 Param2;\n  fx32 Param3;\n  fx32 Param4;\n  fx32 ZNear;\n  fx32 ZFar;\n  fx32 NDCRangeOverride;\n};"
        Methods:
      - Definition:
          CPPName: "gfl::g3d::Camera"
          Content: "struct G3DCamera\n{\n  G3DCameraProjection Projection;\n  FxLookAt LookAt;\n};"
        Methods:
          - CPPName: Create
            CName: GFL_G3DCameraCreate
            IsStatic: true
          - CPPName: Free
            CName: GFL_G3DCameraFree
            IsStatic: false
          - CPPName: Flush
            CName: GFL_G3DCameraFlush
            IsStatic: false
          - CPPName: GetEye
            CName: GFL_G3DCameraGetLookatPos
            IsStatic: false
          - CPPName: SetEye
            CName: GFL_G3DCameraSetLookatPos
            IsStatic: false
          - CPPName: GetUpVector
            CName: GFL_G3DCameraGetLookatUpVector
            IsStatic: false
          - CPPName: SetUpVector
            CName: GFL_G3DCameraSetLookatUpVector
            IsStatic: false
          - CPPName: GetTarget
            CName: GFL_G3DCameraGetLookatTarget
            IsStatic: false
          - CPPName: SetTarget
            CName: GFL_G3DCameraSetLookatTarget
            IsStatic: false
          - CPPName: GetProjectionType
            CName: GFL_G3DCameraGetProjectionType
            IsStatic: false
          - CPPName: GetZNear
            CName: GFL_G3DCameraGetProjectionZNear
            IsStatic: false
          - CPPName: SetZNear
            CName: GFL_G3DCameraSetProjectionZNear
            IsStatic: false
      - Definition:
          Content: "struct gfl::g3d::CameraOrtho : public gfl::g3d::Camera {\n};"
        Methods:
          - CPPName: GetTop
            CName: GFL_G3DCameraOrthoGetTop
            IsStatic: false
          - CPPName: SetTop
            CName: GFL_G3DCameraOrthoSetTop
            IsStatic: false
          - CPPName: GetBottom
            CName: GFL_G3DCameraOrthoGetBottom
            IsStatic: false
          - CPPName: SetBottom
            CName: GFL_G3DCameraOrthoSetBottom
            IsStatic: false
      - Definition:
          Content: "struct gfl::g3d::CameraPerspective : public gfl::g3d::Camera {\n};"
        Methods:
          - CPPName: GetFOVCos
            CName: GFL_G3DCameraPerspectiveGetFOVCos
            IsStatic: false
          - CPPName: SetFOVCos
            CName: GFL_G3DCameraPerspectiveSetFOVCos
            IsStatic: false
          - CPPName: SetFOVSin
            CName: GFL_G3DCameraPerspectiveSetFOVSin
            IsStatic: false
  - Path: gfl/g3d/gfl_g3d_light.h
    Includes:
      - nds/gx.h
      - math/fixed.h
      - gfl/core/gfl_heap.h
    Typedefs:
    GVars:
    Functions:
      - Content: G3DLight* GFL_G3DLightCreate(LightSetupList *setup, s16 heapId)
      - Content: void GFL_G3DLightFree(G3DLight *lights)
      - Content: void GFL_G3DLightFlush(G3DLight *lights)
      - Content: void GFL_G3DLightGetDirVector(G3DLight *lights, u8 lightIndex, VecFx16 *dest)
      - Content: void GFL_G3DLightSetDirVector(G3DLight *lights, u8 lightIndex, VecFx16 *dirVector)
      - Content: void GFL_G3DLightGetColor(G3DLight *lights, u8 lightIndex, GXColor *dest)
      - Content: void GFL_G3DLightSetColor(G3DLight *lights, u8 lightIndex, GXColor *pColor)
    Enums:
    Structures:
      - Definition:
          CPPName: "gfl::g3d::Light"
          Content: "struct Light\n{\n  VecFx16 Direction;\n  GXColor Color;\n};"
        Methods:
      - Definition:
          CPPName: "gfl::g3d::LightSetup"
          Content: "struct LightSetup\n{\n  u8 Index;\n  char _padIndex;\n  Light m_Light;\n};"
        Methods:
      - Definition:
          CPPName: "gfl::g3d::LightSetupList"
          Content: "struct LightSetupList\n{\n  LightSetup *Lights;\n  u8 LightCount;\n};"
        Methods:
      - Definition:
          CPPName: "gfl::g3d::LightSet"
          Content: "struct G3DLight\n{\n  Light Lights[4];\n};"
        Methods:
          - CPPName: Create
            CName: GFL_G3DLightCreate
            IsStatic: true
          - CPPName: Free
            CName: GFL_G3DLightFree
            IsStatic: false
          - CPPName: Flush
            CName: GFL_G3DLightFlush
            IsStatic: false
          - CPPName: GetDirVector
            CName: GFL_G3DLightGetDirVector
            IsStatic: false
          - CPPName: SetDirVector
            CName: GFL_G3DLightSetDirVector
            IsStatic: false
          - CPPName: GetColor
            CName: GFL_G3DLightGetColor
            IsStatic: false
          - CPPName: SetColor
            CName: GFL_G3DLightSetColor
            IsStatic: false
  - Path: gfl/g3d/gfl_g3d_scenemgr.h
    Includes:
      - gfl/g3d/gfl_g3d_system.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          CPPName: "gfl::g3d::Scene"
          Content: "struct G3DScene\n{\n  u16 FirstResIndex;\n  u16 ResCount;\n  u16 FirstActorIndex;\n  u16 ActorCount;\n};\n"
        Methods:
      - Definition:
          CPPName: "gfl::g3d::SceneResource"
          Content: "struct G3DSceneResource\n{\n  G3DResource *Resource;\n};\n"
        Methods:
      - Definition:
          CPPName: "gfl::g3d::SceneActor"
          Content: "struct G3DSceneActor\n{\n  G3DActor *Actor;\n};\n"
        Methods:
      - Definition:
          CPPName: "gfl::g3d::SceneManager"
          Content: "struct G3DManager\n{\n  G3DSceneResource *Resources;\n  u8 *IsResAlreadyUsed;\n  u16 ResourceLimit;\n  u16 _padResourceLimit;\n  G3DSceneActor *Actors;\n  u8 *ActorResShareFlags;\n  u16 ActorLimit;\n  G3DScene Scenes[64];\n  HeapID m_HeapID;\n};\n"
        Methods:
  - Path: gfl/g3d/gfl_g3d_system.h
    Includes:
      - gfl/g3d/gfl_g3d_camera.h
      - gfl/g3d/gfl_g3d_light.h
      - gfl/g3d/gfl_transform.h
      - ns/g3d/res/G3DResData.h
      - ns/g3d/res/ResTexture.h
    Typedefs:
      - Content: "typedef void (*G3DSystemInitCallback)();\n"
      - Content: "typedef void (*G3DModelDrawCallback)();\n"
    GVars:
    Functions:
      - Content: void GFL_G3DSysCreate(b32 useFrmHeapVramMgr, u32 numMgmtBlks, u32 dat3, u32 dat4, u16 dtcmAllocSize, HeapID heapId, G3DSystemInitCallback initCallback)
      - Content: void GFL_G3DSysFree()
      - Content: void GFL_G3DSysMtxGetProjection(G3DCameraProjection *dest)
      - Content: void GFL_G3DSysMtxSetProjection(G3DCameraProjection *projection)
      - Content: void GFL_G3DSysMtxGetViewLookAt(FxLookAt *dest)
      - Content: void GFL_G3DSysMtxSetViewLookAt(FxLookAt *lookat)
      - Content: void GFL_G3DSysMtxViewFlush()
      - Content: void GFL_G3DSysLightSet(GXLightID lightID, Light *light)
      - Content: G3DResource* GFL_G3DSysReadArcSysResource(int arcId, u16 datId)
      - Content: G3DResource* GFL_G3DSysReadArcToolResource(ArcTool *arcTool, u16 datId)
      - Content: G3DResource* GFL_G3DSysReadFSResource(const char *path, u16 datId)
      - Content: void GFL_G3DSysDrawObj(G3DActor *obj, SRTMatrix *mdlMtx)
      - Content: void GFL_G3DSysDrawObjBBoxCull(G3DActor *obj, SRTMatrix *mdlMtx)
      - Content: void GFL_G3DResFree(G3DResource *res)
      - Content: void GFL_G3DResSetup(G3DResource *res, NNSG3DResData *resData)
      - Content: NNSG3DResData* GFL_G3DResGetResData(G3DResource *res)
      - Content: NNSG3DResTex* GFL_G3DResGetTexData(G3DResource *res)
      - Content: u32 GFL_G3DResGetTexVRAMHandle(G3DResource *res)
      - Content: u32 GFL_G3DResGetPltVRAMHandle(G3DResource *res)
      - Content: void* GFL_G3DResGetTexImageData(G3DResource *res)
      - Content: void* GFL_G3DResGetTexPaletteData(G3DResource *res)
      - Content: void GFL_G3DResTrimTexData(G3DResource *res)
      - Content: b32 GFL_G3DResAllocTexMem(NNSG3DResTex *tex, u32 *pTexKey, u32 *pTex4x4Key)
      - Content: b32 GFL_G3DResAllocPltMem(NNSG3DResTex *tex, u32 *pPltKey)
      - Content: b32 GFL_G3DResIsTexNeedsUpload(G3DResource *res)
      - Content: b32 GFL_G3DResUploadTexDataCore(G3DResource *res)
      - Content: b32 GFL_G3DResUploadTexData(G3DResource *res)
      - Content: b32 GFL_G3DResUploadAndReleaseTexData(G3DResource *res)
      - Content: b32 GFL_G3DResFreeTexData(G3DResource *res)
      - Content: G3DModel* GFL_G3DMdlCreate(G3DResource *modelResource, u32 modelIdx, G3DResource *texResource)
      - Content: G3DResource* GFL_G3DMdlGetMdlResource(G3DModel *mdl)
      - Content: G3DResource* GFL_G3DMdlGetTexResource(G3DModel *mdl)
      - Content: void* GFL_G3DMdlGetRenderObj(G3DModel *mdl)
      - Content: void GFL_G3DMdlFree(G3DModel *mdl)
      - Content: G3DAnim* GFL_G3DAnmCreate(G3DModel *mdl, G3DResource *anmRsc, u8 anmIdx)
      - Content: void* GFL_G3DAnmGetRenderObj(G3DAnim *anm)
      - Content: void GFL_G3DAnmFree(G3DAnim *anm)
      - Content: G3DActor* GFL_G3DActorCreate(G3DModel *model, G3DAnim **animations, int animationsCount)
      - Content: void GFL_G3DActorFree(G3DActor *actor)
      - Content: G3DModel* GFL_G3DActorGetMdl(G3DActor *actor)
      - Content: G3DAnim* GFL_G3DActorGetAnm(G3DActor *actor, u8 anmIdx)
      - Content: u16 GFL_G3DActorGetAnmCount(G3DActor *actor)
      - Content: b32 GFL_G3DActorBindAnm(G3DActor *actor, u8 anmIdx)
      - Content: b32 GFL_G3DActorUnbindAnm(G3DActor *actor, u8 anmIdx)
      - Content: b32 GFL_G3DActorGetAnmFrameCount(G3DActor *actor, u8 anmIdx, fx32 *dest)
      - Content: b32 GFL_G3DActorResetAnmFrame(G3DActor *actor, u8 anmIdx)
      - Content: b32 GFL_G3DActorGetAnmFrame(G3DActor *actor, u8 anmIdx, fx32 *dest)
      - Content: b32 GFL_G3DActorSetAnmFrame(G3DActor *actor, u8 anmIdx, fx32 *frame)
      - Content: b32 GFL_G3DActorStepAnmFrame(G3DActor *actor, u8 anmIdx, fx16 addend)
      - Content: b32 GFL_G3DActorStepAnmFrameLoop(G3DActor *anmMdl, u8 anmIdx, fx16 addend)
    Enums:
      - Definition:
          CPPName: "gfl::g3d::ResourceType"
          Content: "enum G3DResourceType\n{\n  G3D_RESTYPE_INVALID = 0x0,\n  G3D_RESTYPE_MDL_TEX = 0x1,\n  G3D_RESTYPE_MDL = 0x2,\n  G3D_RESTYPE_TEX = 0x3,\n  G3D_RESTYPE_ANM = 0x4\n};"
        DefineFlagOps: false
    Structures:
      - Definition:
          CPPName: "gfl::g3d::Resource"
          Content: "struct G3DResource\n{\n  s16 			AllocState;\n  s16 			ResourceType;\n  NNSG3DResData*	ResourceData;\n};"
        Methods:
          - CPPName: Load
            CName: GFL_G3DSysReadArcSysResource
            IsStatic: true
          - CPPName: Load
            CName: GFL_G3DSysReadArcToolResource
            IsStatic: true
          - CPPName: Load
            CName: GFL_G3DSysReadFSResource
            IsStatic: true
          - CPPName: Free
            CName: GFL_G3DResFree
            IsStatic: false
          - CPPName: Setup
            CName: GFL_G3DResSetup
            IsStatic: false
          - CPPName: GetResData
            CName: GFL_G3DResGetResData
            IsStatic: false
      - Definition:
          CPPName: "gfl::g3d::System"
          Content: "struct G3DSystem\n{\n  void* Allocator;\n  void *PaletteVRAMManager;\n  void *TexVRAMManager;\n  HeapID m_HeapID;\n  s16 pad_heapId;\n  G3DCameraProjection CameraProjection;\n  Light Lights[4];\n  FxLookAt CameraLookAt;\n  b32 UseManualAlphaSort;\n  b32 DepthBufferW;\n  void *MtxFlushFunc;\n  b32 IsVRAMFrameHeap;\n  int dword90;\n  b32 ReqSwapBuffers;\n  G3DModelDrawCallback m_ModelDrawCallback;\n  int dword9C;\n};"
        Methods:
          - CPPName: Create
            CName: GFL_G3DSysCreate
            IsStatic: true
          - CPPName: Free
            CName: GFL_G3DSysFree
            IsStatic: true
          - CPPName: DrawObj
            CName: GFL_G3DSysDrawObj
            IsStatic: true
          - CPPName: DrawObjBBoxCull
            CName: GFL_G3DSysDrawObjBBoxCull
            IsStatic: true
          - CPPName: GetProjection
            CName: GFL_G3DSysMtxGetProjection
            IsStatic: true
          - CPPName: SetProjection
            CName: GFL_G3DSysMtxSetProjection
            IsStatic: true
          - CPPName: GetViewLookAt
            CName: GFL_G3DSysMtxGetViewLookAt
            IsStatic: true
          - CPPName: SetViewLookAt
            CName: GFL_G3DSysMtxSetViewLookAt
            IsStatic: true
          - CPPName: SetLight
            CName: GFL_G3DSysLightSet
            IsStatic: true
          - CPPName: FlushViewMatrix
            CName: GFL_G3DSysMtxViewFlush
            IsStatic: true
      - Definition:
          Content: "struct gfl::g3d::Texture : public gfl::g3d::Resource {\n};"
        Methods:
          - CPPName: GetTexData
            CName: GFL_G3DResGetTexData
            IsStatic: false
          - CPPName: FreeTexData
            CName: GFL_G3DResFreeTexData
            IsStatic: false
          - CPPName: GetTexVRAMHandle
            CName: GFL_G3DResGetTexVRAMHandle
            IsStatic: false
          - CPPName: GetPltVRAMHandle
            CName: GFL_G3DResGetPltVRAMHandle
            IsStatic: false
          - CPPName: GetTexImageData
            CName: GFL_G3DResGetTexImageData
            IsStatic: false
          - CPPName: GetPaletteImageData
            CName: GFL_G3DResGetTexPaletteData
            IsStatic: false
          - CPPName: TrimData
            CName: GFL_G3DResTrimTexData
            IsStatic: false
          - CPPName: AllocTexMem
            CName: GFL_G3DResAllocTexMem
            IsStatic: false
            ParamSwizzle: GetTexData()/2/3
          - CPPName: AllocPltMem
            CName: GFL_G3DResAllocPltMem
            IsStatic: false
            ParamSwizzle: GetTexData()/2
          - CPPName: IsNeedsUpload
            CName: GFL_G3DResIsTexNeedsUpload
            IsStatic: false
          - CPPName: UploadCore
            CName: GFL_G3DResUploadTexDataCore
            IsStatic: false
          - CPPName: Upload
            CName: GFL_G3DResUploadTexData
            IsStatic: false
          - CPPName: UploadAndRelease
            CName: GFL_G3DResUploadAndReleaseTexData
            IsStatic: false
      - Definition:
          CPPName: "gfl::g3d::Model"
          Content: "struct G3DModel\n{\n  u16 		Magic;\n  u16 		_padMagic;\n  void*		RenderObj;\n  G3DResource*	Model;\n  G3DResource*	Textures;\n};"
        Methods:
          - CPPName: Create
            CName: GFL_G3DMdlCreate
            IsStatic: true
          - CPPName: Free
            CName: GFL_G3DMdlFree
            IsStatic: false
          - CPPName: GetMdlResource
            CName: GFL_G3DMdlGetMdlResource
            IsStatic: false
          - CPPName: GetTexResource
            CName: GFL_G3DMdlGetTexResource
            IsStatic: false
          - CPPName: GetRenderObj
            CName: GFL_G3DMdlGetRenderObj
            IsStatic: false
      - Definition:
          CPPName: "gfl::g3d::Animation"
          Content: "struct G3DAnim\n{\n  u16             Magic;\n  u16             _padMagic;\n  void*           AnmObj;\n  G3DResource*    AnimRes;\n};"
        Methods:
          - CPPName: Create
            CName: GFL_G3DAnmCreate
            IsStatic: true
          - CPPName: Free
            CName: GFL_G3DAnmFree
            IsStatic: false
          - CPPName: GetRenderObj
            CName: GFL_G3DAnmGetRenderObj
            IsStatic: false
      - Definition:
          CPPName: "gfl::g3d::Actor"
          Content: "struct G3DActor\n{\n  G3DModel*     Model;\n  G3DAnim**     Anims;\n  u16           AnimCount;\n  u16           Magic;\n};"
        Methods:
          - CPPName: Create
            CName: GFL_G3DActorCreate
            IsStatic: true
          - CPPName: Free
            CName: GFL_G3DActorFree
            IsStatic: false
          - CPPName: Draw
            CName: GFL_G3DSysDrawObj
            IsStatic: false
          - CPPName: DrawCullCheck
            CName: GFL_G3DSysDrawObjBBoxCull
            IsStatic: false
          - CPPName: GetModel
            CName: GFL_G3DActorGetMdl
            IsStatic: false
          - CPPName: GetAnimationCount
            CName: GFL_G3DActorGetAnmCount
            IsStatic: false
          - CPPName: GetAnimation
            CName: GFL_G3DActorGetAnm
            IsStatic: false
          - CPPName: BindAnm
            CName: GFL_G3DActorBindAnm
            IsStatic: false
          - CPPName: UnbindAnm
            CName: GFL_G3DActorUnbindAnm
            IsStatic: false
          - CPPName: GetAnmFrameCount
            CName: GFL_G3DActorGetAnmFrameCount
            IsStatic: false
          - CPPName: ResetAnmFrame
            CName: GFL_G3DActorResetAnmFrame
            IsStatic: false
          - CPPName: GetAnmFrame
            CName: GFL_G3DActorGetAnmFrame
            IsStatic: false
          - CPPName: SetAnmFrame
            CName: GFL_G3DActorSetAnmFrame
            IsStatic: false
          - CPPName: StepAnmFrame
            CName: GFL_G3DActorStepAnmFrame
            IsStatic: false
          - CPPName: StepAnmFrameLoop
            CName: GFL_G3DActorStepAnmFrameLoop
            IsStatic: false
  - Path: gfl/g3d/gfl_g3d_tpanm.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct GFBTPController\n{\n  u16 *KeyFrames;\n  u8 *TextureIndices;\n  u8 *PaletteIndices;\n  u8 *Targets;\n  u32 KeyFrameCount;\n  u32 TargetCount;\n  u32 FrameCount;\n};\n"
        Methods:
      - Definition:
          Content: "struct GFBTPValue\n{\n  u8 TextureIndex;\n  u8 PaletteIndex;\n};\n"
        Methods:
  - Path: gfl/g3d/gfl_transform.h
    Includes:
      - math/matrix.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          CPPName: "gfl::g3d::Transform"
          Content: "struct SRTMatrix\n{\n    VecFx32 Translation;\n    VecFx32 Scale;\n    Mat3 Rotation;\n};"
        Methods:
  - Path: gfl/snd/gfl_player_volume_fader.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct PlayerVolumeFader\n{\n  u8 PlayerIndex;\n  u8 SrcVolume;\n  u8 DstVolume;\n  u8 _padDstVolume;\n  u16 EndFrame;\n  u16 NowFrame;\n  u8 Mute;\n  u8 _padMute;\n};\n"
        Methods:
  - Path: gfl/str/gfl_systemfont.h
    Includes:
      - gfl/str/gfl_textprint.h
    Typedefs:
    GVars:
      - Content: SystemFont* g_SystemFont;
    Functions:
      - Content: void __fastcall GFL_SystemFontInit(const char *path)
      - Content: void __fastcall GFL_SystemFontGetGlyph(u32 glyphIndex, TextPrint *textPrint)
      - Content: u32 __fastcall GFL_SystemFontUnpackBits(u8 data)
      - Content: u8 __fastcall GFL_SystemFontGetHeight()
      - Content: u32 __fastcall GFL_SystemFontGetTabSize()
      - Content: void __fastcall GFL_SystemFontSetColorIndices(u32 primaryIndex, u32 secondaryIndex)
    Enums:
    Structures:
      - Definition:
          Content: "struct SystemFontData\n{\n  u32 GlyphsOffset;\n  u32 GlyphWidthsOffset;\n  u32 GlyphCount;\n  u8 CellWidth;\n  u8 CellHeight;\n  u8 LetterSpacing;\n  u8 LineSpacing;\n};\n"
        Methods:
      - Definition:
          CPPName: "gfl::str::SystemFont"
          Content: "struct SystemFont\n{\n  SystemFontData *FontData;\n  u32 PrimaryColorIndexMask;\n  u32 SecondaryColorIndexMask;\n  b32 IsUsingEmbeddedFont;\n};\n"
        Methods:
          - CPPName: Init
            CName: GFL_SystemFontInit
            IsStatic: true
          - CPPName: GetGlyph
            CName: GFL_SystemFontGetGlyph
            IsStatic: true
          - CPPName: UnpackBits
            CName: GFL_SystemFontUnpackBits
            IsStatic: true
          - CPPName: GetHeight
            CName: GFL_SystemFontGetHeight
            IsStatic: true
          - CPPName: GetTabSize
            CName: GFL_SystemFontGetTabSize
            IsStatic: true
          - CPPName: SetColorIndices
            CName: GFL_SystemFontSetColorIndices
            IsStatic: true
  - Path: gfl/str/gfl_textprint.h
    Includes:
      - gfl/g2d/gfl_bitmap.h
    Typedefs:
    GVars:
      - Content: TextPrintState g_DebugPrintState;
      - Content: TextPrint* g_TextPrint;
    Functions:
      - Content: void __fastcall GFL_TextPrintInit(const char *fontPath)
      - Content: void __fastcall GFL_TextPrintDrawIndices(u16 *printstr, TextPrintState *state)
      - Content: void __fastcall GFL_TextPrintDrawString(const char *string, TextPrintState *state)
      - Content: void __fastcall GFL_TextPrintStringToIndices(const char *cstr, u16 *printstr, u32 destCapacity)
      - Content: u32 __fastcall GFL_TextPrintASCIIToIndex(u32 character)
      - Content: int __fastcall GFL_TextPrintSJISToIndex(u32 character)
    Enums:
      - Definition:
          CPPName: "gfl::str::TextPrintSpecialChar"
          Content: "enum TextPrintSpecialChar\n{\n  TEXTPRINT_NULL = 0x0,\n  TEXTPRINT_LF = 0x1,\n  TEXTPRINT_TAB = 0x2,\n  TEXTPRINT_MA = 0x3,\n  TEXTPRINT_SPECIAL_CHAR_END = 0x4,\n  TEXTPRINT_CR = 0xFFFE,\n};\n"
        DefineFlagOps: false
    Structures:
      - Definition:
          CPPName: "gfl::str::TextPrintState"
          Content: "struct TextPrintState\n{\n  GFLBitmap *m_Bitmap;\n  u16 OutOffsX;\n  u16 OutOffsY;\n  u8 LetterSpacing;\n  u8 LineSpacing;\n  u8 GlyphColorIndex:4;\n  u8 BGColorIndex:4;\n  u8 _Padding;\n};\n"
        Methods:
      - Definition:
          CPPName: "gfl::str::TextPrint"
          Content: "struct TextPrint\n{\n  u8 CharBitmapBuffer[32];\n  u8 CharWidth;\n  u8 _padCharWidth;\n  u16 OutOffsX;\n  u16 OutOffsY;\n};\n"
        Methods:
          - CPPName: Init
            CName: GFL_TextPrintInit
            IsStatic: true
          - CPPName: StringToIndices
            CName: GFL_TextPrintStringToIndices
            IsStatic: true
          - CPPName: ASCIIToIndex
            CName: GFL_TextPrintASCIIToIndex
            IsStatic: true
          - CPPName: SJISToIndex
            CName: GFL_TextPrintSJISToIndex
            IsStatic: true
          - CPPName: DrawIndices
            CName: GFL_TextPrintDrawIndices
            IsStatic: true
          - CPPName: DrawString
            CName: GFL_TextPrintDrawString
            IsStatic: true
    Macros: "#define GFL_TEXTPRINT_ASCII_HI 0x80\n#define GFL_TEXTPRINT_ASCII_EXT_LO 0xA0\n#define GFL_TEXTPRINT_ASCII_EXT_HI 0xDF\n#define GFL_TEXTPRINT_IS_ASCII(character) ((((unsigned char)(character)) <= GFL_TEXTPRINT_ASCII_HI)\\n|| (((unsigned char)(character)) >= GFL_TEXTPRINT_ASCII_EXT_LO \\n&& ((unsigned char)(character)) <= GFL_TEXTPRINT_ASCII_EXT_HI))"
  - Path: math/angle.h
    Includes:
      - math/fixed.h
    Typedefs:
      - Content: "typedef u16 fxangle;\n"
    GVars:
      - Content: SinCosEntry FX_SIN_COS_TABLE[4096];
    Functions:
      - Content: fxangle fx_acos(fx32 cos)
      - Content: fxangle fx_atan2(fx32 x, fx32 y)
    Enums:
    Structures:
      - Definition:
          Content: "struct SinCosEntry\n{\n  fx16 Sin;\n  fx16 Cos;\n};"
        Methods:
    Macros: "#define FX_ANGLE_DEG(value) ((fxangle)((value) * 65535.0f / 360.0f))\n#define FX_ANGLE_RAD(value) ((fxangle)((value) * 65535.0f / 3.1415926f))"
  - Path: math/fixed.h
    Includes:
    Typedefs:
      - Content: "typedef s32 fx32;\n"
      - Content: "typedef s16 fx16;\n"
    GVars:
    Functions:
      - Content: fx32 fx_mul_round(fx32 a, fx32 b)
      - Content: fx32 fx_div(fx32 numerator, fx32 denominator)
      - Content: void fx_div_req(fx32 numerator, fx32 denominator)
      - Content: fx32 fx_recip(fx32 value)
      - Content: void fx_recip_req(fx32 denominator)
      - Content: fx32 fx_div_get_result()
      - Content: fx32 __fastcall fx_sqrt(fx32 num)
      - Content: fx32 __fastcall fx_invSqrt(fx32 num)
      - Content: void __fastcall fx_sqrt_req(fx32 num)
      - Content: fx32 __fastcall fx_sqrt_get_result()
    Enums:
    Structures:
    Macros: "#define FX_SCALE_I 4096\n#define FX_SCALE_F 4096.0f\n\n#define FX32_ONE FX_SCALE_I\n\n#define FX32(value) ((fx32)((value) * FX_SCALE_F))"
  - Path: math/lookat.h
    Includes:
      - math/fixed.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          CPPName: "math::LookAt"
          Content: "struct FxLookAt\n{\n  VecFx32 Position;\n  VecFx32 UpVector;\n  VecFx32 Target;\n};"
        Methods:
  - Path: math/matrix.h
    Includes:
      - math/fixed.h
      - math/vector.h
    Typedefs:
    GVars:
    Functions:
      - Content: void MAT3_Identity(Mat3 *matrix)
      - Content: void MAT3_Copy(Mat3 *src, Mat3 *dest)
      - Content: void MAT3_Invert(Mat3 *matrix, Mat3 *inverse)
      - Content: void MAT3_Mul(Mat3 *right, Mat3 *left, Mat3 *ab)
      - Content: void MAT3_Scaling(Mat3 *matrix, fx32 x, fx32 y, fx32 z)
      - Content: void MAT3_Scale(Mat3 *matrix, fx32 x, fx32 y, fx32 z)
      - Content: void MAT3_RotationX(Mat3 *matrix, fx32 angleSin, fx32 angleCos)
      - Content: void MAT3_RotationY(Mat3 *matrix, fx32 angleSin, fx32 angleCos)
      - Content: void MAT3_RotationZ(Mat3 *matrix, fx32 angleSin, fx32 angleCos)
      - Content: void MAT3_RotationEulerZYX(fx32 rotX, fx32 rotY, fx32 rotZ, Mat3 *matrix)
      - Content: void MAT3_RotationDir(VecFx32 *dirVec, Mat3 *matrix)
      - Content: void MAT3_RotationAxisAngle(Mat3 *matrix, VecFx32 *axis, fx32 angleSin, fx32 angleCos)
      - Content: void MAT3_MulVec(VecFx32 *vec, Mat3 *matrix, VecFx32 *dst)
      - Content: void MAT3_To4x4(Mat3 *src, Mat4 *dest)
      - Content: void __fastcall MAT2_Identity(Mat2 *matrix)
      - Content: void __fastcall MAT2_Rotation(Mat2 *matrix, fx32 sin, fx32 cos)
      - Content: void __fastcall MAT2_Scaling(Mat2 *matrix, fx32 x, fx32 y)
      - Content: void __fastcall MAT2_Scale(Mat2 *src, Mat2 *dest, fx32 scaleX, fx32 scaleY)
      - Content: void __fastcall MAT43_Identity(Mat4x3 *matrix)
      - Content: void __fastcall MAT43_Copy(Mat4x3 *src, Mat4x3 *dst)
      - Content: void __fastcall MAT43_Scaling(Mat4x3 *matrix, fx32 x, fx32 y, fx32 z)
      - Content: void __fastcall MAT43_Scale(Mat4x3 *src, Mat4x3 *dest, fx32 x, fx32 y, fx32 z)
      - Content: void __fastcall MAT43_RotationY(Mat4x3 *matrix, fx32 sin, fx32 cos)
      - Content: void __fastcall MAT43_RotationAxisAngle(Mat4x3 *matrix, VecFx32 *axis, fx32 angleSin, fx32 angleCos)
      - Content: void __fastcall MAT43_Invert(Mat4x3 *src, Mat4x3 *dst)
      - Content: void __fastcall MAT43_Mul(Mat4x3 *right, Mat4x3 *left, Mat4x3 *dest)
      - Content: void __fastcall MAT43_MulVec(VecFx32 *vec, Mat4x3 *matrix, VecFx32 *dest)
      - Content: void __fastcall MAT43_LookAt(VecFx32 *eye, VecFx32 *up, VecFx32 *target, Mat4x3 *dest)
      - Content: void __fastcall MAT43_To4x4(Mat4x3 *src, Mat4 *dest)
      - Content: void __fastcall MAT4_Identity(Mat4 *matrix)
      - Content: void __fastcall MAT4_Copy(Mat4 *src, Mat4 *dst)
      - Content: void __fastcall MAT4_SetPerspective(fx32 fovSin, fx32 fovCos, fx32 aspect, fx32 near, fx32 far, fx32 ndcRange, Mat4 *dest)
      - Content: void __fastcall MAT4_SetOrtho(fx32 top, fx32 bottom, fx32 left, fx32 right, fx32 near, fx32 far, fx32 ndcRange, Mat4 *dest)
      - Content: void __fastcall MAT4_SetFrustum(fx32 top, fx32 bottom, fx32 left, fx32 right, fx32 near, fx32 far, fx32 ndcRange, Mat4 *dest)
      - Content: void __fastcall MAT4_Mul(Mat4 *right, Mat4 *left, Mat4 *dest)
      - Content: void __fastcall MAT4_To4x3(Mat4 *src, Mat4x3 *dest)
    Enums:
    Structures:
      - Definition:
          CPPName: "math::Mat3"
          Content: "struct Mat3\n{\n  fx32 M00;\n  fx32 M01;\n  fx32 M02;\n  fx32 M10;\n  fx32 M11;\n  fx32 M12;\n  fx32 M20;\n  fx32 M21;\n  fx32 M22;\n};"
        Methods:
          - CPPName: Identity
            CName: MAT3_Identity
            IsStatic: false
          - CPPName: Invert
            CName: MAT3_Invert
            IsStatic: false
            ParamSwizzle: 0/0
          - CPPName: Invert
            CName: MAT3_Invert
            IsStatic: false
          - CPPName: Mul
            CName: MAT3_Mul
            IsStatic: false
            ParamSwizzle: 1/0/0
          - CPPName: Mul
            CName: MAT3_Mul
            IsStatic: false
            ParamSwizzle: 1/0/3
          - CPPName: Scaling
            CName: MAT3_Scaling
            IsStatic: false
          - CPPName: Scale
            CName: MAT3_Scale
            IsStatic: false
          - CPPName: RotationX
            CName: MAT3_RotationX
            IsStatic: false
          - CPPName: RotationY
            CName: MAT3_RotationY
            IsStatic: false
          - CPPName: RotationZ
            CName: MAT3_RotationZ
            IsStatic: false
          - CPPName: RotationEulerZYX
            CName: MAT3_RotationEulerZYX
            IsStatic: false
            ParamSwizzle: 1/2/3/0
          - CPPName: RotationDir
            CName: MAT3_RotationDir
            IsStatic: false
            ParamSwizzle: 1/0
          - CPPName: RotationAxisAngle
            CName: MAT3_RotationAxisAngle
            IsStatic: false
          - CPPName: MulVec
            CName: MAT3_MulVec
            IsStatic: false
            ParamSwizzle: 1/0/1
          - CPPName: MulVec
            CName: MAT3_MulVec
            IsStatic: false
            ParamSwizzle: 1/0/3
          - CPPName: Copy
            CName: MAT3_Copy
            IsStatic: false
          - CPPName: To4x4
            CName: MAT3_To4x4
            IsStatic: false
      - Definition:
          CPPName: "math::Mat2"
          Content: "struct Mat2\n{\n  fx32 M00;\n  fx32 M01;\n  fx32 M10;\n  fx32 M11;\n};\n"
        Methods:
          - CPPName: Identity
            CName: MAT2_Identity
            IsStatic: false
          - CPPName: Scaling
            CName: MAT2_Scaling
            IsStatic: false
          - CPPName: Scale
            CName: MAT2_Scale
            IsStatic: false
          - CPPName: Scale
            CName: MAT2_Scale
            IsStatic: false
            ParamSwizzle: 0/0/3/4
          - CPPName: Rotation
            CName: MAT2_Rotation
            IsStatic: false
      - Definition:
          CPPName: "math::Mat4x3"
          Content: "struct Mat4x3\n{\n  Mat3 Rotation;\n  VecFx32 Translation;\n};"
        Methods:
          - CPPName: Identity
            CName: MAT43_Identity
            IsStatic: false
          - CPPName: Copy
            CName: MAT43_Copy
            IsStatic: false
          - CPPName: Invert
            CName: MAT43_Invert
            IsStatic: false
          - CPPName: Invert
            CName: MAT43_Invert
            IsStatic: false
            ParamSwizzle: 0/0
          - CPPName: Mul
            CName: MAT43_Mul
            IsStatic: false
            ParamSwizzle: 1/0/3
          - CPPName: Mul
            CName: MAT43_Mul
            IsStatic: false
            ParamSwizzle: 1/0/0
          - CPPName: To4x4
            CName: MAT43_To4x4
            IsStatic: false
          - CPPName: Scaling
            CName: MAT43_Scaling
            IsStatic: false
          - CPPName: Scale
            CName: MAT43_Scale
            IsStatic: false
          - CPPName: Scale
            CName: MAT43_Scale
            IsStatic: false
            ParamSwizzle: 0/0/3/4/5
          - CPPName: RotationY
            CName: MAT43_RotationY
            IsStatic: false
          - CPPName: RotationAxisAngle
            CName: MAT43_RotationAxisAngle
            IsStatic: false
          - CPPName: LookAt
            CName: MAT43_LookAt
            IsStatic: false
            ParamSwizzle: 1/2/3/0
          - CPPName: MulVec
            CName: MAT43_MulVec
            IsStatic: false
            ParamSwizzle: 1/0/3
          - CPPName: MulVec
            CName: MAT43_MulVec
            IsStatic: false
            ParamSwizzle: 1/0/1
      - Definition:
          CPPName: "math::Mat4"
          Content: "struct Mat4\n{\n  fx32 M00;\n  fx32 M01;\n  fx32 M02;\n  fx32 M03;\n  fx32 M10;\n  fx32 M11;\n  fx32 M12;\n  fx32 M13;\n  fx32 M20;\n  fx32 M21;\n  fx32 M22;\n  fx32 M23;\n  fx32 M30;\n  fx32 M31;\n  fx32 M32;\n  fx32 M33;\n};\n"
        Methods:
          - CPPName: Identity
            CName: MAT4_Identity
            IsStatic: false
          - CPPName: Copy
            CName: MAT4_Copy
            IsStatic: false
          - CPPName: Mul
            CName: MAT4_Mul
            IsStatic: false
            ParamSwizzle: 1/0/3
          - CPPName: Mul
            CName: MAT4_Mul
            IsStatic: false
            ParamSwizzle: 1/0/0
          - CPPName: To4x3
            CName: MAT4_To4x3
            IsStatic: false
          - CPPName: SetPerspective
            CName: MAT4_SetPerspective
            IsStatic: false
            ParamSwizzle: 1/2/3/4/5/6/0
          - CPPName: SetOrtho
            CName: MAT4_SetOrtho
            IsStatic: false
            ParamSwizzle: 1/2/3/4/5/6/7/0
          - CPPName: SetFrustum
            CName: MAT4_SetFrustum
            IsStatic: false
            ParamSwizzle: 1/2/3/4/5/6/7/0
  - Path: math/vector.h
    Includes:
      - math/fixed.h
    Typedefs:
    GVars:
    Functions:
      - Content: void __fastcall vecfx_mul(const VecFx32 *src, const fx32 mul, VecFx32 *dest)
      - Content: void __fastcall vecfx_div(const VecFx32 *src, const fx32 denom, VecFx32 *dest)
      - Content: void __fastcall vecfx_add(const VecFx32 *a, const VecFx32 *b, VecFx32 *dest)
      - Content: void __fastcall vecfx_sub(const VecFx32 *base, const VecFx32 *subtrahend, VecFx32 *dest)
      - Content: void __fastcall vecfx_add16(const VecFx16 *a, const VecFx16 *b, VecFx16 *dest)
      - Content: fx32 __fastcall vecfx_dot(const VecFx32 *a, const VecFx32 *b)
      - Content: fx32 __fastcall vecfx_dot16(const VecFx16 *a, const VecFx16 *b)
      - Content: void __fastcall vecfx_cross(const VecFx32 *a, const VecFx32 *b, VecFx32 *dest)
      - Content: void __fastcall vecfx_cross16(const VecFx16 *a, const VecFx16 *b, VecFx16 *dest)
      - Content: fx32 __fastcall vecfx_length(const VecFx32 *vec)
      - Content: fx32 __fastcall vecfx_length16(const VecFx16 *vec)
      - Content: void __fastcall vecfx_normalize(const VecFx32 *vec, VecFx32 *normalized)
      - Content: void __fastcall vecfx_normalize16(const VecFx16 *vec, VecFx16 *normalized)
      - Content: void __fastcall vecfx_muladd(const fx32 scalar, const VecFx32 *base, const VecFx32 *addend, VecFx32 *dest)
      - Content: fx32 __fastcall vecfx_dist(const VecFx32 *a, const VecFx32 *b)
    Enums:
    Structures:
      - Definition:
          CPPName: "math::Vec3"
          Content: "struct VecFx32\n{\n  fx32 x;\n  fx32 y;\n  fx32 z;\n};"
        Methods:
          - CPPName: Add
            CName: vecfx_add
            IsStatic: false
          - CPPName: Add
            CName: vecfx_add
            IsStatic: false
            ParamSwizzle: 0/2/0
          - CPPName: Sub
            CName: vecfx_sub
            IsStatic: false
          - CPPName: Sub
            CName: vecfx_sub
            IsStatic: false
            ParamSwizzle: 0/2/0
          - CPPName: Mul
            CName: vecfx_mul
            IsStatic: false
          - CPPName: Mul
            CName: vecfx_mul
            IsStatic: false
            ParamSwizzle: 0/2/0
          - CPPName: Div
            CName: vecfx_div
            IsStatic: false
          - CPPName: Div
            CName: vecfx_div
            IsStatic: false
            ParamSwizzle: 0/2/0
          - CPPName: MulAdd
            CName: vecfx_muladd
            IsStatic: false
            ParamSwizzle: 1/0/3/4
          - CPPName: MulAdd
            CName: vecfx_muladd
            IsStatic: false
            ParamSwizzle: 1/0/3/0
          - CPPName: Dot
            CName: vecfx_dot
            IsStatic: false
          - CPPName: Cross
            CName: vecfx_cross
            IsStatic: false
          - CPPName: Cross
            CName: vecfx_cross
            IsStatic: false
            ParamSwizzle: 0/2/0
          - CPPName: Normalize
            CName: vecfx_normalize
            IsStatic: false
          - CPPName: Normalize
            CName: vecfx_normalize
            IsStatic: false
            ParamSwizzle: 0/0
          - CPPName: Length
            CName: vecfx_length
            IsStatic: false
          - CPPName: Dist
            CName: vecfx_dist
            IsStatic: false
      - Definition:
          CPPName: "math::Vec3_16"
          Content: "struct VecFx16\n{\n  fx16 x;\n  fx16 y;\n  fx16 z;\n};"
        Methods:
          - CPPName: Add
            CName: vecfx_add16
            IsStatic: false
          - CPPName: Add
            CName: vecfx_add16
            IsStatic: false
            ParamSwizzle: 0/2/0
          - CPPName: Dot
            CName: vecfx_dot16
            IsStatic: false
          - CPPName: Cross
            CName: vecfx_cross16
            IsStatic: false
          - CPPName: Cross
            CName: vecfx_cross16
            IsStatic: false
            ParamSwizzle: 0/2/0
          - CPPName: Normalize
            CName: vecfx_normalize16
            IsStatic: false
          - CPPName: Normalize
            CName: vecfx_normalize16
            IsStatic: false
            ParamSwizzle: 0/0
          - CPPName: Length
            CName: vecfx_length16
            IsStatic: false
  - Path: nds/compression.h
    Includes:
    Typedefs:
    GVars:
    Functions:
      - Content: void __fastcall sys_uncomp_blz(void *address)
      - Content: void __fastcall sys_uncomp_lz1x(void *src, void *dest)
    Enums:
    Structures:
  - Path: nds/cp15.h
    Includes:
    Typedefs:
    GVars:
    Functions:
      - Content: void __fastcall cp15_halt()
      - Content: signed int __fastcall cp15_invalidateIC(char *addr, int size)
      - Content: void __fastcall cp15_invalidateICAll()
      - Content: void __fastcall cp15_drainWriteBuffer()
      - Content: u32 __fastcall cp15_flushDC(void *ptr, u32 size)
      - Content: signed int __fastcall cp15_cleanDC(char *addr, size_t size)
      - Content: signed int __fastcall cp15_invalidateDC(char *addr, int size)
      - Content: int cp15_invalidateDCAll()
    Enums:
    Structures:
  - Path: nds/fs.h
    Includes:
    Typedefs:
    GVars:
    Functions:
      - Content: FSFile* finit(FSFile *file)
      - Content: b32 fs_resolve_file(FSFile *file, char *path)
      - Content: FileSystem* fs_normalize_path(const char *src, u32 *destId, char *dest)
      - Content: b32 fs_call_syscmd(FSFile *file, FSCommand command, b32 blocking)
      - Content: int fs_call_filecmd(FSFile *file, unsigned int commandId, b32 blocking)
      - Content: b32 romfs_fopen(FSFile *file, const char *path)
      - Content: b32 romfs_fopen_core(FSFile *file, const char *path, u32 mode)
      - Content: b32 romfs_fopen_id(FSFile *file, FSFileID id)
      - Content: b32 romfs_fclose(FSFile *file)
      - Content: u32 romfs_fgetsize(FSFile *file)
      - Content: b32 romfs_fseek(FSFile *file, u32 offset, SeekOrigin origin)
      - Content: u32 romfs_ftell(FSFile *file)
      - Content: u32 romfs_fread(FSFile *file, void *dest, u32 length)
    Enums:
      - Definition:
          CPPName: "nn::fs::FileCommand"
          Content: "enum FSFileCommand\n{\n  FSF_READ = 0x0,\n  FSF_WRITE = 0x1,\n  FSF_CHANGE_DIR = 0x2,\n  FSF_ITERATE_DIR = 0x3,\n  FSF_FIND_PATH = 0x4,\n  FSF_GET_LENGTH = 0x5,\n  FSF_OPEN_FAST = 0x6,\n  FSF_OPEN_DIRECT = 0x7,\n  FSF_CLOSE = 0x8\n};"
        DefineFlagOps: false
      - Definition:
          CPPName: "nn::fs::SystemCommand"
          Content: "enum FSCommand\n{\n  FS_READ_FILE = 0x0,\n  FS_WRITE_FILE = 0x1,\n  FS_FIND_PATH = 0x4,\n  FS_CLOSE_FILE = 0x8,\n  FS_OPEN_FILE = 0xD,\n  FS_SEEK_FILE = 0xE,\n  FS_GET_FILE_LENGTH = 0xF,\n  FS_GET_FILE_POS = 0x10,\n  FS_OPEN_DIR = 0x20,\n  FS_CLOSE_DIR = 0x21\n};"
        DefineFlagOps: false
      - Definition:
          CPPName: "nn::fs::SeekOrigin"
          Content: "enum SeekOrigin\n{\n  IO_SEEK_SET = 0x0,\n  IO_SEEK_CUR = 0x1,\n  IO_SEEK_END = 0x2,\n};"
        DefineFlagOps: false
    Structures:
      - Definition:
          CPPName: "nn::fs::FileSystem"
          Content: "struct FileSystem\n{\n  char dummy[92];\n};"
        Methods:
      - Definition:
          CPPName: "nn::fs::detail::IterDirParam"
          Content: "struct FSFileIterDirParam\n{\n  FSFileIterDirResult *ResultPtr;\n  b32 DontNeedReadName;\n  int field_8;\n  int field_C;\n  int field_10;\n  int field_14;\n};"
        Methods:
      - Definition:
          CPPName: "nn::fs::FileID"
          Content: "struct FSFileID\n{\n  FileSystem *m_FileSystem;\n  int FileID;\n};"
        Methods:
      - Definition:
          CPPName: "nn::fs::IterDirResult"
          Content: "struct FSFileIterDirResult\n{\n  FSFileID FileID;\n  u32 field_8;\n  b32 IsDirectory;\n  u32 NameLength;\n  char Name[128];\n};"
        Methods:
      - Definition:
          CPPName: "nn::fs::FileOpenRequest"
          Content: "struct FSFileOpenRequest\n{\n  u32 BaseID;\n  char *Path;\n  u32 Mode;\n};"
        Methods:
      - Definition:
          CPPName: "nn::fs::File"
          Content: "struct FSFile\n{\n  u32 field_0;\n  u32 TableData;\n  FileSystem *m_FileSystem;\n  u32 CommandQueue;\n  void *Request;\n  u32 field_14;\n  u32 field_18;\n  u32 field_1C;\n  u32 field_20;\n  u16 NowDirID;\n  u16 DirIterFileID;\n  u32 SubTableOffset;\n  u32 ParentDirID;\n  union {\n  	FSFileIterDirParam IterDir;\n  };\n};"
        Methods:
          - CPPName: Init
            CName: finit
            IsStatic: false
          - CPPName: Open
            CName: romfs_fopen
            IsStatic: false
          - CPPName: OpenID
            CName: romfs_fopen_id
            IsStatic: false
          - CPPName: Close
            CName: romfs_fclose
            IsStatic: false
          - CPPName: GetSize
            CName: romfs_fgetsize
            IsStatic: false
          - CPPName: Seek
            CName: romfs_fseek
            IsStatic: false
          - CPPName: Tell
            CName: romfs_ftell
            IsStatic: false
          - CPPName: Read
            CName: romfs_fread
            IsStatic: false
          - CPPName: CallSystemCommand
            CName: fs_call_syscmd
            IsStatic: false
          - CPPName: CallFileCommand
            CName: fs_call_filecmd
            IsStatic: false
  - Path: nds/gx.h
    Includes:
      - math/matrix.h
      - math/vector.h
      - math/fixed.h
    Typedefs:
      - CPPName: "nn::gx::Color"
        Content: "typedef u16 GXColor;\n"
    GVars:
      - Content: LCDIO LCDIO_A;
      - Content: LCDIO LCDIO_B;
      - Content: s16 MASTER_BRIGHT_A;
      - Content: s16 MASTER_BRIGHT_B;
      - Content: volatile DispCntReg DISPCNT_A;
      - Content: volatile DispCntReg DISPCNT_B;
      - Content: StdPalette STD_PALETTE_BG_A;
      - Content: StdPalette STD_PALETTE_BG_B;
      - Content: StdPalette STD_PALETTE_OBJ_A;
      - Content: StdPalette STD_PALETTE_OBJ_B;
      - Content: u16 g_GfxVRAMLCDCBanks;
      - Content: u16 g_GfxVRAMBGBanksA;
      - Content: u16 g_GfxVRAMObjBanksA;
      - Content: u16 g_GfxVRAMPlainARM7Banks;
      - Content: u16 g_GfxVRAMTexBanks;
      - Content: u16 g_GfxVRAMPltBanks;
      - Content: u16 g_GfxVRAMRearPlaneImageBanks;
      - Content: u16 g_GfxVRAMBGExtPltBanksA;
      - Content: u16 g_GfxVRAMObjExtPltBanksA;
      - Content: u16 g_GfxVRAMBGBanksB;
      - Content: u16 g_GfxVRAMObjBanksB;
      - Content: u16 g_GfxVRAMBGExtPltBanksB;
      - Content: u16 g_GfxVRAMObjExtPltBanksB;
      - Content: volatile PowCntReg POWCNT1;
    Functions:
      - Content: void __fastcall gfxInit()
      - Content: b32 __fastcall gfxUploadAsync(GfxUploadTarget target, u32 dstOffset, void *src, size_t size)
      - Content: void __fastcall gfxSetVCountIntrLine(u16 scanline)
      - Content: void __fastcall gfxSetHBlankIRQEnabled(b32 enable)
      - Content: void __fastcall gfxSetVBlankIRQEnabled(b32 enable)
      - Content: b32 __fastcall gfxEngineIsEnabledA()
      - Content: void __fastcall gfxEngineDisableA()
      - Content: void __fastcall gfxEngineEnableA()
      - Content: void __fastcall gfxSetEngineModeA(G2DDisplayMode dispMode, G2DBGMode bgMode, b32 bg03D)
      - Content: void __fastcall gfxSetBGModeB(G2DBGMode bgMode)
      - Content: void __fastcall gfxRegSetMasterBrightness(s16 *reg, s16 bright)
      - Content: s32 __fastcall gfxRegGetMasterBrightness(s16 *reg)
      - Content: void __fastcall gfxRegSetBGTransform(G2DBGTransformRegs *dest, Mat2 *matrix, int originX, int originY, int offsetX, int offsetY)
      - Content: void __fastcall gfxRegSetAlphaBlend(G2DBlendRegs *regs, G2DTargetPixel targetPixel1, G2DTargetPixel targetPixel2, int eva, int evb)
      - Content: void __fastcall gfxRegSetBrightnessBlend(G2DBlendRegs *regs, G2DTargetPixel targetPixel, s16 evy)
      - Content: void __fastcall gfxRegSetBlend(G2DBlendRegs *regs, G2DTargetPixel target1, G2DTargetPixel target2, s16 eva, s16 evb, s16 bldy)
      - Content: void __fastcall gfxRegAdjustBrightnessBlend(G2DBlendRegs *regs, s16 bldy)
      - Content: void __fastcall gfxPerspective(fx32 fovSin, fx32 fovCos, fx32 aspect, fx32 near, fx32 far, fx32 ndcRange, b32 apply, Mat4 *outMatrix)
      - Content: void __fastcall gfxOrtho(fx32 top, fx32 bottom, fx32 left, fx32 right, fx32 near, fx32 far, fx32 ndcRange, b32 apply, Mat4 *outMatrix)
      - Content: void __fastcall gfxLookAt(VecFx32 *eye, VecFx32 *up, VecFx32 *tgt, b32 setToGpu, Mat4x3 *dest)
      - Content: void __fastcall gfxRotateX(fx32 sin, fx32 cos)
      - Content: void __fastcall gfxRotateY(fx32 sin, fx32 cos)
      - Content: void __fastcall gfxRotateZ(fx32 sin, fx32 cos)
      - Content: void __fastcall gfxLoadMatrix4x4(Mat4 *mat)
      - Content: void __fastcall gfxLoadMatrix4x3(Mat4x3 *mat)
      - Content: void __fastcall gfxMultMatrix4x4(Mat4 *mat)
      - Content: void __fastcall gfxMultMatrix4x3(Mat4x3 *mat)
      - Content: void __fastcall gfxMultMatrix3x3(Mat3 *mat)
      - Content: void __fastcall gfxMultTransRot4x3(Mat3 *rotation, VecFx32 *translation)
      - Content: void __fastcall gfxInit3D()
      - Content: void __fastcall gfxReset3D()
      - Content: void __fastcall gfxResetFIFO()
      - Content: void __fastcall gfxResetMatrixStack()
      - Content: void __fastcall gfxResetMatrixStackKeepProjection()
      - Content: void __fastcall gfxSetFog(u8 enable, u16 alphaMode, u16 depthShift, u16 offset)
      - Content: int __fastcall gfxGetClipMatrix(Mat4 *dest)
      - Content: int __fastcall gfxGetNormalMatrix(Mat3 *dest)
      - Content: void *__fastcall gfxSetEdgeColorTable(u16 *edgeColorTable)
      - Content: void __fastcall gfxSetFogTable(u8 *fogTable)
      - Content: void __fastcall gfxClearColor(GXColor color, u8 alpha, s16 clearDepth, u8 polyId, b32 fog)
      - Content: void __fastcall gfxResetLUTs()
      - Content: int __fastcall gfxGetWorldMatrixStackLevel(u32 *dest)
      - Content: int __fastcall gfxGetProjectionMatrixStackLevel(u32 *dest)
      - Content: void __fastcall gfxSet1DotDepth(fx32 depth)
      - Content: int __fastcall gfxGetBoxTestResult(int *dest)
      - Content: void __fastcall gfxClearFIFO(volatile int *fifo)
      - Content: void *__fastcall gfxGetScreenAddrBG0A()
      - Content: void *__fastcall gfxGetScreenAddrBG0B()
      - Content: void *__fastcall gfxGetScreenAddrBG1A()
      - Content: void *__fastcall gfxGetScreenAddrBG1B()
      - Content: void *__fastcall gfxGetScreenAddrBG2A()
      - Content: void *__fastcall gfxGetScreenAddrBG2B()
      - Content: void *__fastcall gfxGetScreenAddrBG3A()
      - Content: void *__fastcall gfxGetScreenAddrBG3B()
      - Content: void *__fastcall gfxGetCharAddrBG0A()
      - Content: void *__fastcall gfxGetCharAddrBG0B()
      - Content: void *__fastcall gfxGetCharAddrBG1A()
      - Content: void * gfxGetCharAddrBG1B(void)
      - Content: void *__fastcall gfxGetCharAddrBG2A()
      - Content: void * gfxGetCharAddrBG2B(void)
      - Content: void *__fastcall gfxGetCharAddrBG3A()
      - Content: void * gfxGetCharAddrBG3B(void)
      - Content: void __fastcall gfxUploadStdPaletteBGA(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxUploadStdPaletteBGB(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxUploadStdPaletteObjA(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxUploadStdPaletteObjB(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxUploadOAMA(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxUploadOAMB(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxUploadObjCharA(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxUploadObjCharB(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxUploadBGScreen0A(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxUploadBGScreen0B(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxUploadBGScreen1A(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxUploadBGScreen1B(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxUploadBGScreen2A(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxUploadBGScreen2B(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxUploadBGScreen3A(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxUploadBGScreen3B(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxUploadBGChar0A(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxUploadBGChar0B(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxUploadBGChar1A(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxUploadBGChar1B(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxUploadBGChar2A(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxUploadBGChar2B(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxUploadBGChar3A(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxUploadBGChar3B(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxBeginBGExtPltAUpload()
      - Content: void __fastcall gfxUploadExtPaletteBGA(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxEndBGExtPltAUpload()
      - Content: void gfxBeginObjExtPltAUpload(void)
      - Content: void __fastcall gfxUploadExtPaletteObjA(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxEndObjExtPltAUpload()
      - Content: void __fastcall gfxBeginBGExtPltBUpload()
      - Content: void __fastcall gfxUploadExtPaletteBGB(void *src, int dstOffset, size_t size)
      - Content: void __fastcall gfxEndBGExtPltBUpload()
      - Content: void __fastcall gfxBeginObjExtPltBUpload()
      - Content: void __fastcall gfxUploadExtPaletteObjB(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxEndObjExtPltBUpload()
      - Content: void __fastcall gfxBeginTextureUpload()
      - Content: void __fastcall gfxUploadTexture(void *src, u32 dstOffset, size_t size)
      - Content: void __fastcall gfxEndTextureUpload()
      - Content: void __fastcall gfxBeginPaletteUpload()
      - Content: void __fastcall gfxUploadPalette(void *src, int dstOffset, size_t size)
      - Content: void __fastcall gfxEndPaletteUpload()
      - Content: void __fastcall gfxBeginRearPlaneImageUpload()
      - Content: void __fastcall gfxUploadRearPlaneImageB(void *src, size_t size)
      - Content: void __fastcall gfxEndRearPlaneImageUpload()
      - Content: void __fastcall gfxSetLCDCBanksCore(VRAMBankMask mask)
      - Content: void __fastcall gfxSetBGBanksA(VRAMBankMask banks)
      - Content: void __fastcall gfxSetObjBanksA(VRAMBankMask banks)
      - Content: void __fastcall gfxSetBGExtPltBanksA(VRAMBankMask banks)
      - Content: void __fastcall gfxSetObjExtPltBanksA(VRAMBankMask banks)
      - Content: void __fastcall gfxSetTextureBanks(VRAMBankMask banks)
      - Content: void __fastcall gfxSetPaletteBanks(VRAMBankMask banks)
      - Content: void __fastcall gfxSetLCDCBanks(VRAMBankMask mask)
      - Content: void __fastcall gfxSetBGBanksB(VRAMBankMask banks)
      - Content: void __fastcall gfxSetObjBanksB(VRAMBankMask banks)
      - Content: void __fastcall gfxSetBGExtPltBanksB(VRAMBankMask banks)
      - Content: void __fastcall gfxSetObjExtPltBanksB(VRAMBankMask banks)
      - Content: VRAMBankMask __fastcall gfxAcquireBanksForLCDC(u16 *bankQueue)
      - Content: VRAMBankMask __fastcall gfxAcquireBGBanksA()
      - Content: VRAMBankMask __fastcall gfxAcquireObjBanksA()
      - Content: VRAMBankMask __fastcall gfxAcquireBGExtPltBanksA()
      - Content: VRAMBankMask __fastcall gfxAcquireObjExtPltBanksA()
      - Content: VRAMBankMask __fastcall gfxAcquireTextureBanks()
      - Content: VRAMBankMask __fastcall gfxAcquirePaletteBanks()
      - Content: VRAMBankMask __fastcall gfxAcquireBGBanksB()
      - Content: VRAMBankMask __fastcall gfxAcquireObjBanksB()
      - Content: VRAMBankMask __fastcall gfxAcquireBGExtPltBanksB()
      - Content: VRAMBankMask __fastcall gfxAcquireObjExtPltBanksB()
      - Content: VRAMBankMask __fastcall gfxDisableQueuedBanks(u16 *pBankMask)
      - Content: VRAMBankMask __fastcall gfxDisableBGBanksA()
      - Content: VRAMBankMask gfxDisableObjBanksA()
      - Content: VRAMBankMask __fastcall gfxDisableBGExtPltBanksA()
      - Content: VRAMBankMask gfxDisableObjExtPltBanksA()
      - Content: VRAMBankMask gfxDisableTextureBanks()
      - Content: VRAMBankMask gfxDisablePaletteBanks()
      - Content: VRAMBankMask gfxDisableRearPlaneImageBanks()
      - Content: VRAMBankMask __fastcall gfxDisableLCDCBanks()
      - Content: VRAMBankMask gfxDisableBGBanksB()
      - Content: VRAMBankMask gfxDisableObjBanksB()
      - Content: VRAMBankMask gfxDisableBGExtPltBanksB()
      - Content: VRAMBankMask gfxDisableObjExtPltBanksB()
      - Content: VRAMBankMask gfxGetObjBanksA(void)
      - Content: VRAMBankMask __fastcall gfxGetObjExtPltBanksA()
      - Content: VRAMBankMask __fastcall gfxGetTextureBanks()
      - Content: VRAMBankMask gfxGetObjBanksB(void)
      - Content: VRAMBankMask __fastcall gfxGetObjExtPltBanksB()
      - Content: void __fastcall gfxUploadMatrix4x3(Mat4x3 *mat, volatile s32 *fifo)
      - Content: void __fastcall gfxUploadMatrix4x4(Mat4 *mat, volatile int *fifo)
      - Content: void gfxInitVRAM(void)
    Enums:
      - Definition:
          CPPName: "nn::gx::LightID"
          Content: "enum GXLightID\n{\n  GX_LIGHTID_0 = 0x0,\n  GX_LIGHTID_1 = 0x1,\n  GX_LIGHTID_2 = 0x2,\n  GX_LIGHTID_3 = 0x3,\n};"
        DefineFlagOps: false
      - Definition:
          Content: "enum GEPixelFormat\n{\n  GE_PIXFMT_NULL = 0x0,\n  GE_PIXFMT_A3I5 = 0x1,\n  GE_PIXFMT_IDX2 = 0x2,\n  GE_PIXFMT_IDX4 = 0x3,\n  GE_PIXFMT_IDX8 = 0x4,\n  GE_PIXFMT_IDXCMPR = 0x5,\n  GE_PIXFMT_A5I3 = 0x6,\n  GE_PIXFMT_RGB5A1 = 0x7,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum VRAMBankMask\n{\n  VRAM_MASK_NONE = 0x0,\n  VRAM_MASK_A = 0x1,\n  VRAM_MASK_B = 0x2,\n  VRAM_MASK_C = 0x4,\n  VRAM_MASK_D = 0x8,\n  VRAM_MASK_E = 0x10,\n  VRAM_MASK_F = 0x20,\n  VRAM_MASK_G = 0x40,\n  VRAM_MASK_H = 0x80,\n  VRAM_MASK_I = 0x100,\n};\n"
        DefineFlagOps: true
      - Definition:
          Content: "enum VRAMBank\n{\n  VRAM_BANK_A = 0x0,\n  VRAM_BANK_B = 0x1,\n  VRAM_BANK_C = 0x2,\n  VRAM_BANK_D = 0x3,\n  VRAM_BANK_E = 0x4,\n  VRAM_BANK_F = 0x5,\n  VRAM_BANK_G = 0x6,\n  VRAM_BANK_H = 0x7,\n  VRAM_BANK_I = 0x8,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum GfxUploadTarget\n{\n  GFX_UPLOAD_TEXTURE = 0x0,\n  GFX_UPLOAD_PALETTE = 0x1,\n  GFX_UPLOAD_REAR_PLANE_BITMAP_A = 0x2,\n  GFX_UPLOAD_REAR_PLANE_BITMAP_B = 0x3,\n  GFX_UPLOAD_BG_CHAR_0A = 0x4,\n  GFX_UPLOAD_BG_CHAR_1A = 0x5,\n  GFX_UPLOAD_BG_CHAR_2A = 0x6,\n  GFX_UPLOAD_BG_CHAR_3A = 0x7,\n  GFX_UPLOAD_BG_SCREEN_0A = 0x8,\n  GFX_UPLOAD_BG_SCREEN_1A = 0x9,\n  GFX_UPLOAD_BG_SCREEN_2A = 0xA,\n  GFX_UPLOAD_BG_SCREEN_3A = 0xB,\n  GFX_UPLOAD_BG_SCREEN_2A_EXT = 0xC,\n  GFX_UPLOAD_BG_SCREEN_3A_EXT = 0xD,\n  GFX_UPLOAD_STD_PLT_OBJ_A = 0xE,\n  GFX_UPLOAD_STD_PLT_BG_A = 0xF,\n  GFX_UPLOAD_EXT_PLT_OBJ_A = 0x10,\n  GFX_UPLOAD_EXT_PLT_BG_A = 0x11,\n  GFX_UPLOAD_OAM_A = 0x12,\n  GFX_UPLOAD_OBJ_CHAR_A = 0x13,\n  GFX_UPLOAD_BG_CHAR_0B = 0x14,\n  GFX_UPLOAD_BG_CHAR_1B = 0x15,\n  GFX_UPLOAD_BG_CHAR_2B = 0x16,\n  GFX_UPLOAD_BG_CHAR_3B = 0x17,\n  GFX_UPLOAD_BG_SCREEN_0B = 0x18,\n  GFX_UPLOAD_BG_SCREEN_1B = 0x19,\n  GFX_UPLOAD_BG_SCREEN_2B = 0x1A,\n  GFX_UPLOAD_BG_SCREEN_3B = 0x1B,\n  GFX_UPLOAD_BG_SCREEN_2B_EXT = 0x1C,\n  GFX_UPLOAD_BG_SCREEN_3B_EXT = 0x1D,\n  GFX_UPLOAD_STD_PLT_OBJ_B = 0x1E,\n  GFX_UPLOAD_STD_PLT_BG_B = 0x1F,\n  GFX_UPLOAD_EXT_PLT_OBJ_B = 0x20,\n  GFX_UPLOAD_EXT_PLT_BG_B = 0x21,\n  GFX_UPLOAD_OAM_B = 0x22,\n  GFX_UPLOAD_OBJ_CHAR_B = 0x23,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum G2DTargetPixel\n{\n  G2D_TARGETPX_NONE = 0x0,\n  G2D_TARGETPX_BG0 = 0x1,\n  G2D_TARGETPX_BG1 = 0x2,\n  G2D_TARGETPX_BG2 = 0x4,\n  G2D_TARGETPX_BG3 = 0x8,\n  G2D_TARGETPX_OBJ = 0x10,\n  G2D_TARGETPIXEL_BD = 0x20,\n  G2D_TARGETPIXEL_ALL = 0x3F,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum G2DScreenBGBit\n{\n  G2D_SCREENBG_NONE = 0x0,\n  G2D_SCREENBG_0 = 0x1,\n  G2D_SCREENBG_1 = 0x2,\n  G2D_SCREENBG_2 = 0x4,\n  G2D_SCREENBG_3 = 0x8,\n  G2D_SCREENBG_OBJ = 0x10,\n};\n"
        DefineFlagOps: true
      - Definition:
          Content: "enum G2DDisplayMode\n{\n  G2D_DISPMODE_OFF = 0x0,\n  G2D_DISPMODE_GRAPHICS = 0x1,\n  G2D_DISPMODE_VRAM = 0x2,\n  G2D_DISPMODE_RAM_DMA = 0x3,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum G2DBGMode\n{\n  G2D_BGMODE_HTTT = 0x0,\n  G2D_BGMODE_HTTA = 0x1,\n  G2D_BGMODE_HTAA = 0x2,\n  G2D_BGMODE_HTTE = 0x3,\n  G2D_BGMODE_HTAE = 0x4,\n  G2D_BGMODE_HTEE = 0x5,\n  G2D_BGMODE_3_L_ = 0x6,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum G2DBG\n{\n  G2D_BG0A = 0x0,\n  G2D_BG1A = 0x1,\n  G2D_BG2A = 0x2,\n  G2D_BG3A = 0x3,\n  G2D_BG0B = 0x4,\n  G2D_BG1B = 0x5,\n  G2D_BG2B = 0x6,\n  G2D_BG3B = 0x7,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum G2DBGScreenSize\n{\n  BGSIZE_T256x256_R128x128 = 0x0,\n  BGSIZE_T512x256_R256x256 = 0x1,\n  BGSIZE_T256x512_R512x512 = 0x2,\n  BGSIZE_T512x512_R1024x1024 = 0x3,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum G2DDisplayLayout\n{\n  G2D_DISPLAYOUT_A_DOWN_B_UP = 0x0,\n  G2D_DISPLAYOUT_A_UP_B_DOWN = 0x1,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum G2DEngine\n{\n  G2D_ENGINE_A = 0x0,\n  G2D_ENGINE_B = 0x1,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum G2DColorPaletteMode\n{\n  G2D_COL16_PAL16 = 0x0,\n  G2D_COL256_PAL1 = 0x1,\n};\n"
        DefineFlagOps: false
    Structures:
      - Definition:
          Content: "struct G2DBGTransformRegs\n{\n  s16 Dx;\n  s16 Dmx;\n  s16 Dy;\n  s16 Dmy;\n  s32 X;\n  s32 Y;\n};\n"
        Methods:
      - Definition:
          Content: "struct G2DBlendRegs\n{\n  u16 BLDCNT;\n  u16 BLDALPHA;\n  u16 BLDY;\n  u16 UNUSED6;\n};\n"
        Methods:
      - Definition:
          Content: "union BGCntBit12 {\n	u32 ExtPltSlot:1;\n	u32 DispAreaOverflow:1;\n};"
        Methods:
      - Definition:
          Content: "struct BGCntReg {\n	union {\n		struct {\n			u16 Priority:2;\n			u16 CharBase:4;\n			u16 Mosaic:1;\n			u16 ColorPaletteMode:1;\n			u16 ScreenBase:5;\n			u16 Bit12:1;\n			u16 ScreenSize:2;\n		};\n		u16 RawBits;\n	};\n};\nstatic_assert(sizeof(BGCntReg) == sizeof(u16));"
        Methods:
      - Definition:
          Content: "struct LCDIO\n{\n  BGCntReg BG0CNT;\n  BGCntReg BG1CNT;\n  BGCntReg BG2CNT;\n  BGCntReg BG3CNT;\n  u16 BG0HOFS;\n  u16 BG0VOFS;\n  u16 BG1HOFS;\n  u16 BG1VOFS;\n  u16 BG2HOFS;\n  u16 BG2VOFS;\n  u16 BG3HOFS;\n  u16 BG3VOFS;\n  G2DBGTransformRegs BG2Transform;\n  G2DBGTransformRegs BG3Transform;\n  u16 WIN0H;\n  u16 WIN1H;\n  u16 WIN0V;\n  u16 WIN1V;\n  u16 WININ;\n  u16 WINOUT;\n  u32 MOSAIC;\n  G2DBlendRegs BLD;\n};\n"
        Methods:
      - Definition:
          Content: "struct StdPalette\n{\n  GXColor Colors[256];\n};\n"
        Methods:
      - Definition:
          Content: "struct DispCntReg {\n	union {\n		struct {\n			u32 BGMode:3;\n			u32 IsBG03D:1;\n			u32 TileOBJMapping:1;\n			u32 BitmapOBJSize:1;\n			u32 BitmapOBJMapping:1;\n			u32 ForcedBlank:1;\n			u32 DispBGs:5;\n			u32 DispWnd0:1;\n			u32 DispWnd1:1;\n			u32 DispObjWnd:1;\n			u32 DisplayMode:2;\n			u32 VRAMBlock:2;\n			u32 TileOBJBoundary:2;\n			u32 BitmapOBJBoundary:1;\n			u32 ProcessOBJInHBlank:1;\n			u32 CharBase:3;\n			u32 ScreenBase:3;\n			u32 EnableBGExtPlt;\n			u32 EnableOBJExtPlt;\n		};\n		u32 RawBits;\n	};\n};"
        Methods:
      - Definition:
          Content: "struct PowCntReg {\n	union {\n		struct {\n			u16 BothLCDs:1;\n			u16 Engine2DA:1;\n			u16 RenderingEngine:1;\n			u16 GeometryEngine:1;\n			u16 _NotUsed:5;\n			u16 Engine2DB:1;\n			u16 _NotUsed2:5;\n			u16 DispLayout:1;		\n		};\n		u16 RawBits;\n	};\n};"
        Methods:
  - Path: nds/hid.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
      - Definition:
          Content: "enum InputButton\n{\n  KEY_A = 0x1,\n  KEY_B = 0x2,\n  KEY_SELECT = 0x4,\n  KEY_START = 0x8,\n  KEY_RIGHT = 0x10,\n  KEY_LEFT = 0x20,\n  KEY_UP = 0x40,\n  KEY_DOWN = 0x80,\n  KEY_R = 0x100,\n  KEY_L = 0x200,\n  KEY_X = 0x400,\n  KEY_Y = 0x800,\n  KEY_TOUCH = 0x1000,\n  KEY_LID = 0x2000,\n};\n"
        DefineFlagOps: true
    Structures:
  - Path: nds/hw.h
    Includes:
    Typedefs:
    GVars:
    Functions:
      - Content: b32 __fastcall hw_isDSi()
    Enums:
    Structures:
  - Path: nds/irq.h
    Includes:
    Typedefs:
    GVars:
      - Content: volatile IRQFlagReg IE;
      - Content: volatile IRQFlagReg IF;
      - Content: volatile int IME;
    Functions:
      - Content: void __fastcall irq_waitFor(b32 clear, CPUInterruptBit mask)
    Enums:
      - Definition:
          Content: "enum CPUInterrupt\n{\n  CPU_INTR_VBLANK = 0x0,\n  CPU_INTR_HBLANK = 0x1,\n  CPU_INTR_VCOUNT_MATCH = 0x2,\n  CPU_INTR_TIMER_0 = 0x3,\n  CPU_INTR_TIMER_1 = 0x4,\n  CPU_INTR_TIMER_2 = 0x5,\n  CPU_INTR_TIMER_3 = 0x6,\n  CPU_INTR_NDS7_RTC = 0x7,\n  CPU_INTR_DMA_0 = 0x8,\n  CPU_INTR_DMA_1 = 0x9,\n  CPU_INTR_DMA_2 = 0xA,\n  CPU_INTR_DMA_3 = 0xB,\n  CPU_INTR_KEYPAD = 0xC,\n  CPU_INTR_GBA_SLOT = 0xD,\n  CPU_INTR_IPC_SYNC = 0xE,\n  CPU_INTR_IPC_SEND_FIFO_EMPTY = 0xF,\n  CPU_INTR_IPC_RECV_FIFO_NOT_EMPTY = 0x10,\n  CPU_INTR_CART_TRANSFER_DONE = 0x11,\n  CPU_INTR_CART_IREQ_MC = 0x12,\n  CPU_INTR_NDS9_GE_FIFO = 0x13,\n  CPU_INTR_NDS7_SCREEN_UNFOLD = 0x14,\n  CPU_INTR_NDS7_SPI = 0x15,\n  CPU_INTR_NDS7_WIFI = 0x16,\n  CPU_INTR_NDS9_MAX = 0x16,\n  CPU_INTR_DSI9_CAMERA = 0x17,\n  CPU_INTR_DSI9_UNDOC = 0x18,\n  CPU_INTR_DSI_IREQ_MC_2 = 0x19,\n  CPU_INTR_DSI_DMA_EX_0 = 0x1A,\n  CPU_INTR_DSI_DMA_EX_1 = 0x1B,\n  CPU_INTR_DSI_DMA_EX_2 = 0x1C,\n  CPU_INTR_DSI_DMA_EX_3 = 0x1D,\n};\n"
        DefineFlagOps: false
      - Definition:
          Content: "enum CPUInterruptBit\n{\n  CPU_INTRB_VBLANK = 0x1,\n  CPU_INTRB_HBLANK = 0x2,\n  CPU_INTRB_VCOUNT_MATCH = 0x4,\n  CPU_INTRB_TIMER_0 = 0x8,\n  CPU_INTRB_TIMER_1 = 0x10,\n  CPU_INTRB_TIMER_2 = 0x20,\n  CPU_INTRB_TIMER_3 = 0x40,\n  CPU_INTRB_NDS7_RTC = 0x80,\n  CPU_INTRB_DMA_0 = 0x100,\n  CPU_INTRB_DMA_1 = 0x200,\n  CPU_INTRB_DMA_2 = 0x400,\n  CPU_INTRB_DMA_3 = 0x800,\n  CPU_INTRB_KEYPAD = 0x1000,\n  CPU_INTRB_GBA_SLOT = 0x2000,\n  CPU_INTRB_IPC_SYNC = 0x10000,\n  CPU_INTRB_IPC_SEND_FIFO_EMPTY = 0x20000,\n  CPU_INTRB_IPC_RECV_FIFO_NOT_EMPTY = 0x40000,\n  CPU_INTRB_CART_TRANSFER_DONE = 0x80000,\n  CPU_INTRB_CART_IREQ_MC = 0x100000,\n  CPU_INTRB_NDS9_GE_FIFO = 0x200000,\n  CPU_INTRB_NDS7_SCREEN_UNFOLD = 0x400000,\n  CPU_INTRB_NDS7_SPI = 0x800000,\n  CPU_INTRB_NDS7_WIFI = 0x1000000,\n  CPU_INTRB_DSI9_CAMERA = 0x2000000,\n  CPU_INTRB_DSI9_UNDOC = 0x4000000,\n  CPU_INTRB_DSI_IREQ_MC_2 = 0x8000000,\n  CPU_INTRB_DSI_DMA_EX_0 = 0x10000000,\n  CPU_INTRB_DSI_DMA_EX_1 = 0x20000000,\n  CPU_INTRB_DSI_DMA_EX_2 = 0x40000000,\n  CPU_INTRB_DSI_DMA_EX_3 = 0x80000000,\n};\n"
        DefineFlagOps: true
    Structures:
      - Definition:
          Content: "struct IRQFlagReg {\n	union {\n		struct {\n			u32 VBlank:1;\n			u32 HBlank:1;\n			u32 VCountMatch:1;\n			u32 Timer0:1;\n			u32 Timer1:1;\n			u32 Timer2:1;\n			u32 Timer3:1;\n			u32 RTC:1;\n			u32 DMA0:1;\n			u32 DMA1:1;\n			u32 DMA2:1;\n			u32 DMA3:1;\n			u32 Keypad:1;\n			u32 GBASlot:1;\n			u32 IPCSync:1;\n			u32 IPCSendEmpty:1;\n			u32 IPCRecvNotEmpty:1;\n			u32 CartTransferDone:1;\n			u32 CartIreqMC:1;\n			u32 GEFIFO:1;\n			u32 ScreenUnfold:1;\n			u32 SPI:1;\n			u32 WiFi:1;\n		};\n		CPUInterruptBit RawBits;\n	};\n};"
        Methods:
  - Path: nds/mem.h
    Includes:
    Typedefs:
    GVars:
    Functions:
      - Content: void __fastcall sys_memset16(u16 value, void *ptr, size_t size)
      - Content: void *__fastcall sys_memcpy16(const void *src, void *dst, size_t size)
      - Content: void __fastcall sys_memset32(u32 value, void *ptr, size_t size)
      - Content: void *__fastcall sys_memcpy32(const void *src, void *dest, size_t size)
      - Content: void __fastcall sys_memcpy_volatile(const void *src, volatile int *dest, size_t size)
      - Content: void __fastcall sys_memset32_fast(u32 value, const void *ptr, size_t size)
      - Content: void *__fastcall sys_memcpy32_fast(const void *src, void *dst, u32 size)
      - Content: void __fastcall sys_memset(const void *ptr, u8 value, size_t size)
      - Content: void __fastcall sys_memset_fast(const void *ptr, u8 value, size_t size)
      - Content: const void *__fastcall sys_memcpy(const void *src, void *dst, u32 size)
      - Content: s32 __fastcall sys_memcmp(const void *src1, const void *src2, size_t size)
      - Content: const void *__fastcall sys_memcpy_fast(const void *src, void *dst, size_t size)
      - Content: const void *__fastcall sys_memcpy_ex(const void *src, void *dst, s32 size)
    Enums:
    Structures:
  - Path: nds/overlay.h
    Includes:
    Typedefs:
      - Content: typedef void (*OvlStaticInitializer)(void);
    GVars:
    Functions:
      - Content: b32 __fastcall sys_load_overlay(int cpu, u32 ovlId)
      - Content: b32 __fastcall sys_unload_overlay(int cpu, u32 ovlId)
      - Content: b32 __fastcall sys_read_overlay_header(OvlLoaderState *dest, int cpu, u32 ovlId)
      - Content: void __fastcall sys_prepare_overlay_area(OvlLoaderState *ovl)
      - Content: void __fastcall sys_get_overlay_file_id(FSFileID *dest, OvlLoaderState *ovl)
      - Content: u32 __fastcall sys_get_overlay_size(OvlLoaderState *ovl)
      - Content: b32 __fastcall sys_mount_overlay(OvlLoaderState *ovl)
      - Content: b32 __fastcall sys_unmount_overlay(OvlLoaderState *ovl)
      - Content: void __fastcall sys_start_overlay(OvlLoaderState *ovl)
      - Content: void __fastcall sys_call_ovl_dtors(OvlLoaderState *ovl)
    Enums:
      - Definition:
          CPPName: "nn::os::OverlayFlag"
          Content: "enum OverlayFlag {\n  OVLFLAG_COMPRESSED = 0x1000000,\n  OVLFLAG_SIGNED = 0x2000000,\n};"
        DefineFlagOps: false
    Structures:
      - Definition:
          CPPName: "nn::os::OverlayHeader"
          Content: "struct OvlHeader\n{\n  int OvlID;\n  char *MountAddress;\n  int MountSize;\n  int BSSSize;\n  OvlStaticInitializer *StaticInitStart;\n  OvlStaticInitializer *StaticInitEnd;\n  int FileID;\n  int Extra;\n};"
        Methods:
      - Definition:
          CPPName: "nn::os::Overlay"
          Content: "struct OvlLoaderState\n{\n  OvlHeader Header;\n  u32 Target;\n  u32 FileOffset;\n  u32 FileLength;\n};\n"
        Methods:
          - CPPName: LoadHeader
            CName: sys_read_overlay_header
            IsStatic: false
          - CPPName: Mount
            CName: sys_mount_overlay
            IsStatic: false
          - CPPName: Unmount
            CName: sys_unmount_overlay
            IsStatic: false
          - CPPName: Start
            CName: sys_start_overlay
            IsStatic: false
          - CPPName: CallDtors
            CName: sys_call_ovl_dtors
            IsStatic: false
          - CPPName: GetCodeSize
            CName: sys_get_overlay_size
            IsStatic: false
          - CPPName: GetFileID
            CName: sys_get_overlay_file_id
            IsStatic: false
            ParamSwizzle: 1/0
          - CPPName: PrepareArea
            CName: sys_prepare_overlay_area
            IsStatic: false
          - CPPName: Load
            CName: sys_load_overlay
            IsStatic: true
          - CPPName: Unload
            CName: sys_unload_overlay
            IsStatic: true
  - Path: nds/snd.h
    Includes:
    Typedefs:
    GVars:
    Functions:
      - Content: SoundChannel *__fastcall sndLockChannel(u32 channelNo)
      - Content: void __fastcall sndReleaseChannel(SoundChannel *channel)
      - Content: b32 __fastcall sndPlaySamples(SoundChannel *channel, SoundEncoding codec, void *sampleData, b32 looping, s32 loopStart, s32 sampleCount, s32 sampleRate, u32 volume, s32 speed, u32 pan)
      - Content: void __fastcall sndStopChannel(SoundChannel *channel)
      - Content: void __fastcall sndSetChannelVolume(SoundChannel *chan, u8 volume)
      - Content: void __fastcall sndSetChannelSpeed(SoundChannel *chan, s32 speed)
      - Content: b32 __fastcall sndIsChannelPlaying(SoundChannel *channel)
    Enums:
      - Definition:
          Content: "enum SoundEncoding\n{\n  SNDENC_PCM8 = 0x0,\n  SNDENC_PCM16 = 0x1,\n  SNDENC_ADPCM = 0x2,\n};\n"
        DefineFlagOps: false
    Structures:
      - Definition:
          Content: "struct SoundChannel\n{\n  u32 ChannelNo;\n  s32 SampleRate;\n  b32 IsPlaying;\n  u32 field_C;\n  u32 PacketIndex;\n};\n"
        Methods:
  - Path: nds/svc.h
    Includes:
    Typedefs:
    GVars:
    Functions:
      - Content: void __fastcall SVC_WaitByLoop(u32 delay)
      - Content: void __fastcall SVC_SoftReset()
    Enums:
    Structures:
  - Path: nds/timer.h
    Includes:
    Typedefs:
    GVars:
      - Content: volatile u16 TM0CNT_L;
      - Content: volatile TimerCntReg TM0CNT_H;
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct TimerCntReg {\n	u16 Scale:2;\n	u16 Cascade:1;\n	u16 _NotUsed:3;\n	u16 IRQEnabled:1;\n	u16 Start:1;\n};"
        Methods:
  - Path: ns/cmn/res/ResBase.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          CPPName: "ns::cmn::res::Header"
          Content: "struct NNSCmnResHeader\n{\n  s32 Magic;\n  s16 BOM;\n  u16 Version;\n  u32 FileSize;\n  u16 HeaderSize;\n  u16 BlockCount;\n};"
        Methods:
      - Definition:
          CPPName: "ns::cmn::res::BlockHeader"
          Content: "struct NNSCmnResBlockHeader\n{\n  u32 Magic;\n  u32 BlockSize;\n};"
        Methods:
  - Path: ns/g2d/res/G2DResData.h
    Includes:
      - ns/cmn/res/ResBase.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          CPPName: "ns::g2d::res::Data"
          Content: "struct NNSG2DResData\n{\n  NNSCmnResHeader Header;\n  char Content[];\n};\n"
        Methods:
  - Path: ns/g2d/res/ResCharacter.h
    Includes:
      - ns/cmn/res/ResBase.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          CPPName: "ns::g2d::res::CharHeader"
          Content: "struct NNSG2DResCharHeader\n{\n  u16 TileHeight;\n  u16 TileWidth;\n  u32 PixelFormat;\n  u16 field_8;\n  u16 field_A;\n  u32 field_C;\n  u32 TileDataSize;\n  char *TileDataOffs;\n};\n"
        Methods:
      - Definition:
          CPPName: "ns::g2d::res::CharBlock"
          Content: "struct NNSG2DResCharBlock\n{\n  NNSCmnResBlockHeader BlockHeader;\n  NNSG2DResCharHeader Header;\n};\n"
        Methods:
  - Path: ns/g2d/res/ResPalette.h
    Includes:
      - ns/cmn/res/ResBase.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          CPPName: "ns::g2d::res::PaletteHeader"
          Content: "struct NNSG2DResPaletteHeader\n{\n  u32 ColorDepth;\n  u32 BaseDataOffs;\n  u32 RawDataSize;\n  char *RawDataOffset;\n  char RawData[];\n};\n"
        Methods:
      - Definition:
          CPPName: "ns::g2d::res::PaletteBlock"
          Content: "struct NNSG2DResPaletteBlock\n{\n  NNSCmnResBlockHeader BlockHeader;\n  NNSG2DResPaletteHeader PLTTHeader;\n};\n"
        Methods:
  - Path: ns/g3d/Animation.h
    Includes:
      - ns/g3d/res/ResAnimation.h
      - ns/g3d/res/ResTexture.h
      - math/fixed.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          CPPName: "ns::g3d::Animation"
          Content: "struct NNSG3DAnimation\n{\n  fx32 NowFrame;\n  fx32 dword4;\n  NNSG3DResAnm *ResAnimation;\n  void *VTable;\n  NNSG3DAnimation *Next;\n  NNSG3DResTex *Textures;\n  u8 Priority;\n  u8 TargetCount;\n  u16 TargetInfo[1];\n};\n"
        Methods:
  - Path: ns/g3d/Model.h
    Includes:
      - ns/g3d/res/ResModel.h
      - ns/g3d/Animation.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          CPPName: "ns::g3d::Model"
          Content: "struct NNSG3DModel\n{\n  u32 Flags;\n  NNSG3DResMdl *ResModel;\n  NNSG3DAnimation *MatAnmList;\n  void *GetMatAnmValueFunc;\n  NNSG3DAnimation *SklAnmList;\n  void *GetSklAnmValueFunc;\n  NNSG3DAnimation *VisAnmList;\n  void *GetVisAnmValueFunc;\n  void *UserCallbackFunc;\n  u8 UserCallbackTriggerID;\n  u8 UserCallbackState;\n  u8 field_26;\n  u8 field_27;\n  void *RenderStartCallback;\n  u32 field_2C;\n  u8 *OverrideRenderCommandPtr;\n  void *JointStates;\n  NNSG3DMaterial *MaterialStates;\n  u32 MatAnmTargetBits[2];\n  u32 SklAnmTargetBits[2];\n  u32 VisAnmTargetBits[2];\n};\n"
        Methods:
      - Definition:
          CPPName: "ns::g3d::Material"
          Content: "struct NNSG3DMaterial\n{\n  u32 Flags;\n  u32 DifAmb;\n  u32 SpeEmi;\n  u32 PolyAttr;\n  u32 TexImageParam;\n  u32 PaletteBase;\n  fx32 ScaleU;\n  fx32 ScaleV;\n  fx16 RotSin;\n  fx16 RotCos;\n  fx32 TransU;\n  fx32 TransV;\n  u16 TexWidth;\n  u16 TexHeight;\n  u32 dword30;\n  u32 dword34;\n};\n"
        Methods:
  - Path: ns/g3d/res/G3DResData.h
    Includes:
      - ns/g3d/res/ResTexture.h
      - ns/cmn/res/ResBase.h
    Typedefs:
    GVars:
    Functions:
      - Content: NNSG3DResTex* NNS_G3DResGetTexBlock(NNSG3DResData *res)
    Enums:
    Structures:
      - Definition:
          CPPName: "ns::g3d::res::Data"
          Content: "struct NNSG3DResData\n{\n  NNSCmnResHeader Header;\n  u32 BlockOffsets[];\n};\n"
        Methods:
          - CPPName: GetTexBlock
            CName: NNS_G3DResGetTexBlock
            IsStatic: false
  - Path: ns/g3d/res/PATRICIATree.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          CPPName: "ns::g3d::res::TreeNode"
          Content: "struct NNSPatriciaTreeNode\n{\n  u8 RefBit;\n  u8 LeftNodeIdx;\n  u8 RightNodeIdx;\n  u8 DataEntryNo;\n};"
        Methods:
      - Definition:
          CPPName: "ns::g3d::res::TreeEntries"
          Content: "struct NNSPatriciaTreeEntries\n{\n  u16 EntrySize;\n  u16 NamesOffset;\n  char Entries[];\n};"
        Methods:
      - Definition:
          CPPName: "ns::g3d::res::Tree"
          Content: "struct NNSPatriciaTree\n{\n  u8 field_0;\n  u8 EntryCount;\n  u16 Size;\n  u16 NodesOffset;\n  u16 EntriesOffset;\n  NNSPatriciaTreeNode Nodes[];\n};"
        Methods:
  - Path: ns/g3d/res/ResAnimation.h
    Includes:
      - ns/g3d/res/PATRICIATree.h
      - ns/cmn/res/ResBase.h
      - ns/g3d/res/G3DResData.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          CPPName: "ns::g3d::res::Animation"
          Content: "struct NNSG3DResAnm\n{\n  u8 TargetID;\n  u8 field_1;\n  u16 TypeID;\n  u16 FrameCount;\n  u16 TargetCount;\n};\n"
        Methods:
      - Definition:
          CPPName: "ns::g3d::res::AnimationBlock"
          Content: "struct NNSG3DResAnmBlock\n{\n  NNSCmnResBlockHeader BlockHeader;\n  NNSPatriciaTree AnimationTree;\n};\n"
        Methods:
  - Path: ns/g3d/res/ResModel.h
    Includes:
      - ns/g3d/res/PATRICIATree.h
      - ns/cmn/res/ResBase.h
      - ns/g3d/res/G3DResData.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          CPPName: "ns::g3d::res::ModelInfo"
          Content: "struct NNSG3DResMdlInfo\n{\n  u8 field_0;\n  u8 field_1;\n  u8 field_2;\n  u8 JointCount;\n  u8 MaterialCount;\n  u8 MeshCount;\n  u8 MtxStackTop;\n  u8 field_7;\n  fx32 GlobalScale;\n  fx32 GlobalScaleInv;\n  u16 VertexCount;\n  u16 FaceCount;\n  u16 TriCount;\n  u16 QuadCount;\n  VecFx16 BBoxMin;\n  VecFx16 BBoxDim;\n  fx32 BBoxScale;\n  fx32 BBoxScaleInv;\n};\n"
        Methods:
      - Definition:
          CPPName: "ns::g3d::res::Model"
          Content: "struct NNSG3DResMdl\n{\n  u32 Size;\n  u32 RenderCmdOffset;\n  u32 MaterialsOffset;\n  u32 MeshesOffset;\n  u32 IBPMatrixOffset;\n  NNSG3DResMdlInfo Info;\n  NNSPatriciaTree JointTree;\n};\n"
        Methods:
      - Definition:
          CPPName: "ns::g3d::res::ModelBlock"
          Content: "struct NNSG3DResMdlBlock\n{\n  NNSCmnResBlockHeader BlockHeader;\n  NNSPatriciaTree ModelTree;\n};\n"
        Methods:
      - Definition:
          CPPName: "ns::g3d::res::Material"
          Content: "struct NNSG3DResMaterial\n{\n  u16 field_0;\n  u16 Size;\n  u32 DifAmb;\n  u32 SpeEmi;\n  u32 PolyAttr;\n  u32 PolyAttrMask;\n  u32 TexImageParam;\n  u32 TexImageParamMask;\n  u16 PaletteBase;\n  u16 Flags;\n  u16 TexWidth;\n  u16 TexHeight;\n  fx32 field_24;\n  fx32 field_28;\n  u8 Transform[];\n};\n"
        Methods:
  - Path: ns/g3d/res/ResTexture.h
    Includes:
      - ns/g3d/res/PATRICIATree.h
      - ns/g3d/res/G3DResData.h
      - ns/cmn/res/ResBase.h
    Typedefs:
    GVars:
    Functions:
      - Content: void NNS_G3DResTexUploadTex(NNSG3DResTex *tex, int a2)
    Enums:
    Structures:
      - Definition:
          CPPName: "ns::g3d::res::TexHeader"
          Content: "struct NNSG3DResTexHeader\n{\n  u32 RTVRAMAddr;\n  u16 ImageSize;\n  u16 NameTreeOffs;\n  u16 Flags;\n  u16 _padFlags;\n  u32 ImageOffset;\n};\n"
        Methods:
      - Definition:
          CPPName: "ns::g3d::res::TexCmprHeader"
          Content: "struct NNSG3DResTexCmprHeader\n{\n  u32 RTVRAMAddr;\n  u16 ImageSize;\n  u16 NameTreeOffs;\n  u16 Flags;\n  u16 _padFlags;\n  u32 ImageOffset;\n  u32 IndexDataOffset;\n};\n"
        Methods:
      - Definition:
          CPPName: "ns::g3d::res::PaletteHeader"
          Content: "struct NNSG3DResPaletteHeader\n{\n  u32 RTVRAMAddr;\n  u16 ImageSize;\n  u16 Flags;\n  u16 NameTreeOffs;\n  u16 _padNameTreeOffs;\n  u32 ImageOffset;\n};\n"
        Methods:
      - Definition:
          CPPName: "ns::g3d::res::TexData"
          Content: "struct NNSG3DResTex\n{\n  NNSCmnResBlockHeader BlockHeader;\n  NNSG3DResTexHeader TexHeader;\n  NNSG3DResTexCmprHeader CompressedTexHeader;\n  NNSG3DResPaletteHeader PaletteHeader;\n  NNSPatriciaTree TextureTree;\n};"
        Methods:
          - CPPName: Upload
            CName: NNS_G3DResTexUploadTex
            IsStatic: false
  - Path: pml/mail.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct MailData\n{\n  u32 TID;\n  u8 TrainerGender;\n  u8 Region;\n  u8 GameVersion;\n  u8 byte7;\n  char StringContent[16];\n  __int16 field_18;\n  __int16 field_1A;\n  __int16 field_1C;\n  u16 word1E;\n  int field_20;\n  int field_24;\n  int field_28;\n  int field_2C;\n  int field_30;\n  int field_34;\n};"
        Methods:
  - Path: pml/poke_data.h
    Includes:
      - pml/poke_param.h
      - pml/mail.h
    Typedefs:
    GVars:
    Functions:
      - Content: u32 __fastcall PML_PkmGetParam(BoxPkm *pPkm, PkmField field, u32 data)
      - Content: void __fastcall PML_PkmSetParam(BoxPkm *pPkm, PkmField field, u32 data)
    Enums:
    Structures:
      - Definition:
          CPPName: "pml::detail::PokeBufferChunk"
          Content: "struct PkmBufferChunk\n{\n  char RawData[32];\n};\n"
        Methods:
      - Definition:
          CPPName: "pml::detail::PokeBuffer"
          Content: "struct PkmBuffer\n{\n  PkmBufferChunk Chunks[4];\n};\n"
        Methods:
      - Definition:
          CPPName: "pml::PokeData"
          Content: "struct BoxPkm\n{\n  u32 pid;\n  u16 SanityFlags;\n  u16 checksum;\n  PkmBuffer ContentBuffer;\n};"
        Methods:
      - Definition:
          CPPName: "pml::detail::PokeBlock0"
          Content: "struct BoxPkmBlock0\n{\n  u16 Species;\n  u16 HeldItem;\n  u32 TIDSID;\n  u32 Experience;\n  u8 Happiness;\n  u8 Ability;\n  u8 Markings;\n  u8 Region;\n  u8 EvHP;\n  u8 EvATK;\n  u8 EvDEF;\n  u8 EvSPE;\n  u8 EvSPA;\n  u8 EvSPD;\n  u8 ContestCool;\n  u8 ContestBeauty;\n  u8 ContestCute;\n  u8 ContestSmart;\n  u8 ContestTough;\n  u8 ContestSheen;\n  u32 Ribbons1;\n};\n"
        Methods:
      - Definition:
          CPPName: "pml::detail::PokeBlock1"
          Content: "struct BoxPkmBlock1\n{\n  u16 Moves[4];\n  u8 MovePPs[4];\n  u8 MovePPUpStages[4];\n  int IVBits;\n  int Ribbons2;\n  u8 GenderAndForme;\n  u8 Nature;\n  u16 HiddenAbilAndNPoke;\n  int dword1C;\n};\n"
        Methods:
      - Definition:
          CPPName: "pml::detail::PokeBlock2"
          Content: "struct BoxPkmBlock2\n{\n  wchar_t Nickname[11];\n  u8 unsigned___int816;\n  u8 OriginGame;\n  u64 Ribbons3;\n};\n"
        Methods:
      - Definition:
          CPPName: "pml::detail::PokeBlock3"
          Content: "struct BoxPkmBlock3\n{\n  __int16 OTName[8];\n  u8 HatchDateYear;\n  u8 HatchDateMonth;\n  u8 HatchDateDay;\n  u8 MetYear;\n  u8 MetMonth;\n  u8 MetDay;\n  u16 HatchLocation;\n  u16 MetLocation;\n  u8 Pokerus;\n  u8 Pokeball;\n  u8 MetLevelAndOTGender;\n  u8 CatchTerrainTileType;\n  u8 unsigned___int81E;\n  u8 PokeStarFame;\n};\n"
        Methods:
  - Path: pml/poke_param.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
      - Definition:
          CPPName: "pml::PokeParam"
          Content: "enum PkmField\n{\n  PF_PID = 0x0,\n  PF_Species = 0x5,\n  PF_Item = 0x6,\n  PF_IdSet = 0x7,\n  PF_Experience = 0x8,\n  PF_Happiness = 0x9,\n  PF_Ability = 0xA,\n  PF_Markings = 0xB,\n  PF_Region = 0xC,\n  PF_EvHP = 0xD,\n  PF_EvATK = 0xE,\n  PF_EvDEF = 0xF,\n  PF_EvSPE = 0x10,\n  PF_EvSPA = 0x11,\n  PF_EvSPD = 0x12,\n  PF_ContestCool = 0x13,\n  PF_ContestBeauty = 0x14,\n  PF_ContestCute = 0x15,\n  PF_ContestSmart = 0x16,\n  PF_ContestTough = 0x17,\n  PF_ContestSheen = 0x18,\n  PF_RibbonChampionSinnoh = 0x19,\n  PF_RibbonAbility = 0x1A,\n  PF_RibbonAbilityGreat = 0x1B,\n  PF_RibbonAbilityDouble = 0x1C,\n  PF_RibbonAbilityMulti = 0x1D,\n  PF_RibbonAbilityPair = 0x1E,\n  PF_RibbonAbilityWorld = 0x1F,\n  PF_RibbonAlert = 0x20,\n  PF_RibbonShock = 0x21,\n  PF_RibbonDowncast = 0x22,\n  PF_RibbonCareless = 0x23,\n  PF_RibbonRelax = 0x24,\n  PF_RibbonSnooze = 0x25,\n  PF_RibbonSmile = 0x26,\n  PF_RibbonGorgeous = 0x27,\n  PF_RibbonRoyal = 0x28,\n  PF_RibbonGorgeousRoyal = 0x29,\n  PF_RibbonFootprint = 0x2A,\n  PF_RibbonRecord = 0x2B,\n  PF_RibbonEvent = 0x2C,\n  PF_RibbonLegend = 0x2D,\n  PF_RibbonChampionWorld = 0x2E,\n  PF_RibbonBirthday = 0x2F,\n  PF_RibbonSpecial = 0x30,\n  PF_RibbonSouvenir = 0x31,\n  PF_RibbonWishing = 0x32,\n  PF_RibbonClassic = 0x33,\n  PF_RibbonPremier = 0x34,\n  PF_Ribbon0x35 = 0x35,\n  PF_Move1 = 0x36,\n  PF_Move2 = 0x37,\n  PF_Move3 = 0x38,\n  PF_Move4 = 0x39,\n  PF_Move1PP = 0x3A,\n  PF_Move2PP = 0x3B,\n  PF_Move3PP = 0x3C,\n  PF_Move4PP = 0x3D,\n  PF_Move1PPUp = 0x3E,\n  PF_Move2PPUp = 0x3F,\n  PF_Move3PPUp = 0x40,\n  PF_Move4PPUp = 0x41,\n  PF_Move1PPMax = 0x42,\n  PF_Move2PPMax = 0x43,\n  PF_Move3PPMax = 0x44,\n  PF_Move4PPMax = 0x45,\n  PF_IvHP = 0x46,\n  PF_IvATK = 0x47,\n  PF_IvDEF = 0x48,\n  PF_IvSPE = 0x49,\n  PF_IvSPA = 0x4A,\n  PF_IvSPD = 0x4B,\n  PF_IsEgg = 0x4C,\n  PF_RibbonG3Cool = 0x4D,\n  PF_RibbonG3CoolSuper = 0x4E,\n  PF_RibbonG3CoolHyper = 0x4F,\n  PF_RibbonG3CoolMaster = 0x50,\n  PF_RibbonG3Beauty = 0x51,\n  PF_RibbonG3BeautySuper = 0x52,\n  PF_RibbonG3BeautyHyper = 0x53,\n  PF_RibbonG3BeautyMaster = 0x54,\n  PF_RibbonG3Cute = 0x55,\n  PF_RibbonG3CuteSuper = 0x56,\n  PF_RibbonG3CuteHyper = 0x57,\n  PF_RibbonG3CuteMaster = 0x58,\n  PF_RibbonG3Smart = 0x59,\n  PF_RibbonG3SmartSuper = 0x5A,\n  PF_RibbonG3SmartHyper = 0x5B,\n  PF_RibbonG3SmartMaster = 0x5C,\n  PF_RibbonG3Tough = 0x5D,\n  PF_RibbonG3ToughSuper = 0x5E,\n  PF_RibbonG3ToughHyper = 0x5F,\n  PF_RibbonG3ToughMaster = 0x60,\n  PF_RibbonChampionHoenn = 0x61,\n  PF_RibbonWinning = 0x62,\n  PF_RibbonVictory = 0x63,\n  PF_RibbonArtist = 0x64,\n  PF_RibbonEffort = 0x65,\n  PF_RibbonChampionBattle = 0x66,\n  PF_RibbonChampionRegional = 0x67,\n  PF_RibbonChampionNational = 0x68,\n  PF_RibbonCountry = 0x69,\n  PF_RibbonNational = 0x6A,\n  PF_RibbonEarth = 0x6B,\n  PF_RibbonWorld = 0x6C,\n  PF_FatefulEncounter = 0x6D,\n  PF_Sex = 0x6E,\n  PF_Forme = 0x6F,\n  PF_Nature = 0x70,\n  PF_IsHiddenAbility = 0x71,\n  PF_NicknameStrBuf = 0x73,\n  PF_NicknameRaw = 0x74,\n  PF_HasNickname = 0x75,\n  PF_MetGameVersion = 0x77,\n  PF_RibbonG4Cool = 0x78,\n  PF_RibbonG4CoolGreat = 0x79,\n  PF_RibbonG4CoolUltra = 0x7A,\n  PF_RibbonG4CoolMaster = 0x7B,\n  PF_RibbonG4Beauty = 0x7C,\n  PF_RibbonG4BeautyGreat = 0x7D,\n  PF_RibbonG4BeautyUltra = 0x7E,\n  PF_RibbonG4BeautyMaster = 0x7F,\n  PF_RibbonG4Cute = 0x80,\n  PF_RibbonG4CuteGreat = 0x81,\n  PF_RibbonG4CuteUltra = 0x82,\n  PF_RibbonG4CuteMaster = 0x83,\n  PF_RibbonG4Smart = 0x84,\n  PF_RibbonG4SmartGreat = 0x85,\n  PF_RibbonG4SmartUltra = 0x86,\n  PF_RibbonG4SmartMaster = 0x87,\n  PF_RibbonG4Tough = 0x88,\n  PF_RibbonG4ToughGreat = 0x89,\n  PF_RibbonG4ToughUltra = 0x8A,\n  PF_RibbonG4ToughMaster = 0x8B,\n  PF_Ribbon0x8C = 0x8C,\n  PF_OTNameStrBuf = 0x8D,\n  PF_OTNameRaw = 0x8E,\n  PF_HatchDateYear = 0x8F,\n  PF_HatchDateMonth = 0x90,\n  PF_HatchDateDay = 0x91,\n  PF_MetYear = 0x92,\n  PF_MetMonth = 0x93,\n  PF_MetDay = 0x94,\n  PF_HatchLocation = 0x95,\n  PF_MetLocation = 0x96,\n  PF_Pokerus = 0x97,\n  PF_Pokeball = 0x98,\n  PF_MetLevel = 0x99,\n  PF_TrGender = 0x9A,\n  PF_GroundTile = 0x9B,\n  PF_StatusCond = 0x9D,\n  PF_Level = 0x9E,\n  PF_NowHP = 0xA0,\n  PF_MaxHP = 0xA1,\n  PF_ATK = 0xA2,\n  PF_DEF = 0xA3,\n  PF_SPE = 0xA4,\n  PF_SPA = 0xA5,\n  PF_SPD = 0xA6,\n  PF_Mail = 0xA7,\n  PF_IsSpeciesValid = 0xA9,\n  PF_LegalSpecies = 0xAB,\n  PF_IVsAll = 0xAC,\n  PF_IsNotNidoran = 0xAD,\n  PF_Type1 = 0xAE,\n  PF_Type2 = 0xAF,\n  PF_NicknameStrBufKeepFlags = 0xB0,\n  PF_NicknameRawKeepFlags = 0xB1,\n  PF_NPokemon = 0xB2,\n  PF_PokestarFame = 0xB3,\n};\n"
        DefineFlagOps: false
    Structures:
  - Path: pml/poke_party.h
    Includes:
      - pml/poke_data.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          CPPName: "pml::PartyPoke"
          Content: "struct PartyPkm\n{\n  BoxPkm Base;\n  u32 StatusCond;\n  u8 Level;\n  u8 field_8D;\n  u16 NowHP;\n  u16 MaxHP;\n  u16 ATK;\n  u16 DEF;\n  u16 SPE;\n  u16 SPA;\n  u16 SPD;\n  MailData Mail;\n  u32 field_D4;\n  u32 field_D8;\n};\n"
        Methods:
      - Definition:
          CPPName: "pml::Party"
          Content: "struct PokeParty\n{\n  u32 PokemonCapacity;\n  u32 PokemonCount;\n  PartyPkm Pokemon[6];\n  u8 PresentMemberBits;\n  u8 _pad1;\n  u16 _pad2;\n};\n"
        Methods:
  - Path: save/save_control.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct SaveControl\n{\n  u8 Status;\n  u8 SaveDataAlreadyPresent;\n  u8 byte2;\n  u8 field_3[9];\n  u32 field_C;\n  void *SaveData;\n  u32 SaveExtra[21];\n  u32 dword68;\n};\n"
        Methods:
  - Path: save/savedata_bag.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          CPPName: "savedata::BagItem"
          Content: "struct BagItem\n{\n  u16 ItemID;\n  u16 Count;\n};\n"
        Methods:
      - Definition:
          CPPName: "savedata::Bag"
          Content: "struct BagSaveData\n{\n  BagItem Items[310];\n  BagItem KeyItems[83];\n  BagItem TMsHMs[109];\n  BagItem Medicine[48];\n  BagItem Berries[64];\n  u32 FreeSpaceBits[21];\n};"
        Methods:
  - Path: save/savedata_box_accessor.h
    Includes:
      - save/save_control.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct BoxSaveAccessor\n{\n  SaveControl *m_SaveControl;\n};\n"
        Methods:
  - Path: save/savedata_eventwork.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct EventWorkSave\n{\n  u16 Works[431];\n  u8 FlagBytes[383];\n  u8 CanRespawnHiddenItems;\n};\n"
        Methods:
  - Path: save/savedata_player.h
    Includes:
      - field/field_spawn.h
      - math/fixed.h
      - math/vector.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct PlayerSaveData\n{\n  ZoneSpawnInfo NowSpawnZone;\n  ZoneSpawnInfo WarpRememberZoneInfoUnused;\n  ZoneSpawnInfo NextSpawnZone;\n  ZoneSpawnInfo EscapeRopeZone;\n  u16 ReturnZoneID;\n  u8 FlashFlag;\n  u8 Season;\n  u16 Weather;\n  u16 PlaceNameZoneID;\n  u32 EggCycleSubstepCounter;\n  u16 HappinessStepCounter;\n  u16 AbyssalRuinsStepCounter;\n  u16 ZoneID;\n  u16 _padZoneID;\n  VecFx32 Position;\n  u16 word90;\n  u16 word92;\n  u32 dword94;\n  fxangle RotationAngle;\n  u8 byte9A;\n  u8 SpecialState;\n  u8 PairID;\n  u8 PairActorUIDBackup;\n  u16 PairObjCode;\n  u16 PairSCRID;\n  u16 PairAllyTrID;\n  u16 StepCounter;\n  u16 _padStepCounter;\n};\n"
        Methods:
  - Path: save/savedata_unity_tower_state.h
    Includes:
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          Content: "struct UnityTowerState\n{\n  u8 FloorCountry;\n  u8 GuestCount;\n  u8 FloorNumber;\n  u8 field_3[5];\n  u8 VisitorIndices[5];\n  u8 field_D;\n  u16 field_E;\n};"
        Methods:
  - Path: system/game_context.h
    Includes:
      - gfl/core/gfl_procsys.h
    Typedefs:
    GVars:
    Functions:
      - Content: void __fastcall GCTX_ProcMgrQueueProc(int ovlId, const GameProcFunctions *vtbl, void *procData)
      - Content: void __fastcall GCTX_ProcMgrReplaceProc(int ovlId, const GameProcFunctions *vtbl, void *procData)
    Enums:
    Structures:
      - Definition:
          Content: "struct game::Context {\n};"
        Methods:
          - CPPName: StartProc
            CName: GCTX_ProcMgrQueueProc
            IsStatic: true
          - CPPName: ReplaceProc
            CName: GCTX_ProcMgrReplaceProc
            IsStatic: true
  - Path: system/game_data.h
    Includes:
      - pml/poke_party.h
      - field/field_player.h
      - field/field_eventdata_system.h
      - field/field_spawn.h
      - save/savedata_bag.h
      - field/field_status.h
      - battle/btl_result.h
      - field/field_mmodel_pair.h
      - field/field_mmodel.h
      - field/field_map_matrix.h
      - field/field_encount.h
      - field/field_bgm_info.h
      - save/savedata_eventwork.h
      - field/field_gimmick.h
      - save/savedata_unity_tower_state.h
      - save/savedata_box_accessor.h
      - field/field_sound_system.h
      - save/save_control.h
      - save/savedata_player.h
    Typedefs:
    GVars:
    Functions:
    Enums:
    Structures:
      - Definition:
          CPPName: "gsys::GameData"
          Content: "struct GameData\n{\n  SaveControl *m_SaveControl;\n  u8 field_4[272];\n  PlayerState m_PlayerState;\n  EventDataSystem *m_EventData;\n  PlayerSaveData *m_PlayerSaveData;\n  ZoneSpawnInfo *NowZoneSpawnInfo;\n  ZoneSpawnInfo *WarpRememberZoneInfo;\n  ZoneSpawnInfo *NextSpawnZone;\n  ZoneSpawnInfo *EscapeRopeZone;\n  ZoneSpawnInfo EntralinkParentSpawnInfo;\n  void *m_MyItemSave;\n  BagSaveData *m_Bag;\n  PokeParty *m_Party;\n  void *dword198;\n  BoxSaveAccessor *m_BoxSaveAccessor;\n  void *dword1A0;\n  BGMInfo *m_BGMInfo;\n  FieldActorSystem *m_ActorSystem;\n  EventWorkSave *m_EventWork;\n  MapMtxSys *m_MapMatrix;\n  FieldSoundSystem *m_FieldSoundSystem;\n  FieldStatus *m_FieldStatus;\n  BattleResult LastBattleResult;\n  u8 PauseEvents;\n  char field_1C1;\n  u8 field_1C2;\n  char field_1C3;\n  u32 TotalStepsTaken;\n  u8 NaturalSeason;\n  u8 NowWeather;\n  u8 LastFieldSubscreen;\n  u8 byte1CB;\n  u8 byte1CC;\n  char byte1CD;\n  u8 SkipFrameCounter;\n  u8 Is30FPSMode;\n  u16 field_1D0;\n  u8 ForceSeasonSync;\n  char field_1D3;\n  char field_1D4[76];\n  EncountState *m_EncountState;\n  char char224;\n  char gap225[3];\n  GimmickState m_GimmickState;\n  void *dword2BC;\n  void *dword2C0;\n  void *dword2C4;\n  void *dword2C8;\n  void *Calendar;\n  UnityTowerState m_UnityTowerState;\n  void *dword2E0;\n  void *dword2E4;\n  void *dword2E8;\n  void *dword2EC;\n  void *dword2F0;\n  FieldActorPairState *m_FieldFollow;\n  int ScriptPluginNo;\n  char gap2FC[12];\n  int LensFlareEntryIdx;\n  u8 LensFlareRequested;\n  char byte30D;\n  char gap30E[6];\n  void *dword314;\n};\n"
        Methods:
  - Path: system/game_event.h
    Includes:
      - system/gamesystem.h
    Typedefs:
      - CPPName: "gsys::EventCallback"
        Content: typedef GameEventReturnCode (*GameEventCallback)(GameEvent*, u32*, void*);
    GVars:
    Functions:
      - Content: GameEvent* GameEvent_Create(GameSystem *gsys, GameEvent *parentEvent, GameEventCallback callback, u32 evtDataSize)
      - Content: GameEvent* GameEvent_CreateOverlayDelegate(GameSystem *gsys, int ovlId, GameEventProvider eventConstructor, void *eventData)
      - Content: void* GameEvent_GetData(GameEvent *event)
      - Content: u32* GameEvent_GetStatePtr(GameEvent *event)
      - Content: GameEvent* GameEvent_GetReturnEvent(GameEvent *event)
      - Content: GameSystem* GameEvent_GetGameSystem(GameEvent *event)
      - Content: GameEventReturnCode GameEvent_RunCallback(GameEvent *event)
      - Content: void GameEvent_Transplant(GameEvent *event, GameEventCallback callback, u32 size)
      - Content: void GameEvent_Replace(GameEvent *nowEvent, GameEvent *event)
      - Content: void GameEvent_ChainNext(GameEvent *currentEvent, GameEvent *event)
      - Content: void GameEvent_Free(GameEvent *event)
    Enums:
      - Definition:
          CPPName: "gsys::EventReturnCode"
          Content: "enum GameEventReturnCode\n{\n  GAMEEVENT_CONTINUE = 0x0,\n  GAMEEVENT_DONE = 0x1,\n};"
        DefineFlagOps: false
    Structures:
      - Definition:
          CPPName: "gsys::Event"
          Content: "struct GameEvent\n{\n  GameEvent *ReturnEvent;\n  GameEventCallback Callback;\n  u32 EventState;\n  void *EventData;\n  GameSystem *m_GameSystem;\n};"
        Methods:
          - CPPName: GetData
            CName: GameEvent_GetData
            IsStatic: false
          - CPPName: GetStatePtr
            CName: GameEvent_GetStatePtr
            IsStatic: false
          - CPPName: GetReturnEvetn
            CName: GameEvent_GetReturnEvent
            IsStatic: false
          - CPPName: GetGameSystem
            CName: GameEvent_GetGameSystem
            IsStatic: false
          - CPPName: RunCallback
            CName: GameEvent_RunCallback
            IsStatic: false
          - CPPName: Transplant
            CName: GameEvent_Transplant
            IsStatic: false
          - CPPName: Replace
            CName: GameEvent_Replace
            IsStatic: false
          - CPPName: ChainNext
            CName: GameEvent_ChainNext
            IsStatic: false
          - CPPName: Create
            CName: GameEvent_Create
            IsStatic: true
          - CPPName: CreateOverlayDelegate
            CName: GameEvent_CreateOverlayDelegate
            IsStatic: true
  - Path: system/game_input.h
    Includes:
      - nds/hid.h
    Typedefs:
    GVars:
    Functions:
      - Content: InputButton __fastcall GCTX_HIDGetPressedKeys()
      - Content: InputButton __fastcall GCTX_HIDGetHeldKeys()
      - Content: InputButton __fastcall GCTX_HIDGetTypedKeys()
      - Content: void __fastcall GCTX_HIDSetUpdateRate(u8 updateRate)
      - Content: u8 __fastcall GCTX_HIDGetUpdateRate()
      - Content: void __fastcall GCTX_HIDChangeFPS(u8 fps)
      - Content: void __fastcall GCTX_HIDUpdate()
    Enums:
    Structures:
      - Definition:
          Content: "struct game::HID {\n};"
        Methods:
          - CPPName: GetPressedKeys
            CName: GCTX_HIDGetPressedKeys
            IsStatic: true
          - CPPName: GetHeldKeys
            CName: GCTX_HIDGetHeldKeys
            IsStatic: true
          - CPPName: GetTypedKeys
            CName: GCTX_HIDGetTypedKeys
            IsStatic: true
          - CPPName: GetUpdateRate
            CName: GCTX_HIDGetUpdateRate
            IsStatic: true
          - CPPName: SetUpdateRate
            CName: GCTX_HIDSetUpdateRate
            IsStatic: true
          - CPPName: ChangeFPS
            CName: GCTX_HIDChangeFPS
            IsStatic: true
          - CPPName: Update
            CName: GCTX_HIDUpdate
            IsStatic: true
    Macros: "#define HID_CHECK_KEY_PRESS(key) (GCTX_HIDGetPressedKeys() & (key))\n#define HID_CHECK_KEY_TYPED(key) (GCTX_HIDGetTypedKeys() & (key))\n#define HID_CHECK_KEY_DOWN(key) (GCTX_HIDGetHeldKeys() & (key))\n#define HID_CHECK_KEY_UP(key) (!HID_CHECK_KEY_DOWN(key))\n#define HID_CHECK_COMBO(combo) ((GCTX_HIDGetHeldKeys() & (combo)) == (combo))"
  - Path: system/gamesystem.h
    Includes:
      - system/game_event.h
      - gfl/core/gfl_procsys.h
      - math/vector.h
      - system/game_data.h
      - field/fieldmap.h
      - field/iss.h
    Typedefs:
      - Content: typedef struct GameEvent GameEvent; //forward declared for GameEventProvider
      - CPPName: "gsys::EventProvider"
        Content: "typedef GameEvent *(*GameEventProvider)(GameSystem *, void *);\n"
    GVars:
      - Content: "GameSystem* g_GameSystem;\n"
    Functions:
      - Content: void GSYS_Create(GameSystem *gsys, int heapId, void *gsysProcData)
      - Content: b32 GSYS_Update(GameSystem *gsys)
      - Content: void GSYS_SetEventProvider(GameSystem *result, GameEventProvider provider, void *providerData)
      - Content: b32 GSYS_FeedEventsFromProvider(GameSystem *gsys, GameEventProvider eventProvider, void *eventProviderData)
      - Content: b32 GSYS_UpdateEventRunningFlag(GameSystem *gsys)
      - Content: b32 GSYS_GetEventRunningFlag(GameSystem *gsys)
      - Content: GameProcManagerStatus GSYS_GetProcMgrState(GameSystem *gsys)
      - Content: void GSYS_QueueProc(GameSystem *sysBlk, int ovlId, GameProcFunctions *publics, void *procData)
      - Content: void GSYS_QueueProcAsEvent(GameEvent *parentEvent, int ovlId, GameProcFunctions *functions, void *procData)
      - Content: void GSYS_StartFieldmapProc(GameSystem *gsys)
      - Content: GameEvent* GSYS_GetNowEvent(GameSystem *gsys)
      - Content: void GSYS_SetNowEvent(GameSystem *gsys, GameEvent *event)
      - Content: b32 GSYS_CheckNowEvent(GameSystem *gsys)
      - Content: b32 GSYS_UpdateEvents(GameSystem *gsys)
      - Content: GameData* GSYS_GetGameData(GameSystem *gsys)
      - Content: Field* GSYS_GetField(GameSystem *gsys)
      - Content: void GSYS_SetField(GameSystem *gsys, Field *field)
      - Content: b32 GSYS_CheckField(GameSystem *gsys)
      - Content: void* GSYS_GetPlayerInfo(GameSystem *gsys)
      - Content: void* GSYS_GetLinkFestival(GameSystem *gsys)
      - Content: void* GSYS_GetGameCommSystem(GameSystem *gsys)
      - Content: void GSYS_Terminate(GameSystem *gsys)
      - Content: void GSYS_Free(GameSystem *gsys)
    Enums:
      - Definition:
          CPPName: "gsys::GameEntryPoint"
          Content: "enum GameEntryPoint\n{\n  GAME_ENTRYPOINT_OPENING = 0x0,\n  GAME_ENTRYPOINT_FIELD_CONTINUE = 0x1,\n  GAME_ENTRYPOINT_DEBUG = 0x2,\n};"
        DefineFlagOps: false
    Structures:
      - Definition:
          CPPName: "gsys::ProcData"
          Content: "struct GameSystemProcData\n{\n  GameEntryPoint EntryPointType;\n  VecFx32 SpawnPlayerPos;\n  u16 field_10;\n  u16 field_12;\n};"
        Methods:
      - Definition:
          CPPName: "gsys::GameSystem"
          Content: "struct GameSystem\n{\n  HeapID m_HeapID;\n  s16 _padHeapID;\n  GameSystemProcData *ProcData;\n  GameProcManager *GameSysProcManager;\n  GameProcManagerStatus ProcManagerState;\n  void *EventProvider;\n  void *EventProviderData;\n  GameEvent *CurrentEvent;\n  GameData *m_GameData;\n  Field *m_Field;\n  void *m_GameComm;\n  int field_28;\n  ISS *m_ISS;\n  void *m_LinkFestival;\n  char field_34;\n  u8 LastUpdateGameEventRunning;\n  u8 field_36;\n  char field_37;\n};\n"
        Methods:
          - CPPName: Update
            CName: GSYS_Update
            IsStatic: false
          - CPPName: SetEventProvider
            CName: GSYS_SetEventProvider
            IsStatic: false
          - CPPName: FeedEventsFromProvider
            CName: GSYS_FeedEventsFromProvider
            IsStatic: false
          - CPPName: UpdateEventRunningFlag
            CName: GSYS_UpdateEventRunningFlag
            IsStatic: false
          - CPPName: GetEventRunningFlag
            CName: GSYS_GetEventRunningFlag
            IsStatic: false
          - CPPName: GetProcMgrState
            CName: GSYS_GetProcMgrState
            IsStatic: false
          - CPPName: QueueProc
            CName: GSYS_QueueProc
            IsStatic: false
          - CPPName: QueueProcAsEvent
            CName: GSYS_QueueProcAsEvent
            IsStatic: true
          - CPPName: StartFieldmapProc
            CName: GSYS_StartFieldmapProc
            IsStatic: false
          - CPPName: GetNowEvent
            CName: GSYS_GetNowEvent
            IsStatic: false
          - CPPName: SetNowEvent
            CName: GSYS_SetNowEvent
            IsStatic: false
          - CPPName: CheckNowEvent
            CName: GSYS_CheckNowEvent
            IsStatic: false
          - CPPName: UpdateEvents
            CName: GSYS_UpdateEvents
            IsStatic: false
          - CPPName: GetGameData
            CName: GSYS_GetGameData
            IsStatic: false
          - CPPName: GetField
            CName: GSYS_GetField
            IsStatic: false
          - CPPName: SetField
            CName: GSYS_SetField
            IsStatic: false
          - CPPName: CheckField
            CName: GSYS_CheckField
            IsStatic: false
          - CPPName: Terminate
            CName: GSYS_Terminate
            IsStatic: false
          - CPPName: GetPlayerInfo
            CName: GSYS_GetPlayerInfo
            IsStatic: false
          - CPPName: GetLinkFestival
            CName: GSYS_GetLinkFestival
            IsStatic: false
          - CPPName: GetGameCommSystem
            CName: GSYS_GetGameCommSystem
            IsStatic: false

